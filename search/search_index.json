{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reusable React controls for your SharePoint Framework solutions \u00b6 This repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 is currently used. Getting started \u00b6 Installation \u00b6 To get started you have to install the following dependency to your project: @pnp/spfx-controls-react . Enter the following command to install the dependency to your project: npm install @pnp/spfx-controls-react --save --save-exact Configuration \u00b6 Note Since v1.4.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: \"ControlStrings\" : \"node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js\" Available controls \u00b6 The following controls are currently available: Charts (makes it easy to integrate Chart.js charts into web part) DateTimePicker (DateTime Picker) FileTypeIcon (Control that shows the icon of a specified file path or application) IFrameDialog (renders a Dialog with an iframe as a content) ListItemPicker (allows to select one or more items from a list) ListPicker (allows to select one or multiple available lists/libraries of the current site) ListView (List view control) Map (renders a map in a web part) PeoplePicker (People Picker) Placeholder (shows an initial placeholder if the web part has to be configured) Progress (shows progress of multiple SEQUENTIALLY executed actions) SiteBreadcrumb (Breadcrumb control) SecurityTrimmedControl (intended to be used when you want to show or hide components based on the user permissions) TaxonomyPicker (Taxonomy Picker) WebPartTitle (Customizable web part title control) IFrameDialog (renders a Dialog with an iframe as a content) Carousel (Control displays children elements with 'previous/next element' options) Field customizer controls: Note If you want to use these controls in your solution, first check out the start guide for these controls: using the field controls . FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Home"},{"location":"#reusable-react-controls-for-your-sharepoint-framework-solutions","text":"This repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 is currently used.","title":"Reusable React controls for your SharePoint Framework solutions"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#installation","text":"To get started you have to install the following dependency to your project: @pnp/spfx-controls-react . Enter the following command to install the dependency to your project: npm install @pnp/spfx-controls-react --save --save-exact","title":"Installation"},{"location":"#configuration","text":"Note Since v1.4.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: \"ControlStrings\" : \"node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js\"","title":"Configuration"},{"location":"#available-controls","text":"The following controls are currently available: Charts (makes it easy to integrate Chart.js charts into web part) DateTimePicker (DateTime Picker) FileTypeIcon (Control that shows the icon of a specified file path or application) IFrameDialog (renders a Dialog with an iframe as a content) ListItemPicker (allows to select one or more items from a list) ListPicker (allows to select one or multiple available lists/libraries of the current site) ListView (List view control) Map (renders a map in a web part) PeoplePicker (People Picker) Placeholder (shows an initial placeholder if the web part has to be configured) Progress (shows progress of multiple SEQUENTIALLY executed actions) SiteBreadcrumb (Breadcrumb control) SecurityTrimmedControl (intended to be used when you want to show or hide components based on the user permissions) TaxonomyPicker (Taxonomy Picker) WebPartTitle (Customizable web part title control) IFrameDialog (renders a Dialog with an iframe as a content) Carousel (Control displays children elements with 'previous/next element' options) Field customizer controls: Note If you want to use these controls in your solution, first check out the start guide for these controls: using the field controls . FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Available controls"},{"location":"beta/","text":"Testing out a beta release \u00b6 All you need to do for testing out a beta release of @pnp/spfx-controls-react is to install the dependency as follows: npm install @pnp/spfx-controls-react@next --save Beta control documentation \u00b6 The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation . Next Steps \u00b6 Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Beta testing"},{"location":"beta/#testing-out-a-beta-release","text":"All you need to do for testing out a beta release of @pnp/spfx-controls-react is to install the dependency as follows: npm install @pnp/spfx-controls-react@next --save","title":"Testing out a beta release"},{"location":"beta/#beta-control-documentation","text":"The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation .","title":"Beta control documentation"},{"location":"beta/#next-steps","text":"Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Next Steps"},{"location":"about/license/","text":"License Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Releases \u00b6 1.15.0 \u00b6 New control(s) \u00b6 FilePicker : New control added to the library #366 GridLayout : New control added to the library #350 Carousel : New control added to the library #227 Enhancements \u00b6 TaxonomyPicker : Localization keys added to the buttons #361 Swedish localization support added #359 Improved German translations #338 DateTimePicker : added options to render time part as mask or dropdown #330 ListItemPicker : option to select a key column #350 , #381 Improved Russian translations #384 RichText : Added the ability to add a third Color Swatch Group called custom. This will allow you to add custom colors to the font color selector. #385 Fixes \u00b6 TaxonomyPicker : Tags icon styling issue on IE11 #356 DateTimePicker : Does not respect dateLabel and timeLabel #346 PeoplePicker : Get loginName with ensureUser #342 PeoplePicker : Fix missing required field label #371 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): amortsell , Hugo Bernier , Robert Lindstr\u00f6m , pfc2k8 , Piotr Siatka , Alex Terentiev , Luis Robertto Mello , eweintraub . 1.14.0 \u00b6 Enhancements \u00b6 German translations added for attachment and RichText controls #333 SecurityTrimmedControl : Added a wrapper className property for the parent element #325 ListPicker : Add ability to filter the control via OData #319 IFrameDialog : closing dialog on commit #313 WebPartTitle add support for section background color #258 Fixes \u00b6 Fix in return type of onClick and onDoubleClick events #321 ListPicker : Fix for available dropdown selection after selection was done #315 Fixes to French translations #312 RichText : Issue on rendering the control in view mode #287 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Amr Fouad , Joel Jeffery , Mark Powney , Dominik Schmieder , Alex Terentiev , Zhephyr . 1.13.2 \u00b6 Enhancements \u00b6 Improvements to the Lithuanian localization #285 Fixes \u00b6 IFrameDialog : dimensions issue #303 DateTimePicker : IE11 layout issue #301 FileTypeIcon : Only displays PDF's in SPFx 1.8.2 #300 FieldNameRenderer : Fails to encode URI when hasPreview #296 TaxonomyPicker : Cannot find name `TermLabelAction #293 ListItemAttachments : Move deleted attachments to the recycle bin #291 DateTimePicker : Does not respect isMonthPickerVisible prop #283 ListItemAttachments : Render issue fixed + improvements to the attachment API calls #282 RichText : Fixes an issue when hitting enter in the control #277 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Tautvydas Duda , Thomas Granheim , Robert Lindstr\u00f6m , Alex Terentiev . 1.13.1 \u00b6 Fixes \u00b6 WebPartTitle : Fix for className property which is not defined #281 RichText : Fix issue where control turns drop-downs black #279 Contributors \u00b6 Special thanks to our contributor: Hugo Bernier . 1.13.0 \u00b6 New control(s) \u00b6 Progress : New control added #230 DateTimePicker : New control added #21 RichText : New control added #20 Enhancements \u00b6 SecurityTrimmedControl : Support for item and folder permission checks added #271 Retrieve the user its profile picture from SharePoint instead of Office 365 / Outlook #248 Added Lithuanian localization #247 FileTypeIcon : Added support for PDF icon file types #260 WebPartTitle : Added the ability to render a see all link or custom component #228 Fixes \u00b6 PeoplePicker : Fix for single quotes around the ms-peoplepicker class #275 RichText : Fix for toolbar that appears at top of the page #265 ListItemAttachments : Updated import statement reference in the documentation #254 ListView : Updated documentation for the iconFieldName property #245 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Francis , Fredrik Andreasson , Hugo Bernier , Tautvydas Duda , \u00d6zg\u00fcr Ersoy , Robert Lindstr\u00f6m , Alex Terentiev . 1.12.0 \u00b6 New control(s) \u00b6 ListItemAttachments : New control added #177 IFramePanel : New control added #226 Enhancements \u00b6 Added Russian localization #214 TaxonomyPicker : Ability to specify term actions #237 Fixes \u00b6 TaxonomyPicker : Terms are sorted incorrectly under the wrong parent #199 #229 TaxonomyPicker : Issue with custom sort order of items underneath root terms #231 PeoplePicker : Fix for issue where values couldn't be cleared #234 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Patrik Hellgren , Jo\u00e3o Mendes , David Opdendries , Piotr Siatka , Alex Terentiev , Tse Kit Yam . 1.11.0 \u00b6 New control(s) \u00b6 Map : Newly introduced map control is available #14 ChartControl : Newly introduced control to render charts #15 Enhancements \u00b6 PeoplePicker : Allow the people picker to search on site level and on tenant level #97 ListView : Added support for filtering #99 PeoplePicker : Make the titleText property not required #184 Placeholder : Added the ability to specify if the button can be hidden #206 Updated the office-ui-fabric-react to the same version as in SPFx 1.7.0 Fixes \u00b6 IFrameDialog : fix for spinner which keeps appearing on the iframe #154 PeoplePicker : fix SharePoint groups which could not be retrieved #161 TaxonomyPicker : fix sort order with lowercased terms #205 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Hugo Bernier , joaojmendes , Asish Padhy , Piotr Siatka , Anoop Tatti , Alex Terentiev , Tse Kit Yam . 1.10.0 \u00b6 New control(s) \u00b6 ListItemPicker : New field control #165 Enhancements \u00b6 Dutch localization added #100 German localization added #101 French localization added #102 PeoplePicker : Move defaultSelectedUsers from ComponentWillMount to ComponentDidUpdate Lifecycle #135 PeoplePicker : Initialize with users from a list item #138 PeoplePicker : Remove Messagebar error handling to match Office UI Fabric field error styling #140 PeoplePicker : REST API filter and nometadata header added to reduce payload #139 PeoplePicker : Allow to set the maximum number of suggestions suggestionsLimit #143 #148 TaxonomyPicker : retreiving the terms in the correct custom sort order #146 PeoplePicker : Documentation format updated to make it easier to check the default values #159 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Marc D Anderson , Ole Bergtun , Jo\u00e3o Mendes , Markus M\u00f6ller , Asish Padhy , PooLP , Gautam Sheth , Tse Kit Yam . 1.9.0 \u00b6 Enhancements \u00b6 Optimize bundle size for latest SPFx version due to Office UI Fabric specific versioning #136 Fixes \u00b6 FieldLookupRenderer : Lookup dialog is empty #131 IFrameDialog : Unnecessary horizontal scroll in IFrame dialog #132 PeoplePicker : Suggested People not loading after first selection #134 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Gautam Sheth , Alex Terentiev . 1.8.0 \u00b6 Enhancements \u00b6 PeoplePicker : Specify to hide or show the users/groups which are hidden in the UI #122 WebPartTitle : changing font-sizes on different resolutions #114 WebPartTitle : Added accessibility tags for web part title #121 ListView : Resizable columns - introduced a isResizable property #119 FieldNameRenderer double click support added #116 TaxonomyPicker : table markup changed to DIV #113 PeoplePicker : ability to specify the source site to load users from #110 TaxonomyPicker : Disable the terms which are set as deprecated or unavailable for tagging #109 PeoplePicker : Specify principle type to retrieve (users, groups, ...) #94 Fixes \u00b6 FieldLookupRenderer : Fixed URL querystring params #126 IFrameDialog : dialog width is not correct in IE11 #118 PeoplePicker : fix freezes when typing in search values #117 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Thomas Lamb , Joel Rodrigues , Mikael Svenson , Alex Terentiev . 1.7.0 \u00b6 Enhancements \u00b6 PeoplePicker : added functionality to initialize the control with person(s) or group(s) #98 PeoplePicker : support for searching on contains #93 PeoplePicker : find user based on email address #95 Bundle size: statically reference Office UI Fabric components in the FieldRenderer controls #107 Fixes \u00b6 FieldNameRenderer onClick does not suppress default link behavior #103 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Octavie van Haaften, Asish Padhy, Mikael Svenson, Alex Terentiev. 1.6.0 \u00b6 Enhancements \u00b6 Disabled property for PeoplePicker #88 Fixes \u00b6 New telemetry approach which allows you to use Application Insights #81 PeoplePicker property selectedItems not implemented? #90 Contributors \u00b6 Special thanks to our contributor: Octavie van Haaften. 1.5.0 \u00b6 New control(s) \u00b6 New PeoplePicker control added #19 Enhancements \u00b6 Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #82 Fixes \u00b6 Bug in TaxonomyPicker where values are not updated by an async change #83 FieldUserRenderer uses email prop for GetPropertiesFor #84 Fixed issue in single selection mode when all group items were selected in the ListView when user clicked on the group header #86 Contributors \u00b6 Special thanks to our contributors (in alphabetical order): Asish Padhy, Alex Terentiev. 1.4.0 \u00b6 New control(s) \u00b6 SecurityTrimmedControl control got added #74 Enhancements \u00b6 Allow the TaxonomyPicker to also be used in Application Customizer #77 Add npm postinstall script to automatically add the locale config #78 Fixes \u00b6 Icon not showing up in the Placeholder control #76 1.3.0 \u00b6 Enhancements \u00b6 TaxonomyPicker control got added #22 #63 #64 ListPicker control got added #34 Fixes \u00b6 Issue fixed when the optional selection property was not provided to the ListView #65 1.2.5 \u00b6 Fixes \u00b6 Undo ListView item selection after items array updates #55 1.2.4 \u00b6 Enhancements \u00b6 Hiding placeholder title on small zones Fixes \u00b6 iFrame dialog reference fix #52 1.2.3 \u00b6 Enhancements \u00b6 Optimized telemetry so that it only pushes control data WebPartTitle hide control completely when empty 1.2.2 \u00b6 Fixes \u00b6 Fixes an issue sorting in the ListView control while items were selected. Indexes were not updated. 1.2.1 \u00b6 Fixes \u00b6 FieldTaxonomyRenderer got fixed to support single and multiple values 1.2.0 \u00b6 New control(s) \u00b6 Field controls are added to the project IFrameDialog was added to the project Fixes \u00b6 Fixed theming in the WebPartTitle control 1.1.3 \u00b6 Fixes \u00b6 FileTypeIcon icon fixed where it did not render an icon. This control should now works in SPFx extensions. 1.1.2 \u00b6 Enhancements \u00b6 Improved telemetry with some object checks Fixes \u00b6 Fix for WebPartTitle control to inherit color 1.1.1 \u00b6 Enhancements \u00b6 Removed operation name from telemetry 1.1.0 \u00b6 Enhancements \u00b6 Telemetry added 1.0.0 \u00b6 New control(s) \u00b6 WebPartTitle control got added Enhancements \u00b6 ListView control got extended with the ability to specify a set of preselected items. Beta 1.0.0-beta.8 \u00b6 Fixes \u00b6 Fix for the ListView control when selection is used in combination with setState . Beta 1.0.0-beta.7 \u00b6 New control(s) \u00b6 Grouping functionality added to the ListView control Beta 1.0.0-beta.6 \u00b6 New control(s) \u00b6 Initial release","title":"Release notes"},{"location":"about/release-notes/#releases","text":"","title":"Releases"},{"location":"about/release-notes/#1150","text":"","title":"1.15.0"},{"location":"about/release-notes/#new-controls","text":"FilePicker : New control added to the library #366 GridLayout : New control added to the library #350 Carousel : New control added to the library #227","title":"New control(s)"},{"location":"about/release-notes/#enhancements","text":"TaxonomyPicker : Localization keys added to the buttons #361 Swedish localization support added #359 Improved German translations #338 DateTimePicker : added options to render time part as mask or dropdown #330 ListItemPicker : option to select a key column #350 , #381 Improved Russian translations #384 RichText : Added the ability to add a third Color Swatch Group called custom. This will allow you to add custom colors to the font color selector. #385","title":"Enhancements"},{"location":"about/release-notes/#fixes","text":"TaxonomyPicker : Tags icon styling issue on IE11 #356 DateTimePicker : Does not respect dateLabel and timeLabel #346 PeoplePicker : Get loginName with ensureUser #342 PeoplePicker : Fix missing required field label #371","title":"Fixes"},{"location":"about/release-notes/#contributors","text":"Special thanks to our contributors (in alphabetical order): amortsell , Hugo Bernier , Robert Lindstr\u00f6m , pfc2k8 , Piotr Siatka , Alex Terentiev , Luis Robertto Mello , eweintraub .","title":"Contributors"},{"location":"about/release-notes/#1140","text":"","title":"1.14.0"},{"location":"about/release-notes/#enhancements_1","text":"German translations added for attachment and RichText controls #333 SecurityTrimmedControl : Added a wrapper className property for the parent element #325 ListPicker : Add ability to filter the control via OData #319 IFrameDialog : closing dialog on commit #313 WebPartTitle add support for section background color #258","title":"Enhancements"},{"location":"about/release-notes/#fixes_1","text":"Fix in return type of onClick and onDoubleClick events #321 ListPicker : Fix for available dropdown selection after selection was done #315 Fixes to French translations #312 RichText : Issue on rendering the control in view mode #287","title":"Fixes"},{"location":"about/release-notes/#contributors_1","text":"Special thanks to our contributors (in alphabetical order): Amr Fouad , Joel Jeffery , Mark Powney , Dominik Schmieder , Alex Terentiev , Zhephyr .","title":"Contributors"},{"location":"about/release-notes/#1132","text":"","title":"1.13.2"},{"location":"about/release-notes/#enhancements_2","text":"Improvements to the Lithuanian localization #285","title":"Enhancements"},{"location":"about/release-notes/#fixes_2","text":"IFrameDialog : dimensions issue #303 DateTimePicker : IE11 layout issue #301 FileTypeIcon : Only displays PDF's in SPFx 1.8.2 #300 FieldNameRenderer : Fails to encode URI when hasPreview #296 TaxonomyPicker : Cannot find name `TermLabelAction #293 ListItemAttachments : Move deleted attachments to the recycle bin #291 DateTimePicker : Does not respect isMonthPickerVisible prop #283 ListItemAttachments : Render issue fixed + improvements to the attachment API calls #282 RichText : Fixes an issue when hitting enter in the control #277","title":"Fixes"},{"location":"about/release-notes/#contributors_2","text":"Special thanks to our contributors (in alphabetical order): Tautvydas Duda , Thomas Granheim , Robert Lindstr\u00f6m , Alex Terentiev .","title":"Contributors"},{"location":"about/release-notes/#1131","text":"","title":"1.13.1"},{"location":"about/release-notes/#fixes_3","text":"WebPartTitle : Fix for className property which is not defined #281 RichText : Fix issue where control turns drop-downs black #279","title":"Fixes"},{"location":"about/release-notes/#contributors_3","text":"Special thanks to our contributor: Hugo Bernier .","title":"Contributors"},{"location":"about/release-notes/#1130","text":"","title":"1.13.0"},{"location":"about/release-notes/#new-controls_1","text":"Progress : New control added #230 DateTimePicker : New control added #21 RichText : New control added #20","title":"New control(s)"},{"location":"about/release-notes/#enhancements_3","text":"SecurityTrimmedControl : Support for item and folder permission checks added #271 Retrieve the user its profile picture from SharePoint instead of Office 365 / Outlook #248 Added Lithuanian localization #247 FileTypeIcon : Added support for PDF icon file types #260 WebPartTitle : Added the ability to render a see all link or custom component #228","title":"Enhancements"},{"location":"about/release-notes/#fixes_4","text":"PeoplePicker : Fix for single quotes around the ms-peoplepicker class #275 RichText : Fix for toolbar that appears at top of the page #265 ListItemAttachments : Updated import statement reference in the documentation #254 ListView : Updated documentation for the iconFieldName property #245","title":"Fixes"},{"location":"about/release-notes/#contributors_4","text":"Special thanks to our contributors (in alphabetical order): Francis , Fredrik Andreasson , Hugo Bernier , Tautvydas Duda , \u00d6zg\u00fcr Ersoy , Robert Lindstr\u00f6m , Alex Terentiev .","title":"Contributors"},{"location":"about/release-notes/#1120","text":"","title":"1.12.0"},{"location":"about/release-notes/#new-controls_2","text":"ListItemAttachments : New control added #177 IFramePanel : New control added #226","title":"New control(s)"},{"location":"about/release-notes/#enhancements_4","text":"Added Russian localization #214 TaxonomyPicker : Ability to specify term actions #237","title":"Enhancements"},{"location":"about/release-notes/#fixes_5","text":"TaxonomyPicker : Terms are sorted incorrectly under the wrong parent #199 #229 TaxonomyPicker : Issue with custom sort order of items underneath root terms #231 PeoplePicker : Fix for issue where values couldn't be cleared #234","title":"Fixes"},{"location":"about/release-notes/#contributors_5","text":"Special thanks to our contributors (in alphabetical order): Patrik Hellgren , Jo\u00e3o Mendes , David Opdendries , Piotr Siatka , Alex Terentiev , Tse Kit Yam .","title":"Contributors"},{"location":"about/release-notes/#1110","text":"","title":"1.11.0"},{"location":"about/release-notes/#new-controls_3","text":"Map : Newly introduced map control is available #14 ChartControl : Newly introduced control to render charts #15","title":"New control(s)"},{"location":"about/release-notes/#enhancements_5","text":"PeoplePicker : Allow the people picker to search on site level and on tenant level #97 ListView : Added support for filtering #99 PeoplePicker : Make the titleText property not required #184 Placeholder : Added the ability to specify if the button can be hidden #206 Updated the office-ui-fabric-react to the same version as in SPFx 1.7.0","title":"Enhancements"},{"location":"about/release-notes/#fixes_6","text":"IFrameDialog : fix for spinner which keeps appearing on the iframe #154 PeoplePicker : fix SharePoint groups which could not be retrieved #161 TaxonomyPicker : fix sort order with lowercased terms #205","title":"Fixes"},{"location":"about/release-notes/#contributors_6","text":"Special thanks to our contributors (in alphabetical order): Hugo Bernier , joaojmendes , Asish Padhy , Piotr Siatka , Anoop Tatti , Alex Terentiev , Tse Kit Yam .","title":"Contributors"},{"location":"about/release-notes/#1100","text":"","title":"1.10.0"},{"location":"about/release-notes/#new-controls_4","text":"ListItemPicker : New field control #165","title":"New control(s)"},{"location":"about/release-notes/#enhancements_6","text":"Dutch localization added #100 German localization added #101 French localization added #102 PeoplePicker : Move defaultSelectedUsers from ComponentWillMount to ComponentDidUpdate Lifecycle #135 PeoplePicker : Initialize with users from a list item #138 PeoplePicker : Remove Messagebar error handling to match Office UI Fabric field error styling #140 PeoplePicker : REST API filter and nometadata header added to reduce payload #139 PeoplePicker : Allow to set the maximum number of suggestions suggestionsLimit #143 #148 TaxonomyPicker : retreiving the terms in the correct custom sort order #146 PeoplePicker : Documentation format updated to make it easier to check the default values #159","title":"Enhancements"},{"location":"about/release-notes/#contributors_7","text":"Special thanks to our contributors (in alphabetical order): Marc D Anderson , Ole Bergtun , Jo\u00e3o Mendes , Markus M\u00f6ller , Asish Padhy , PooLP , Gautam Sheth , Tse Kit Yam .","title":"Contributors"},{"location":"about/release-notes/#190","text":"","title":"1.9.0"},{"location":"about/release-notes/#enhancements_7","text":"Optimize bundle size for latest SPFx version due to Office UI Fabric specific versioning #136","title":"Enhancements"},{"location":"about/release-notes/#fixes_7","text":"FieldLookupRenderer : Lookup dialog is empty #131 IFrameDialog : Unnecessary horizontal scroll in IFrame dialog #132 PeoplePicker : Suggested People not loading after first selection #134","title":"Fixes"},{"location":"about/release-notes/#contributors_8","text":"Special thanks to our contributors (in alphabetical order): Gautam Sheth , Alex Terentiev .","title":"Contributors"},{"location":"about/release-notes/#180","text":"","title":"1.8.0"},{"location":"about/release-notes/#enhancements_8","text":"PeoplePicker : Specify to hide or show the users/groups which are hidden in the UI #122 WebPartTitle : changing font-sizes on different resolutions #114 WebPartTitle : Added accessibility tags for web part title #121 ListView : Resizable columns - introduced a isResizable property #119 FieldNameRenderer double click support added #116 TaxonomyPicker : table markup changed to DIV #113 PeoplePicker : ability to specify the source site to load users from #110 TaxonomyPicker : Disable the terms which are set as deprecated or unavailable for tagging #109 PeoplePicker : Specify principle type to retrieve (users, groups, ...) #94","title":"Enhancements"},{"location":"about/release-notes/#fixes_8","text":"FieldLookupRenderer : Fixed URL querystring params #126 IFrameDialog : dialog width is not correct in IE11 #118 PeoplePicker : fix freezes when typing in search values #117","title":"Fixes"},{"location":"about/release-notes/#contributors_9","text":"Special thanks to our contributors (in alphabetical order): Thomas Lamb , Joel Rodrigues , Mikael Svenson , Alex Terentiev .","title":"Contributors"},{"location":"about/release-notes/#170","text":"","title":"1.7.0"},{"location":"about/release-notes/#enhancements_9","text":"PeoplePicker : added functionality to initialize the control with person(s) or group(s) #98 PeoplePicker : support for searching on contains #93 PeoplePicker : find user based on email address #95 Bundle size: statically reference Office UI Fabric components in the FieldRenderer controls #107","title":"Enhancements"},{"location":"about/release-notes/#fixes_9","text":"FieldNameRenderer onClick does not suppress default link behavior #103","title":"Fixes"},{"location":"about/release-notes/#contributors_10","text":"Special thanks to our contributors (in alphabetical order): Octavie van Haaften, Asish Padhy, Mikael Svenson, Alex Terentiev.","title":"Contributors"},{"location":"about/release-notes/#160","text":"","title":"1.6.0"},{"location":"about/release-notes/#enhancements_10","text":"Disabled property for PeoplePicker #88","title":"Enhancements"},{"location":"about/release-notes/#fixes_10","text":"New telemetry approach which allows you to use Application Insights #81 PeoplePicker property selectedItems not implemented? #90","title":"Fixes"},{"location":"about/release-notes/#contributors_11","text":"Special thanks to our contributor: Octavie van Haaften.","title":"Contributors"},{"location":"about/release-notes/#150","text":"","title":"1.5.0"},{"location":"about/release-notes/#new-controls_5","text":"New PeoplePicker control added #19","title":"New control(s)"},{"location":"about/release-notes/#enhancements_11","text":"Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #82","title":"Enhancements"},{"location":"about/release-notes/#fixes_11","text":"Bug in TaxonomyPicker where values are not updated by an async change #83 FieldUserRenderer uses email prop for GetPropertiesFor #84 Fixed issue in single selection mode when all group items were selected in the ListView when user clicked on the group header #86","title":"Fixes"},{"location":"about/release-notes/#contributors_12","text":"Special thanks to our contributors (in alphabetical order): Asish Padhy, Alex Terentiev.","title":"Contributors"},{"location":"about/release-notes/#140","text":"","title":"1.4.0"},{"location":"about/release-notes/#new-controls_6","text":"SecurityTrimmedControl control got added #74","title":"New control(s)"},{"location":"about/release-notes/#enhancements_12","text":"Allow the TaxonomyPicker to also be used in Application Customizer #77 Add npm postinstall script to automatically add the locale config #78","title":"Enhancements"},{"location":"about/release-notes/#fixes_12","text":"Icon not showing up in the Placeholder control #76","title":"Fixes"},{"location":"about/release-notes/#130","text":"","title":"1.3.0"},{"location":"about/release-notes/#enhancements_13","text":"TaxonomyPicker control got added #22 #63 #64 ListPicker control got added #34","title":"Enhancements"},{"location":"about/release-notes/#fixes_13","text":"Issue fixed when the optional selection property was not provided to the ListView #65","title":"Fixes"},{"location":"about/release-notes/#125","text":"","title":"1.2.5"},{"location":"about/release-notes/#fixes_14","text":"Undo ListView item selection after items array updates #55","title":"Fixes"},{"location":"about/release-notes/#124","text":"","title":"1.2.4"},{"location":"about/release-notes/#enhancements_14","text":"Hiding placeholder title on small zones","title":"Enhancements"},{"location":"about/release-notes/#fixes_15","text":"iFrame dialog reference fix #52","title":"Fixes"},{"location":"about/release-notes/#123","text":"","title":"1.2.3"},{"location":"about/release-notes/#enhancements_15","text":"Optimized telemetry so that it only pushes control data WebPartTitle hide control completely when empty","title":"Enhancements"},{"location":"about/release-notes/#122","text":"","title":"1.2.2"},{"location":"about/release-notes/#fixes_16","text":"Fixes an issue sorting in the ListView control while items were selected. Indexes were not updated.","title":"Fixes"},{"location":"about/release-notes/#121","text":"","title":"1.2.1"},{"location":"about/release-notes/#fixes_17","text":"FieldTaxonomyRenderer got fixed to support single and multiple values","title":"Fixes"},{"location":"about/release-notes/#120","text":"","title":"1.2.0"},{"location":"about/release-notes/#new-controls_7","text":"Field controls are added to the project IFrameDialog was added to the project","title":"New control(s)"},{"location":"about/release-notes/#fixes_18","text":"Fixed theming in the WebPartTitle control","title":"Fixes"},{"location":"about/release-notes/#113","text":"","title":"1.1.3"},{"location":"about/release-notes/#fixes_19","text":"FileTypeIcon icon fixed where it did not render an icon. This control should now works in SPFx extensions.","title":"Fixes"},{"location":"about/release-notes/#112","text":"","title":"1.1.2"},{"location":"about/release-notes/#enhancements_16","text":"Improved telemetry with some object checks","title":"Enhancements"},{"location":"about/release-notes/#fixes_20","text":"Fix for WebPartTitle control to inherit color","title":"Fixes"},{"location":"about/release-notes/#111","text":"","title":"1.1.1"},{"location":"about/release-notes/#enhancements_17","text":"Removed operation name from telemetry","title":"Enhancements"},{"location":"about/release-notes/#110","text":"","title":"1.1.0"},{"location":"about/release-notes/#enhancements_18","text":"Telemetry added","title":"Enhancements"},{"location":"about/release-notes/#100","text":"","title":"1.0.0"},{"location":"about/release-notes/#new-controls_8","text":"WebPartTitle control got added","title":"New control(s)"},{"location":"about/release-notes/#enhancements_19","text":"ListView control got extended with the ability to specify a set of preselected items.","title":"Enhancements"},{"location":"about/release-notes/#beta-100-beta8","text":"","title":"Beta 1.0.0-beta.8"},{"location":"about/release-notes/#fixes_21","text":"Fix for the ListView control when selection is used in combination with setState .","title":"Fixes"},{"location":"about/release-notes/#beta-100-beta7","text":"","title":"Beta 1.0.0-beta.7"},{"location":"about/release-notes/#new-controls_9","text":"Grouping functionality added to the ListView control","title":"New control(s)"},{"location":"about/release-notes/#beta-100-beta6","text":"","title":"Beta 1.0.0-beta.6"},{"location":"about/release-notes/#new-controls_10","text":"Initial release","title":"New control(s)"},{"location":"controls/Carousel/","text":"Carousel control \u00b6 This control renders passed elements with 'previous/next element' option. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Carousel } from \"@pnp/spfx-controls-react/lib/Carousel\" ; Use the Carousel control in your code as follows: < Carousel buttonsLocation = { CarouselButtonsLocation . top } buttonsDisplay = { CarouselButtonsDisplay . block } contentContainerStyles = { styles . carouselContent } containerButtonsStyles = { styles . carouselButtonsContainer } isInfinite = { true } element = { this . carouselElements } onMoveNextClicked = {( index : number ) => { console . log ( `Next button clicked: ${ index } ` ); }} onMovePrevClicked = {( index : number ) => { console . log ( `Prev button clicked: ${ index } ` ); }} /> < Carousel buttonsLocation = { CarouselButtonsLocation . bottom } buttonsDisplay = { CarouselButtonsDisplay . buttonsOnly } contentContainerStyles = { styles . carouselContent } containerButtonsStyles = { styles . carouselButtonsContainer } canMoveNext = { this . state . canMoveNext } canMovePrev = { this . state . canMovePrev } triggerPageEvent = { this . triggerNextElement } element = { this . state . currentCarouselElement } /> Implementation \u00b6 The Carousel component can be configured with the following properties: Property Type Required Description startIndex number no Specifies the initial index of the element to be displayed. isInfinite boolean no Indicates if infinite scrolling is enabled. canMoveNext boolean no Property indicates if the next item button can be clicked. If not provided, status of the button is calculated based on the current index. It is mandatory when triggerPageEvent is used. canMovePrev boolean no Property indicates if the previous item button can be clicked. If not provided, status of the button is calculated based on the current index. It is mandatory when triggerPageEvent is used. buttonsLocation CarouselButtonsLocation yes Specifies the location of the buttons inside the container. buttonsDisplay CarouselButtonsDisplay yes Specifies the buttons container display mode. containerStyles ICssInput no Allows to specify own styles for carousel container. loadingComponentContainerStyles ICssInput no Allows to specify own styles for loading component. contentContainerStyles ICssInput no Allows to specify own styles for elements container. containerButtonsStyles ICssInput no Allows to specify own styles for buttons container. prevButtonStyles ICssInput no Allows to specify own styles for previous item button. nextButtonStyles ICssInput no Allows to specify own styles for next item button. prevButtonIconName string no Name of the icon to be used for PreviousItem button. Default 'ChevronLeft'. nextButtonIconName string no Name of the icon to be used for NextItem button. Default 'ChevronRight'. triggerPageEvent (index: number) => void no Triggers parent control to provide new element to be displayed. After the method is executed, carousel control switches to processing mode and loadingComponent is displayed. element JSX.Element | JSX.Element[] yes Fixed array of elemenets to be displayed in carousel - if triggerPageEvent is not used. In case triggerPageEvent is in use, JSX.Element has to be provided. Elements are distinguished based on the 'key' property. loadingComponent JSX.Element no Allows to inject custom component when the carousel is in processing state. If not provided, Spinner is displayed. onMoveNextClicked (currentIndex: number) => void no Callback function called after the next item button is clicked. Not used when triggerPageEvent is specified. onMovePrevClicked (currentIndex: number) => void no Callback function called after the previous item button is clicked. Not used when triggerPageEvent is specified. enum CarouselButtonsLocation Provides options for carousel buttons location. Value Description top Buttons are going to be placed in the top of the control. center Buttons are going to be placed in the center of the control. bottom Buttons are going to be placed in the bottom of the control. enum CarouselButtonsDisplay Provides options for carousel buttons display mode. Value Description block Reserves space for buttons on both sides of the control. buttonsOnly Only icon buttons are displayed. hidden Buttons are not displayed. They appear onhover event.","title":"Carousel"},{"location":"controls/Carousel/#carousel-control","text":"This control renders passed elements with 'previous/next element' option. Here is an example of the control in action:","title":"Carousel control"},{"location":"controls/Carousel/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Carousel } from \"@pnp/spfx-controls-react/lib/Carousel\" ; Use the Carousel control in your code as follows: < Carousel buttonsLocation = { CarouselButtonsLocation . top } buttonsDisplay = { CarouselButtonsDisplay . block } contentContainerStyles = { styles . carouselContent } containerButtonsStyles = { styles . carouselButtonsContainer } isInfinite = { true } element = { this . carouselElements } onMoveNextClicked = {( index : number ) => { console . log ( `Next button clicked: ${ index } ` ); }} onMovePrevClicked = {( index : number ) => { console . log ( `Prev button clicked: ${ index } ` ); }} /> < Carousel buttonsLocation = { CarouselButtonsLocation . bottom } buttonsDisplay = { CarouselButtonsDisplay . buttonsOnly } contentContainerStyles = { styles . carouselContent } containerButtonsStyles = { styles . carouselButtonsContainer } canMoveNext = { this . state . canMoveNext } canMovePrev = { this . state . canMovePrev } triggerPageEvent = { this . triggerNextElement } element = { this . state . currentCarouselElement } />","title":"How to use this control in your solutions"},{"location":"controls/Carousel/#implementation","text":"The Carousel component can be configured with the following properties: Property Type Required Description startIndex number no Specifies the initial index of the element to be displayed. isInfinite boolean no Indicates if infinite scrolling is enabled. canMoveNext boolean no Property indicates if the next item button can be clicked. If not provided, status of the button is calculated based on the current index. It is mandatory when triggerPageEvent is used. canMovePrev boolean no Property indicates if the previous item button can be clicked. If not provided, status of the button is calculated based on the current index. It is mandatory when triggerPageEvent is used. buttonsLocation CarouselButtonsLocation yes Specifies the location of the buttons inside the container. buttonsDisplay CarouselButtonsDisplay yes Specifies the buttons container display mode. containerStyles ICssInput no Allows to specify own styles for carousel container. loadingComponentContainerStyles ICssInput no Allows to specify own styles for loading component. contentContainerStyles ICssInput no Allows to specify own styles for elements container. containerButtonsStyles ICssInput no Allows to specify own styles for buttons container. prevButtonStyles ICssInput no Allows to specify own styles for previous item button. nextButtonStyles ICssInput no Allows to specify own styles for next item button. prevButtonIconName string no Name of the icon to be used for PreviousItem button. Default 'ChevronLeft'. nextButtonIconName string no Name of the icon to be used for NextItem button. Default 'ChevronRight'. triggerPageEvent (index: number) => void no Triggers parent control to provide new element to be displayed. After the method is executed, carousel control switches to processing mode and loadingComponent is displayed. element JSX.Element | JSX.Element[] yes Fixed array of elemenets to be displayed in carousel - if triggerPageEvent is not used. In case triggerPageEvent is in use, JSX.Element has to be provided. Elements are distinguished based on the 'key' property. loadingComponent JSX.Element no Allows to inject custom component when the carousel is in processing state. If not provided, Spinner is displayed. onMoveNextClicked (currentIndex: number) => void no Callback function called after the next item button is clicked. Not used when triggerPageEvent is specified. onMovePrevClicked (currentIndex: number) => void no Callback function called after the previous item button is clicked. Not used when triggerPageEvent is specified. enum CarouselButtonsLocation Provides options for carousel buttons location. Value Description top Buttons are going to be placed in the top of the control. center Buttons are going to be placed in the center of the control. bottom Buttons are going to be placed in the bottom of the control. enum CarouselButtonsDisplay Provides options for carousel buttons display mode. Value Description block Reserves space for buttons on both sides of the control. buttonsOnly Only icon buttons are displayed. hidden Buttons are not displayed. They appear onhover event.","title":"Implementation"},{"location":"controls/ChartControl/","text":"ChartControl control \u00b6 This control makes it easy to integrate Chart.js charts into your web parts. It offers most of the functionality available with Chart.js. The control automatically renders responsive charts, uses the environment's theme colors, and renders a hidden table for users with impaired vision. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following module to your component: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Use the ChartControl control in your code as follows: < ChartControl type = { ChartType . Bar } data = {{ labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] }] }} /> Compatibility with Chart.js \u00b6 The majority of Chart.js its options like data , options , type , and plugins will work the same way as is -- except that you use TypeScript syntax. To find sample code that you can use, visit the Chart.Js documentation . For example, to reproduce following Javascript code sample from Chart.js : < canvas id = \"myChart\" width = \"400\" height = \"400\" ></ canvas > < script > var ctx = document . getElementById ( \"myChart\" ). getContext ( '2d' ); var myChart = new Chart ( ctx , { type : 'bar' , data : { labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(255, 206, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(255, 159, 64, 0.2)' ], borderColor : [ 'rgba(255,99,132,1)' , 'rgba(54, 162, 235, 1)' , 'rgba(255, 206, 86, 1)' , 'rgba(75, 192, 192, 1)' , 'rgba(153, 102, 255, 1)' , 'rgba(255, 159, 64, 1)' ], borderWidth : 1 }] }, options : { scales : { yAxes : [{ ticks : { beginAtZero : true } }] } } }); </ script > You would use the following Typescript code: < ChartControl type = { ChartType . Bar } data = {{ labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(255, 206, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(255, 159, 64, 0.2)' ], borderColor : [ 'rgba(255,99,132,1)' , 'rgba(54, 162, 235, 1)' , 'rgba(255, 206, 86, 1)' , 'rgba(75, 192, 192, 1)' , 'rgba(153, 102, 255, 1)' , 'rgba(255, 159, 64, 1)' ], borderWidth : 1 }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} /> The code above will produce the following chart: Specifying Data \u00b6 The data property typically consist of: labels : (Optional) An array of strings providing the data labels (e.g.: ['January', 'February', 'March', 'April', 'May', 'June', 'July'] ) datasets : At least one dataset, which contains: label : (Optional) A label for the data (e.g.: 'My First Dataset' ) data : An array of numbers (e.g.: [65, 59, 80, 81, 56, 55, 40] ) See below for more information on what types of data are required for each type of chart. Specifying Data Promises \u00b6 The ChartControl makes it easy to retrieve data asynchronously with the datapromise property. To use datapromise , add a function to your web part that returns a Promise<Chart.ChartData> as follows: private _loadAsyncData () : Promise < Chart . ChartData > { return new Promise < Chart . ChartData > (( resolve , reject ) => { // Call your own service -- this example returns an array of numbers // but you could call const dataProvider : IChartDataProvider = new MockChartDataProvider (); dataProvider . getNumberArray (). then (( numbers : number []) => { // format your response to ChartData const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ] datasets : [ { label : 'My First dataset' , data : numbers } ] }; // resolve the promise resolve ( data ); }); }); } Then, instead of passing a data property, pass your function to the datapromise property, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} /> If you want, you provide a template to display until the datapromise is resolved, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < div > Please wait ... < /div>} /> You can provide full React controls within the loadingtemplate . For example, to use the Office UI Fabric Spinner control, you would use the following code: import { Spinner , SpinnerSize } from 'office-ui-fabric-react/lib/Spinner' ; ... < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < Spinner size = { SpinnerSize . large } label = \"Loading...\" /> } /> You can also provide another template to display when the datapromise is rejected, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < Spinner size = { SpinnerSize . large } label = \"Loading...\" /> } rejectedtemplate = {( error : string ) => < div > Something went wrong : { error } < /div>} /> Theme Color Support \u00b6 By default, the ChartControl will attempt to use the environment theme colors and fonts for elements such as the chart background color, grid lines, titles, labels, legends, and tooltips. This includes support for dark themes and high contrast themes. If you wish, you can disable the use of themes by setting the useTheme property to false . Doing so will use the standard Chart.js colors and fonts. Office Color Palettes \u00b6 You can also simplify the majority of code samples by omitting the color properties; the ChartControl will automatically reproduce the color palette that you would get if you used Office to create the chart. < ChartControl type = { ChartType . Bar } data = {{ labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ] }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} /> You can also set the palette property to choose one of the Office color palettes. For example, Specifying ChartPalette.OfficeMonochromatic1 will produce the following chart: Responsiveness \u00b6 The ChartControl will automatically expand to fit its container. If you wish to control the size of the chart, set its parent container size, or use the className property to pass your own CSS class and override the dimensions within that class. Accessibility \u00b6 As long as you provide labels for all your data elements, the ChartControl will render a hidden table. Users who are visually impaired and use a screen reader will hear a description of the data in the chart. You can improve the accessible table by adding an alternateText , a caption and a summary . If you do not provide a caption , the control will attempt to use the chart's title. For example: < ChartControl type = { ChartType . Bar } accessible = {{ alternateText : 'Text alternative for this canvas graphic is in the data table below.' , summary : 'This is the text alternative for the canvas graphic.' , caption : 'Votes for favorite pets' }} data = {{ labels : [ \"Dog\" , \"Cat\" , \"Hamster\" , \"Gerbil\" , \"Hedgehog\" , \"Platypus\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ] }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} /> Implementation \u00b6 ChartControl Properties \u00b6 The ChartControl can be configured with the following properties: Property Type Required Description accessibility IChartAccessibility no Optional property to specify the accessibility options. className string no Optional property to specify a custom class that allows you to change the chart's styles. data ChartData no The data you wish to display. datapromise Promise no The promise to load data asynchronously. Use with loadingtemplate and rejectedtemplate loadingtemplate JSX.Element () => JSX.Element no The HTML to display while waiting to resolve the datapromise options ChartOptions no Optional property to set the chart's additional options. palette ChartPalette no Optional property to set the desired Office color paette plugins object[] no Optional property to set an array of objects implementing the IChartPlugin interface rejectedtemplate JSX.Element () => JSX.Element no The HTML to display if the datapromise promise returns an error. useTheme boolean no Optional property to set whether the ChartControl should attempt to use theme colors. Setting it to false will use the startard Chart.js colors and fonts. type ChartType or string yes The type of chart you wish to render. You can also use the string equivalent. onClick (event?: MouseEvent, activeElements?: Array<{}>) => void no Optional callback method that get called when a user clicks on the chart onHover (chart: Chart, event: MouseEvent, activeElements: Array<{}>) => void no Optional callback method that get called when a user hovers the chart onResize (chart: Chart, newSize: ChartSize) => void no Optional callback method that get called when the window containing the ChartXontrol resizes You can call the following methods to interact with the chart after it has been initialized: Method Type Description clear void Will clear the chart canvas. Used extensively internally between animation frames, but you might find it useful. getCanvas () => HTMLCanvasElement Return the canvass element that contains the chart getChart () => Chart Returns the Chart.js instance getDatasetAtEvent (e: MouseEvent) => Array<{}> Looks for the element under the event point, then returns all elements from that dataset. This is used internally for 'dataset' mode highlighting getElementAtEvent (e: MouseEvent) => {} Calling getElementAtEvent(event) passing an argument of an event will return the single element at the event position. For example, you can use with onClick event handlers. getElementsAtEvent (e: MouseEvent) => Array<{}> Looks for the element under the event point, then returns all elements at the same data index. This is used internally for 'label' mode highlighting. Calling getElementsAtEvent(event) passing an argument of an event will return the point elements that are at that the same position of that event. renderChart (config: {}) => void Triggers a redraw of all chart elements. Note, this does not update elements for new data. Use .update() in that case. stop void Use this to stop any current animation loop. This will pause the chart during any current animation frame. toBase64Image () => string Returns a base 64 encoded string of the chart in it's current state. update (config?: number | boolean | string) => void Triggers an update of the chart. This can be safely called after updating the data object. This will update all scales, legends, and then re-render the chart. ChartType \u00b6 Defines the type of chart that will be rendered. For more information what data structure is required for each type of chart, review the Chart.js documentation ( links below ). Name Chart.js Equivalent Description Bar bar Vertical bar chart Bubble bubble Bubble chart Doughnut doughnut Doughnut chart HorizontalBar horizontalBar Horizontal bar chart Line line Line chart Pie pie Pie chart PolarArea polarArea Polar area chart Radar radar Radar chart Scatter scatter Scatter graph IChartAccessibility \u00b6 The IChartAccessibility interface implements the following properties: Property Type Required Description alternateText string no Optional property to provide an accessible alternate text for the chart. We recommend that you use this property with summary className string no Optional property to specify a custom CSS class for the accessible table. caption string no Optional property to provide a caption for the accessible table. enable boolean no Optional property to turn on or off the rendering of the accessible table. summary string no Optional property to specify the chart's summary. We recommend that you use this property with alternateText onRenderTable () => JSX.Element no Options callback method that allows you to override the accessible table. ChartPalette \u00b6 Defines one of the possible Office color palette to use in a chart. The color palettes are the same that you find within Office. Name Office Name Description Example OfficeColorful1 Office Colorful Palette 1 Blue, Orange, Grey, Gold, Blue, Green OfficeColorful2 Office Colorful Palette 2 Blue, Grey, Blue, Dark Blue, Dark Grey, Dark Blue OfficeColorful3 Office Colorful Palette 3 Orange, Gold, Green, Brown, Dark Yellow, Dark Green OfficeColorful4 Office Colorful Palette 4 Green, Blue, Gold, Dark Green, Dark Blue, Dark Yellow OfficeMonochromatic1 Monochromatic Palette 1 Blue gradient, dark to light OfficeMonochromatic2 Monochromatic Palette 2 Orange gradient, dark to light OfficeMonochromatic3 Monochromatic Palette 3 Grey gradient, dark to light OfficeMonochromatic4 Monochromatic Palette 4 Gold gradient, dark to light OfficeMonochromatic5 Monochromatic Palette 5 Blue gradient, dark to light OfficeMonochromatic6 Monochromatic Palette 6 Green gradient, dark to light OfficeMonochromatic7 Monochromatic Palette 7 Dark Grey, Light Grey, Grey, Dark Grey, Light Grey, Grey OfficeMonochromatic8 Monochromatic Palette 8 Blue gradient, light to dark OfficeMonochromatic9 Monochromatic Palette 9 Orange gradient, light to dark OfficeMonochromatic10 Monochromatic Palette 10 Grey gradient, light to dark OfficeMonochromatic11 Monochromatic Palette 11 Gold gradient, light to dark OfficeMonochromatic12 Monochromatic Palette 12 Blue gradient, light to dark OfficeMonochromatic13 Monochromatic Palette 13 Green gradient, light to dark IChartPlugin \u00b6 The easiest way to customize a chart is to use the plugin functionality provided by Chart.js . In order to use a plugin, simply pass an array of objects that implement the IChartPlugin interface to the plugins property of the ChartControl. If a hook is listed as cancellable, you can return false to cancel the event. Property Type Required Description afterDatasetsDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called after the datasets are drawn but after scales are drawn. afterDatasetUpdate (chartInstance: Chart, options?: {}) => void no Called after a dataset was updated. afterDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called after an animation frame was drawn. afterEvent (chartInstance: Chart, event: Event, options?: {}) => void no Called after an event occurs on the chart. afterInit (chartInstance: Chart, options?: {}) => void no Called after a chart initializes afterLayout (chartInstance: Chart, options?: {}) => void no Called after the chart layout was rendered. afterRender (chartInstance: Chart, options?: {}) => void no Called after a rander. afterTooltipDraw (chartInstance: Chart, tooltipData?: {}, options?: {}) => void no Called after drawing the tooltip . Note that this hook will not be called if the tooltip drawing has been previously cancelled. afterUpdate (chartInstance: Chart, options?: {}) => void no Called after a chart updates beforeDatasetsDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called before the datasets are drawn but after scales are drawn. Cancellable. beforeDatasetUpdate (chartInstance: Chart, options?: {}) => void no Called before a dataset is updated. Cancellable. beforeDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called before an animation frame is drawn. beforeEvent (chartInstance: Chart, event: Event, options?: {}) => void no Called when an event occurs on the chart. Cancellable. beforeInit (chartInstance: Chart, options?: {}) => void no Called before a chart initializes beforeLayout (chartInstance: Chart, options?: {}) => void no Called before rendering the chart's layout. Cancellable. beforeRender (chartInstance: Chart, options?: {}) => void no Called at the start of a render. It is only called once, even if the animation will run for a number of frames. Use beforeDraw or afterDraw to do something on each animation frame. Cancellable. beforeTooltipDraw (chartInstance: Chart, tooltipData?: {}, options?: {}) => void no Called before drawing the tooltip . Cancellable. If it returns false , tooltip drawing is cancelled until another render is triggered. beforeUpdate (chartInstance: Chart, options?: {}) => void no Called before updating the chart. Cancellable. destroy (chartInstance: Chart) => void no Called when a chart is destroyed. resize (chartInstance: Chart, newChartSize: Chart.ChartSize, options?: {}) => void no Called when a chart resizes. Cancellable.","title":"ChartControl"},{"location":"controls/ChartControl/#chartcontrol-control","text":"This control makes it easy to integrate Chart.js charts into your web parts. It offers most of the functionality available with Chart.js. The control automatically renders responsive charts, uses the environment's theme colors, and renders a hidden table for users with impaired vision. Here is an example of the control in action:","title":"ChartControl control"},{"location":"controls/ChartControl/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following module to your component: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Use the ChartControl control in your code as follows: < ChartControl type = { ChartType . Bar } data = {{ labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] }] }} />","title":"How to use this control in your solutions"},{"location":"controls/ChartControl/#compatibility-with-chartjs","text":"The majority of Chart.js its options like data , options , type , and plugins will work the same way as is -- except that you use TypeScript syntax. To find sample code that you can use, visit the Chart.Js documentation . For example, to reproduce following Javascript code sample from Chart.js : < canvas id = \"myChart\" width = \"400\" height = \"400\" ></ canvas > < script > var ctx = document . getElementById ( \"myChart\" ). getContext ( '2d' ); var myChart = new Chart ( ctx , { type : 'bar' , data : { labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(255, 206, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(255, 159, 64, 0.2)' ], borderColor : [ 'rgba(255,99,132,1)' , 'rgba(54, 162, 235, 1)' , 'rgba(255, 206, 86, 1)' , 'rgba(75, 192, 192, 1)' , 'rgba(153, 102, 255, 1)' , 'rgba(255, 159, 64, 1)' ], borderWidth : 1 }] }, options : { scales : { yAxes : [{ ticks : { beginAtZero : true } }] } } }); </ script > You would use the following Typescript code: < ChartControl type = { ChartType . Bar } data = {{ labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(255, 206, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(255, 159, 64, 0.2)' ], borderColor : [ 'rgba(255,99,132,1)' , 'rgba(54, 162, 235, 1)' , 'rgba(255, 206, 86, 1)' , 'rgba(75, 192, 192, 1)' , 'rgba(153, 102, 255, 1)' , 'rgba(255, 159, 64, 1)' ], borderWidth : 1 }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} /> The code above will produce the following chart:","title":"Compatibility with Chart.js"},{"location":"controls/ChartControl/#specifying-data","text":"The data property typically consist of: labels : (Optional) An array of strings providing the data labels (e.g.: ['January', 'February', 'March', 'April', 'May', 'June', 'July'] ) datasets : At least one dataset, which contains: label : (Optional) A label for the data (e.g.: 'My First Dataset' ) data : An array of numbers (e.g.: [65, 59, 80, 81, 56, 55, 40] ) See below for more information on what types of data are required for each type of chart.","title":"Specifying Data"},{"location":"controls/ChartControl/#specifying-data-promises","text":"The ChartControl makes it easy to retrieve data asynchronously with the datapromise property. To use datapromise , add a function to your web part that returns a Promise<Chart.ChartData> as follows: private _loadAsyncData () : Promise < Chart . ChartData > { return new Promise < Chart . ChartData > (( resolve , reject ) => { // Call your own service -- this example returns an array of numbers // but you could call const dataProvider : IChartDataProvider = new MockChartDataProvider (); dataProvider . getNumberArray (). then (( numbers : number []) => { // format your response to ChartData const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ] datasets : [ { label : 'My First dataset' , data : numbers } ] }; // resolve the promise resolve ( data ); }); }); } Then, instead of passing a data property, pass your function to the datapromise property, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} /> If you want, you provide a template to display until the datapromise is resolved, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < div > Please wait ... < /div>} /> You can provide full React controls within the loadingtemplate . For example, to use the Office UI Fabric Spinner control, you would use the following code: import { Spinner , SpinnerSize } from 'office-ui-fabric-react/lib/Spinner' ; ... < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < Spinner size = { SpinnerSize . large } label = \"Loading...\" /> } /> You can also provide another template to display when the datapromise is rejected, as follows: < ChartControl type = 'bar' datapromise = { this . _loadAsyncData ()} loadingtemplate = {() => < Spinner size = { SpinnerSize . large } label = \"Loading...\" /> } rejectedtemplate = {( error : string ) => < div > Something went wrong : { error } < /div>} />","title":"Specifying Data Promises"},{"location":"controls/ChartControl/#theme-color-support","text":"By default, the ChartControl will attempt to use the environment theme colors and fonts for elements such as the chart background color, grid lines, titles, labels, legends, and tooltips. This includes support for dark themes and high contrast themes. If you wish, you can disable the use of themes by setting the useTheme property to false . Doing so will use the standard Chart.js colors and fonts.","title":"Theme Color Support"},{"location":"controls/ChartControl/#office-color-palettes","text":"You can also simplify the majority of code samples by omitting the color properties; the ChartControl will automatically reproduce the color palette that you would get if you used Office to create the chart. < ChartControl type = { ChartType . Bar } data = {{ labels : [ \"Red\" , \"Blue\" , \"Yellow\" , \"Green\" , \"Purple\" , \"Orange\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ] }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} /> You can also set the palette property to choose one of the Office color palettes. For example, Specifying ChartPalette.OfficeMonochromatic1 will produce the following chart:","title":"Office Color Palettes"},{"location":"controls/ChartControl/#responsiveness","text":"The ChartControl will automatically expand to fit its container. If you wish to control the size of the chart, set its parent container size, or use the className property to pass your own CSS class and override the dimensions within that class.","title":"Responsiveness"},{"location":"controls/ChartControl/#accessibility","text":"As long as you provide labels for all your data elements, the ChartControl will render a hidden table. Users who are visually impaired and use a screen reader will hear a description of the data in the chart. You can improve the accessible table by adding an alternateText , a caption and a summary . If you do not provide a caption , the control will attempt to use the chart's title. For example: < ChartControl type = { ChartType . Bar } accessible = {{ alternateText : 'Text alternative for this canvas graphic is in the data table below.' , summary : 'This is the text alternative for the canvas graphic.' , caption : 'Votes for favorite pets' }} data = {{ labels : [ \"Dog\" , \"Cat\" , \"Hamster\" , \"Gerbil\" , \"Hedgehog\" , \"Platypus\" ], datasets : [{ label : '# of Votes' , data : [ 12 , 19 , 3 , 5 , 2 , 3 ] }] }} options = {{ scales : { yAxes : [{ ticks : { beginAtZero : true } }] } }} />","title":"Accessibility"},{"location":"controls/ChartControl/#implementation","text":"","title":"Implementation"},{"location":"controls/ChartControl/#chartcontrol-properties","text":"The ChartControl can be configured with the following properties: Property Type Required Description accessibility IChartAccessibility no Optional property to specify the accessibility options. className string no Optional property to specify a custom class that allows you to change the chart's styles. data ChartData no The data you wish to display. datapromise Promise no The promise to load data asynchronously. Use with loadingtemplate and rejectedtemplate loadingtemplate JSX.Element () => JSX.Element no The HTML to display while waiting to resolve the datapromise options ChartOptions no Optional property to set the chart's additional options. palette ChartPalette no Optional property to set the desired Office color paette plugins object[] no Optional property to set an array of objects implementing the IChartPlugin interface rejectedtemplate JSX.Element () => JSX.Element no The HTML to display if the datapromise promise returns an error. useTheme boolean no Optional property to set whether the ChartControl should attempt to use theme colors. Setting it to false will use the startard Chart.js colors and fonts. type ChartType or string yes The type of chart you wish to render. You can also use the string equivalent. onClick (event?: MouseEvent, activeElements?: Array<{}>) => void no Optional callback method that get called when a user clicks on the chart onHover (chart: Chart, event: MouseEvent, activeElements: Array<{}>) => void no Optional callback method that get called when a user hovers the chart onResize (chart: Chart, newSize: ChartSize) => void no Optional callback method that get called when the window containing the ChartXontrol resizes You can call the following methods to interact with the chart after it has been initialized: Method Type Description clear void Will clear the chart canvas. Used extensively internally between animation frames, but you might find it useful. getCanvas () => HTMLCanvasElement Return the canvass element that contains the chart getChart () => Chart Returns the Chart.js instance getDatasetAtEvent (e: MouseEvent) => Array<{}> Looks for the element under the event point, then returns all elements from that dataset. This is used internally for 'dataset' mode highlighting getElementAtEvent (e: MouseEvent) => {} Calling getElementAtEvent(event) passing an argument of an event will return the single element at the event position. For example, you can use with onClick event handlers. getElementsAtEvent (e: MouseEvent) => Array<{}> Looks for the element under the event point, then returns all elements at the same data index. This is used internally for 'label' mode highlighting. Calling getElementsAtEvent(event) passing an argument of an event will return the point elements that are at that the same position of that event. renderChart (config: {}) => void Triggers a redraw of all chart elements. Note, this does not update elements for new data. Use .update() in that case. stop void Use this to stop any current animation loop. This will pause the chart during any current animation frame. toBase64Image () => string Returns a base 64 encoded string of the chart in it's current state. update (config?: number | boolean | string) => void Triggers an update of the chart. This can be safely called after updating the data object. This will update all scales, legends, and then re-render the chart.","title":"ChartControl Properties"},{"location":"controls/ChartControl/#charttype","text":"Defines the type of chart that will be rendered. For more information what data structure is required for each type of chart, review the Chart.js documentation ( links below ). Name Chart.js Equivalent Description Bar bar Vertical bar chart Bubble bubble Bubble chart Doughnut doughnut Doughnut chart HorizontalBar horizontalBar Horizontal bar chart Line line Line chart Pie pie Pie chart PolarArea polarArea Polar area chart Radar radar Radar chart Scatter scatter Scatter graph","title":"ChartType"},{"location":"controls/ChartControl/#ichartaccessibility","text":"The IChartAccessibility interface implements the following properties: Property Type Required Description alternateText string no Optional property to provide an accessible alternate text for the chart. We recommend that you use this property with summary className string no Optional property to specify a custom CSS class for the accessible table. caption string no Optional property to provide a caption for the accessible table. enable boolean no Optional property to turn on or off the rendering of the accessible table. summary string no Optional property to specify the chart's summary. We recommend that you use this property with alternateText onRenderTable () => JSX.Element no Options callback method that allows you to override the accessible table.","title":"IChartAccessibility"},{"location":"controls/ChartControl/#chartpalette","text":"Defines one of the possible Office color palette to use in a chart. The color palettes are the same that you find within Office. Name Office Name Description Example OfficeColorful1 Office Colorful Palette 1 Blue, Orange, Grey, Gold, Blue, Green OfficeColorful2 Office Colorful Palette 2 Blue, Grey, Blue, Dark Blue, Dark Grey, Dark Blue OfficeColorful3 Office Colorful Palette 3 Orange, Gold, Green, Brown, Dark Yellow, Dark Green OfficeColorful4 Office Colorful Palette 4 Green, Blue, Gold, Dark Green, Dark Blue, Dark Yellow OfficeMonochromatic1 Monochromatic Palette 1 Blue gradient, dark to light OfficeMonochromatic2 Monochromatic Palette 2 Orange gradient, dark to light OfficeMonochromatic3 Monochromatic Palette 3 Grey gradient, dark to light OfficeMonochromatic4 Monochromatic Palette 4 Gold gradient, dark to light OfficeMonochromatic5 Monochromatic Palette 5 Blue gradient, dark to light OfficeMonochromatic6 Monochromatic Palette 6 Green gradient, dark to light OfficeMonochromatic7 Monochromatic Palette 7 Dark Grey, Light Grey, Grey, Dark Grey, Light Grey, Grey OfficeMonochromatic8 Monochromatic Palette 8 Blue gradient, light to dark OfficeMonochromatic9 Monochromatic Palette 9 Orange gradient, light to dark OfficeMonochromatic10 Monochromatic Palette 10 Grey gradient, light to dark OfficeMonochromatic11 Monochromatic Palette 11 Gold gradient, light to dark OfficeMonochromatic12 Monochromatic Palette 12 Blue gradient, light to dark OfficeMonochromatic13 Monochromatic Palette 13 Green gradient, light to dark","title":"ChartPalette"},{"location":"controls/ChartControl/#ichartplugin","text":"The easiest way to customize a chart is to use the plugin functionality provided by Chart.js . In order to use a plugin, simply pass an array of objects that implement the IChartPlugin interface to the plugins property of the ChartControl. If a hook is listed as cancellable, you can return false to cancel the event. Property Type Required Description afterDatasetsDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called after the datasets are drawn but after scales are drawn. afterDatasetUpdate (chartInstance: Chart, options?: {}) => void no Called after a dataset was updated. afterDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called after an animation frame was drawn. afterEvent (chartInstance: Chart, event: Event, options?: {}) => void no Called after an event occurs on the chart. afterInit (chartInstance: Chart, options?: {}) => void no Called after a chart initializes afterLayout (chartInstance: Chart, options?: {}) => void no Called after the chart layout was rendered. afterRender (chartInstance: Chart, options?: {}) => void no Called after a rander. afterTooltipDraw (chartInstance: Chart, tooltipData?: {}, options?: {}) => void no Called after drawing the tooltip . Note that this hook will not be called if the tooltip drawing has been previously cancelled. afterUpdate (chartInstance: Chart, options?: {}) => void no Called after a chart updates beforeDatasetsDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called before the datasets are drawn but after scales are drawn. Cancellable. beforeDatasetUpdate (chartInstance: Chart, options?: {}) => void no Called before a dataset is updated. Cancellable. beforeDraw (chartInstance: Chart, easing: string, options?: {}) => void no Called before an animation frame is drawn. beforeEvent (chartInstance: Chart, event: Event, options?: {}) => void no Called when an event occurs on the chart. Cancellable. beforeInit (chartInstance: Chart, options?: {}) => void no Called before a chart initializes beforeLayout (chartInstance: Chart, options?: {}) => void no Called before rendering the chart's layout. Cancellable. beforeRender (chartInstance: Chart, options?: {}) => void no Called at the start of a render. It is only called once, even if the animation will run for a number of frames. Use beforeDraw or afterDraw to do something on each animation frame. Cancellable. beforeTooltipDraw (chartInstance: Chart, tooltipData?: {}, options?: {}) => void no Called before drawing the tooltip . Cancellable. If it returns false , tooltip drawing is cancelled until another render is triggered. beforeUpdate (chartInstance: Chart, options?: {}) => void no Called before updating the chart. Cancellable. destroy (chartInstance: Chart) => void no Called when a chart is destroyed. resize (chartInstance: Chart, newChartSize: Chart.ChartSize, options?: {}) => void no Called when a chart resizes. Cancellable.","title":"IChartPlugin"},{"location":"controls/DateTimePicker/","text":"DateTimePicker control \u00b6 This control allows you to select dates from a calendar and optionally the time of day using dropdown controls. You can configure the control to use 12 or 24-hour clock. Here are some examples of the control: DateTime Picker 12-hour clock DateTime Picker 24-hour clock DateTime Picker Date Only DateTime Picker No Seconds DateTime Picker Dropdowns for Time Part How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component. The DateConvention and TimeConvention controls if the time of day controls are shown and the time format used (12 hours/24 hours). import { DateTimePicker , DateConvention , TimeConvention } from '@pnp/spfx-controls-react/lib/dateTimePicker' ; Use the DateTimePicker control in your code as follows, either as an uncontrolled or a controlled component: // Uncontrolled < DateTimePicker label = \"DateTime Picker - 12h\" dateConvention = { DateConvention . DateTime } timeConvention = { TimeConvention . Hours12 } /> // Controlled < DateTimePicker label = \"DateTime Picker - 24h\" dateConvention = { DateConvention . DateTime } timeConvention = { TimeConvention . Hours24 } value = { this . state . date } onChange = { this . handleChange } /> Implementation \u00b6 The DateTimePicker control can be configured with the following properties: Property Type Required Description label string no Property field label displayed on top. disabled boolean no Specifies if the control is disabled or not. formatDate function no Defines a formatDate function that can override the output value in Date picker. dateConvention DateConvention no Defines the date convention to use. The default is date and time. timeConvention TimeConvention no Defines the time convention to use. The default value is the 24-hour clock convention. firstDayOfWeek DayOfWeek no Specify the first day of the week for your locale. key string no A unique key that indicates the identity of this control onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. showGoToToday boolean no Controls whether the \"Go to today\" link should be shown or not isMonthPickerVisible boolean no Controls whether the month picker is shown beside the day picker or hidden. showMonthPickerAsOverlay boolean no Show month picker on top of date picker when visible. showWeekNumbers boolean no Controls whether the calendar should show the week number (weeks 1 to 53) before each week row strings IDatePickerStrings no Localized strings to use in the DateTimePicker value Date no Default value of the DatePicker, if any onChange function no Callback issued when date or time is changed showSeconds boolean no Specifies, if seconds dropdown should be shown, defaults to false. timeDisplayControlType TimeDisplayControlType no Specifies what type of control to use when rendering time part. showLabels boolean no Specifies if labels in front of date and time parts should be rendered. Enum TimeDisplayControlType Name Description Text Renders Time part as Masked Edit Dropdown Renders Time part as Dropdown Enum DateConvention Name Description DateTime Shows the date and time picker Date Shows only the date picker Enum TimeConvention Name Description Hours12 Specify the hours in 12-hours (AM / PM) time convention. Hours24 Specify the hours in 24-hours time convention. Interface IDateTimePickerStrings extends IDatePickerStrings Property Type Required Description dateLabel string no Label for the date selector. timeLabel string no Label for the time of day selector. timeSeparator string no Separator between time of day components (hours, minutes, seconds). amDesignator string no Used as AM designator when 12-hour clock is used. pmDesignator string no Used as PM designator when 12-hour clock is used.","title":"DateTimePicker"},{"location":"controls/DateTimePicker/#datetimepicker-control","text":"This control allows you to select dates from a calendar and optionally the time of day using dropdown controls. You can configure the control to use 12 or 24-hour clock. Here are some examples of the control: DateTime Picker 12-hour clock DateTime Picker 24-hour clock DateTime Picker Date Only DateTime Picker No Seconds DateTime Picker Dropdowns for Time Part","title":"DateTimePicker control"},{"location":"controls/DateTimePicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component. The DateConvention and TimeConvention controls if the time of day controls are shown and the time format used (12 hours/24 hours). import { DateTimePicker , DateConvention , TimeConvention } from '@pnp/spfx-controls-react/lib/dateTimePicker' ; Use the DateTimePicker control in your code as follows, either as an uncontrolled or a controlled component: // Uncontrolled < DateTimePicker label = \"DateTime Picker - 12h\" dateConvention = { DateConvention . DateTime } timeConvention = { TimeConvention . Hours12 } /> // Controlled < DateTimePicker label = \"DateTime Picker - 24h\" dateConvention = { DateConvention . DateTime } timeConvention = { TimeConvention . Hours24 } value = { this . state . date } onChange = { this . handleChange } />","title":"How to use this control in your solutions"},{"location":"controls/DateTimePicker/#implementation","text":"The DateTimePicker control can be configured with the following properties: Property Type Required Description label string no Property field label displayed on top. disabled boolean no Specifies if the control is disabled or not. formatDate function no Defines a formatDate function that can override the output value in Date picker. dateConvention DateConvention no Defines the date convention to use. The default is date and time. timeConvention TimeConvention no Defines the time convention to use. The default value is the 24-hour clock convention. firstDayOfWeek DayOfWeek no Specify the first day of the week for your locale. key string no A unique key that indicates the identity of this control onGetErrorMessage function no The method is used to get the validation error message and determine whether the input value is valid or not. See this documentation to learn how to use it. showGoToToday boolean no Controls whether the \"Go to today\" link should be shown or not isMonthPickerVisible boolean no Controls whether the month picker is shown beside the day picker or hidden. showMonthPickerAsOverlay boolean no Show month picker on top of date picker when visible. showWeekNumbers boolean no Controls whether the calendar should show the week number (weeks 1 to 53) before each week row strings IDatePickerStrings no Localized strings to use in the DateTimePicker value Date no Default value of the DatePicker, if any onChange function no Callback issued when date or time is changed showSeconds boolean no Specifies, if seconds dropdown should be shown, defaults to false. timeDisplayControlType TimeDisplayControlType no Specifies what type of control to use when rendering time part. showLabels boolean no Specifies if labels in front of date and time parts should be rendered. Enum TimeDisplayControlType Name Description Text Renders Time part as Masked Edit Dropdown Renders Time part as Dropdown Enum DateConvention Name Description DateTime Shows the date and time picker Date Shows only the date picker Enum TimeConvention Name Description Hours12 Specify the hours in 12-hours (AM / PM) time convention. Hours24 Specify the hours in 24-hours time convention. Interface IDateTimePickerStrings extends IDatePickerStrings Property Type Required Description dateLabel string no Label for the date selector. timeLabel string no Label for the time of day selector. timeSeparator string no Separator between time of day components (hours, minutes, seconds). amDesignator string no Used as AM designator when 12-hour clock is used. pmDesignator string no Used as PM designator when 12-hour clock is used.","title":"Implementation"},{"location":"controls/FilePicker/","text":"FilePicker control \u00b6 File picker control allows to browse and select a file from various places. Currently supported locations - Recent files - tab allows to select a file from recently modified files based on the search results. - Web search - tab uses Bing cognitive services to look for a file. (Only images) - OneDrive - tab allows to select a file from the user's One Drive. - Site document libraries - tab allows to select a file from the existing site document libraries. - Upload - tab allows to upload a file from local drive. - From a link - tab allows to paste a link to the document. Overview \u00b6 The control supports all types of file, however it also allows to specify list of extensions for the files that are going to be looked displayed. Currently, only single file selection is supported. Different display types \u00b6 File picker support 3 types of views : List, Compact list and Tiles. In case Tiles view is selected, the control shows the thumbnail of the file. Breadcrumb support \u00b6 The control displays breadcrumb navigation that allows to easily switch folders or document libraries. Paged data load \u00b6 File picker doesn't load all the files that exist in the folder. Instead, it allows to specify how many results are loaded in a batch, and executes paged requests when new data is required. How to use this control \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following module to your component: import { FilePicker , IFilePickerResult } from '@pnp/spfx-controls-react/lib/FilePicker' ; Use the FilePicker control in your code as follows: < FilePicker bingAPIKey = \"<BING API KEY>\" accepts = \".gif,.jpg,.jpeg,.bmp,.dib,.tif,.tiff,.ico,.png,.jxr,.svg\" buttonIcon = \"FileImage\" onSave = {( filePickerResult : IFilePickerResult ) => { this . setState ({ filePickerResult }) }} onChanged = {( filePickerResult : IFilePickerResult ) => { this . setState ({ filePickerResult }) }} context = { this . props . context } /> Implementation \u00b6 The FilePicker component can be configured with the following properties: Property Type Required Description label string no Specifies the text describing the file picker. buttonLabel string no Specifies the label of the file picker button. buttonIcon string no In case it is provided the file picker will be rendered as an action button. onSave (filePickerResult: IFilePickerResult) => void yes Handler when the file has been selected and picker has been closed. onChange (filePickerResult: IFilePickerResult) => void no Handler when the file selection has been changed. context ApplicationCustomizerContext WebPartContext yes accepts string[] no Array of strings containing allowed files extensions. E.g. [\".gif\", \".jpg\", \".jpeg\", \".bmp\", \".dib\", \".tif\", \".tiff\", \".ico\", \".png\", \".jxr\", \".svg\"] required boolean no Sets the label to inform that the value is required. bingAPIKey string no Used to execute WebSearch. If not provided SearchTab will not be available. disabled boolean no Specifies if the picker button is disabled itemsCountQueryLimit number no Number of items to obtain when executing REST queries. Default 100. hideRecentTab boolean no Specifies if RecentTab should be hidden. hideWebSearchTab boolean no Specifies if WebSearchTab should be hidden. hideOrganisationalAssetTab boolean no Specifies if OrganisationalAssetTab should be hidden. hideOneDriveTab boolean no Specifies if OneDriveTab should be hidden. hideSiteFilesTab boolean no Specifies if SiteFilesTab should be hidden. hideLocalUploadTab boolean no Specifies if LocalUploadTab should be hidden. hideLinkUploadTab boolean no Specifies if LinkUploadTab should be hidden. interface IFilePickerResult Provides options for carousel buttons location. | Value | Type | Description | | ---- | ---- | | fileName | string | File namr of the result with the extension. | | fileNameWithoutExtension | string | File name of the result without the extension. | | fileAbsoluteUrl | string | Absolute URL of the file. Null in case of file upload. | | downloadFileContent | () => Promise | Function allows to download file content. Returns File object. |","title":"FilePicker"},{"location":"controls/FilePicker/#filepicker-control","text":"File picker control allows to browse and select a file from various places. Currently supported locations - Recent files - tab allows to select a file from recently modified files based on the search results. - Web search - tab uses Bing cognitive services to look for a file. (Only images) - OneDrive - tab allows to select a file from the user's One Drive. - Site document libraries - tab allows to select a file from the existing site document libraries. - Upload - tab allows to upload a file from local drive. - From a link - tab allows to paste a link to the document.","title":"FilePicker control"},{"location":"controls/FilePicker/#overview","text":"The control supports all types of file, however it also allows to specify list of extensions for the files that are going to be looked displayed. Currently, only single file selection is supported.","title":"Overview"},{"location":"controls/FilePicker/#different-display-types","text":"File picker support 3 types of views : List, Compact list and Tiles. In case Tiles view is selected, the control shows the thumbnail of the file.","title":"Different display types"},{"location":"controls/FilePicker/#breadcrumb-support","text":"The control displays breadcrumb navigation that allows to easily switch folders or document libraries.","title":"Breadcrumb support"},{"location":"controls/FilePicker/#paged-data-load","text":"File picker doesn't load all the files that exist in the folder. Instead, it allows to specify how many results are loaded in a batch, and executes paged requests when new data is required.","title":"Paged data load"},{"location":"controls/FilePicker/#how-to-use-this-control","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following module to your component: import { FilePicker , IFilePickerResult } from '@pnp/spfx-controls-react/lib/FilePicker' ; Use the FilePicker control in your code as follows: < FilePicker bingAPIKey = \"<BING API KEY>\" accepts = \".gif,.jpg,.jpeg,.bmp,.dib,.tif,.tiff,.ico,.png,.jxr,.svg\" buttonIcon = \"FileImage\" onSave = {( filePickerResult : IFilePickerResult ) => { this . setState ({ filePickerResult }) }} onChanged = {( filePickerResult : IFilePickerResult ) => { this . setState ({ filePickerResult }) }} context = { this . props . context } />","title":"How to use this control"},{"location":"controls/FilePicker/#implementation","text":"The FilePicker component can be configured with the following properties: Property Type Required Description label string no Specifies the text describing the file picker. buttonLabel string no Specifies the label of the file picker button. buttonIcon string no In case it is provided the file picker will be rendered as an action button. onSave (filePickerResult: IFilePickerResult) => void yes Handler when the file has been selected and picker has been closed. onChange (filePickerResult: IFilePickerResult) => void no Handler when the file selection has been changed. context ApplicationCustomizerContext WebPartContext yes accepts string[] no Array of strings containing allowed files extensions. E.g. [\".gif\", \".jpg\", \".jpeg\", \".bmp\", \".dib\", \".tif\", \".tiff\", \".ico\", \".png\", \".jxr\", \".svg\"] required boolean no Sets the label to inform that the value is required. bingAPIKey string no Used to execute WebSearch. If not provided SearchTab will not be available. disabled boolean no Specifies if the picker button is disabled itemsCountQueryLimit number no Number of items to obtain when executing REST queries. Default 100. hideRecentTab boolean no Specifies if RecentTab should be hidden. hideWebSearchTab boolean no Specifies if WebSearchTab should be hidden. hideOrganisationalAssetTab boolean no Specifies if OrganisationalAssetTab should be hidden. hideOneDriveTab boolean no Specifies if OneDriveTab should be hidden. hideSiteFilesTab boolean no Specifies if SiteFilesTab should be hidden. hideLocalUploadTab boolean no Specifies if LocalUploadTab should be hidden. hideLinkUploadTab boolean no Specifies if LinkUploadTab should be hidden. interface IFilePickerResult Provides options for carousel buttons location. | Value | Type | Description | | ---- | ---- | | fileName | string | File namr of the result with the extension. | | fileNameWithoutExtension | string | File name of the result without the extension. | | fileAbsoluteUrl | string | Absolute URL of the file. Null in case of file upload. | | downloadFileContent | () => Promise | Function allows to download file content. Returns File object. |","title":"Implementation"},{"location":"controls/FileTypeIcon/","text":"FileTypeIcon control \u00b6 This control returns the file type icon based on a specified file path or application. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FileTypeIcon , ApplicationType , IconType , ImageSize } from \"@pnp/spfx-controls-react/lib/FileTypeIcon\" ; Use the FileTypeIcon control in your code as follows: /* Showing the icons font */ < FileTypeIcon type = { IconType . font } application = { ApplicationType . Word } /> < FileTypeIcon type = { IconType . font } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . font } path = \"https://contoso.sharepoint.com/documents/filename.docx\" /> < FileTypeIcon type = { IconType . font } path = \"https://contoso.sharepoint.com/documents/filename.xslx\" /> /* Showing the icon image */ < FileTypeIcon type = { IconType . image } application = { ApplicationType . Word } /> < FileTypeIcon type = { IconType . image } path = \"https://contoso.sharepoint.com/documents/filename.docx\" /> /* Icon image allows three different sizes */ < FileTypeIcon type = { IconType . image } size = { ImageSize . small } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . image } size = { ImageSize . medium } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . image } size = { ImageSize . large } application = { ApplicationType . Excel } /> Implementation \u00b6 The FileTypeIcon component can be configured with the following properties: Property Type Required Description application ApplicationType no Type of the application for which you want to show the icon. Use the ApplicationType enum to get the list of available applications. path string no Path to the document. If this is provided, the control will use the file extension to display the corresponding icon. size ImageSize no This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the ImageSize enum to get the list of available images sizes. type IconType yes This property specifies is you want to use the icon font or image. Use the IconType enum to get the list of available icon types.","title":"FileTypeIcon"},{"location":"controls/FileTypeIcon/#filetypeicon-control","text":"This control returns the file type icon based on a specified file path or application.","title":"FileTypeIcon control"},{"location":"controls/FileTypeIcon/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FileTypeIcon , ApplicationType , IconType , ImageSize } from \"@pnp/spfx-controls-react/lib/FileTypeIcon\" ; Use the FileTypeIcon control in your code as follows: /* Showing the icons font */ < FileTypeIcon type = { IconType . font } application = { ApplicationType . Word } /> < FileTypeIcon type = { IconType . font } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . font } path = \"https://contoso.sharepoint.com/documents/filename.docx\" /> < FileTypeIcon type = { IconType . font } path = \"https://contoso.sharepoint.com/documents/filename.xslx\" /> /* Showing the icon image */ < FileTypeIcon type = { IconType . image } application = { ApplicationType . Word } /> < FileTypeIcon type = { IconType . image } path = \"https://contoso.sharepoint.com/documents/filename.docx\" /> /* Icon image allows three different sizes */ < FileTypeIcon type = { IconType . image } size = { ImageSize . small } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . image } size = { ImageSize . medium } application = { ApplicationType . Excel } /> < FileTypeIcon type = { IconType . image } size = { ImageSize . large } application = { ApplicationType . Excel } />","title":"How to use this control in your solutions"},{"location":"controls/FileTypeIcon/#implementation","text":"The FileTypeIcon component can be configured with the following properties: Property Type Required Description application ApplicationType no Type of the application for which you want to show the icon. Use the ApplicationType enum to get the list of available applications. path string no Path to the document. If this is provided, the control will use the file extension to display the corresponding icon. size ImageSize no This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the ImageSize enum to get the list of available images sizes. type IconType yes This property specifies is you want to use the icon font or image. Use the IconType enum to get the list of available icon types.","title":"Implementation"},{"location":"controls/GridLayout/","text":"Grid Layout control \u00b6 This control renders a responsive grid layout for your web parts. The grid layout behaves according to the SharePoint web part layouts design pattern . The grid layout will automatically reflow grid items according to the space available for the control. On mobile devices and 1/3 column layouts, it will render a compact layout. Although it is best used with the Fabric UI DocumentCard control , it will render any rectangular content you wish to display. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { GridLayout } from \"@pnp/spfx-controls-react/lib/GridLayout\" ; Retrieve the items you wish to display in your grid control. For example, you can place them in your component's state : // This sample places loads items in the constructor. You may wish to load // your items in the componentDidUpdate constructor ( props : IMyWebPartProps ) { super ( props ); this . state = { items : [{ thumbnail : \"https://pixabay.com/get/57e9dd474952a414f1dc8460825668204022dfe05555754d742e7bd6/hot-air-balloons-1984308_640.jpg\" , title : \"Adventures in SPFx\" , name : \"Perry Losselyong\" , profileImageSrc : \"https://robohash.org/blanditiisadlabore.png?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"3/13/2019\" }, { thumbnail : \"https://pixabay.com/get/55e8d5474a52ad14f1dc8460825668204022dfe05555754d742d79d0/autumn-3804001_640.jpg\" , title : \"The Wild, Untold Story of SharePoint!\" , name : \"Ebonee Gallyhaock\" , profileImageSrc : \"https://robohash.org/delectusetcorporis.bmp?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"6/29/2019\" }, { thumbnail : \"https://pixabay.com/get/57e8dd454c50ac14f1dc8460825668204022dfe05555754d742c72d7/log-cabin-1886620_640.jpg\" , title : \"Low Code Solutions: PowerApps\" , name : \"Seward Keith\" , profileImageSrc : \"https://robohash.org/asperioresautquasi.jpg?size=50x50&set=set1\" , location : \"PowerApps\" , activity : \"12/31/2018\" }, { thumbnail : \"https://pixabay.com/get/55e3d445495aa514f1dc8460825668204022dfe05555754d742b7dd5/portrait-3316389_640.jpg\" , title : \"Not Your Grandpa's SharePoint\" , name : \"Sharona Selkirk\" , profileImageSrc : \"https://robohash.org/velnammolestiae.png?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"11/20/2018\" }, { thumbnail : \"https://pixabay.com/get/57e6dd474352ae14f1dc8460825668204022dfe05555754d742a7ed1/faucet-1684902_640.jpg\" , title : \"Get with the Flow\" , name : \"Boyce Batstone\" , profileImageSrc : \"https://robohash.org/nulladistinctiomollitia.jpg?size=50x50&set=set1\" , location : \"Flow\" , activity : \"5/26/2019\" }] }; } Because you will implement the method to render each item in your web part, your items can be anything you'd like. Our sample data defines a thumbnail , title , name , profileImageSrc , location and activity to coincide with the Fabric UI DocumentCard elements, but you can use any properties you need. In the component that will call the GridLayout control, create callback function to render every item in the grid. You can return any rectangular element you want. For example, this code uses the Fabric UI DocumentCard control. import { DocumentCard , DocumentCardActivity , DocumentCardPreview , DocumentCardDetails , DocumentCardTitle , IDocumentCardPreviewProps , DocumentCardLocation , DocumentCardType } from 'office-ui-fabric-react/lib/DocumentCard' ; import { ImageFit } from 'office-ui-fabric-react/lib/Image' ; import { ISize } from 'office-ui-fabric-react/lib/Utilities' ; ... private _onRenderGridItem = ( item : any , finalSize : ISize , isCompact : boolean ) : JSX . Element => { const previewProps : IDocumentCardPreviewProps = { previewImages : [ { previewImageSrc : item.thumbnail , imageFit : ImageFit.cover , height : 130 } ] }; return < div data - is - focusable = { true } role = \"listitem\" aria - label = { item . title } > < DocumentCard type = { isCompact ? DocumentCardType.compact : DocumentCardType.normal } onClick = {( ev : React.SyntheticEvent < HTMLElement > ) => alert ( \"You clicked on a grid item\" )} > < DocumentCardPreview {... previewProps } /> { ! isCompact && < DocumentCardLocation location = { item . location } /> } < DocumentCardDetails > < DocumentCardTitle title = { item . title } shouldTruncate = { true } /> < DocumentCardActivity activity = { item . activity } people = {[{ name : item.name , profileImageSrc : item.profileImageSrc }]} /> < /DocumentCardDetails> < /DocumentCard> < /div>; } Note that the sample code above uses the isCompact parameter to remove DocumentCard elements and to render a compact layout. You may choose to ignore the isCompact parameter if you do not wish to handle compact layouts. Use the GridLayout control in your code as follows: < GridLayout ariaLabel = \"List of content, use right and left arrow keys to navigate, arrow down to access details.\" items = { this . state . items } onRenderGridItem = {( item : any , finalSize : ISize , isCompact : boolean ) => this . _onRenderGridItem ( item , finalSize , isCompact )} /> Implementation \u00b6 The grid layout control can be configured with the following properties: Property Type Required Description ariaLabel string no The accessible text you wish to display for the grid control. We recommend that you use \"List of content, use right and left arrow keys to navigate, arrow down to access details.\" . items any[] yes The array of items you wish to display. listProps IListProps no Provides additional list properties to customize the underlaying list. onRenderGridItem function yes onRenderGridItem handler for the grid layout. Use this handler to specify how you wish to render each grid item","title":"GridLayout"},{"location":"controls/GridLayout/#grid-layout-control","text":"This control renders a responsive grid layout for your web parts. The grid layout behaves according to the SharePoint web part layouts design pattern . The grid layout will automatically reflow grid items according to the space available for the control. On mobile devices and 1/3 column layouts, it will render a compact layout. Although it is best used with the Fabric UI DocumentCard control , it will render any rectangular content you wish to display.","title":"Grid Layout control"},{"location":"controls/GridLayout/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { GridLayout } from \"@pnp/spfx-controls-react/lib/GridLayout\" ; Retrieve the items you wish to display in your grid control. For example, you can place them in your component's state : // This sample places loads items in the constructor. You may wish to load // your items in the componentDidUpdate constructor ( props : IMyWebPartProps ) { super ( props ); this . state = { items : [{ thumbnail : \"https://pixabay.com/get/57e9dd474952a414f1dc8460825668204022dfe05555754d742e7bd6/hot-air-balloons-1984308_640.jpg\" , title : \"Adventures in SPFx\" , name : \"Perry Losselyong\" , profileImageSrc : \"https://robohash.org/blanditiisadlabore.png?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"3/13/2019\" }, { thumbnail : \"https://pixabay.com/get/55e8d5474a52ad14f1dc8460825668204022dfe05555754d742d79d0/autumn-3804001_640.jpg\" , title : \"The Wild, Untold Story of SharePoint!\" , name : \"Ebonee Gallyhaock\" , profileImageSrc : \"https://robohash.org/delectusetcorporis.bmp?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"6/29/2019\" }, { thumbnail : \"https://pixabay.com/get/57e8dd454c50ac14f1dc8460825668204022dfe05555754d742c72d7/log-cabin-1886620_640.jpg\" , title : \"Low Code Solutions: PowerApps\" , name : \"Seward Keith\" , profileImageSrc : \"https://robohash.org/asperioresautquasi.jpg?size=50x50&set=set1\" , location : \"PowerApps\" , activity : \"12/31/2018\" }, { thumbnail : \"https://pixabay.com/get/55e3d445495aa514f1dc8460825668204022dfe05555754d742b7dd5/portrait-3316389_640.jpg\" , title : \"Not Your Grandpa's SharePoint\" , name : \"Sharona Selkirk\" , profileImageSrc : \"https://robohash.org/velnammolestiae.png?size=50x50&set=set1\" , location : \"SharePoint\" , activity : \"11/20/2018\" }, { thumbnail : \"https://pixabay.com/get/57e6dd474352ae14f1dc8460825668204022dfe05555754d742a7ed1/faucet-1684902_640.jpg\" , title : \"Get with the Flow\" , name : \"Boyce Batstone\" , profileImageSrc : \"https://robohash.org/nulladistinctiomollitia.jpg?size=50x50&set=set1\" , location : \"Flow\" , activity : \"5/26/2019\" }] }; } Because you will implement the method to render each item in your web part, your items can be anything you'd like. Our sample data defines a thumbnail , title , name , profileImageSrc , location and activity to coincide with the Fabric UI DocumentCard elements, but you can use any properties you need. In the component that will call the GridLayout control, create callback function to render every item in the grid. You can return any rectangular element you want. For example, this code uses the Fabric UI DocumentCard control. import { DocumentCard , DocumentCardActivity , DocumentCardPreview , DocumentCardDetails , DocumentCardTitle , IDocumentCardPreviewProps , DocumentCardLocation , DocumentCardType } from 'office-ui-fabric-react/lib/DocumentCard' ; import { ImageFit } from 'office-ui-fabric-react/lib/Image' ; import { ISize } from 'office-ui-fabric-react/lib/Utilities' ; ... private _onRenderGridItem = ( item : any , finalSize : ISize , isCompact : boolean ) : JSX . Element => { const previewProps : IDocumentCardPreviewProps = { previewImages : [ { previewImageSrc : item.thumbnail , imageFit : ImageFit.cover , height : 130 } ] }; return < div data - is - focusable = { true } role = \"listitem\" aria - label = { item . title } > < DocumentCard type = { isCompact ? DocumentCardType.compact : DocumentCardType.normal } onClick = {( ev : React.SyntheticEvent < HTMLElement > ) => alert ( \"You clicked on a grid item\" )} > < DocumentCardPreview {... previewProps } /> { ! isCompact && < DocumentCardLocation location = { item . location } /> } < DocumentCardDetails > < DocumentCardTitle title = { item . title } shouldTruncate = { true } /> < DocumentCardActivity activity = { item . activity } people = {[{ name : item.name , profileImageSrc : item.profileImageSrc }]} /> < /DocumentCardDetails> < /DocumentCard> < /div>; } Note that the sample code above uses the isCompact parameter to remove DocumentCard elements and to render a compact layout. You may choose to ignore the isCompact parameter if you do not wish to handle compact layouts. Use the GridLayout control in your code as follows: < GridLayout ariaLabel = \"List of content, use right and left arrow keys to navigate, arrow down to access details.\" items = { this . state . items } onRenderGridItem = {( item : any , finalSize : ISize , isCompact : boolean ) => this . _onRenderGridItem ( item , finalSize , isCompact )} />","title":"How to use this control in your solutions"},{"location":"controls/GridLayout/#implementation","text":"The grid layout control can be configured with the following properties: Property Type Required Description ariaLabel string no The accessible text you wish to display for the grid control. We recommend that you use \"List of content, use right and left arrow keys to navigate, arrow down to access details.\" . items any[] yes The array of items you wish to display. listProps IListProps no Provides additional list properties to customize the underlaying list. onRenderGridItem function yes onRenderGridItem handler for the grid layout. Use this handler to specify how you wish to render each grid item","title":"Implementation"},{"location":"controls/IFrameDialog/","text":"IFrameDialog control \u00b6 This control renders a Dialog with an iframe as content. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFrameDialog } from \"@pnp/spfx-controls-react/lib/IFrameDialog\" ; Use the IFrameDialog control in your code as follows ( this._onIframeLoaded and this._onDialogDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively): < IFrameDialog url = { this . state . lookupDispFormUrl } iframeOnLoad = { this . _onIframeLoaded . bind ( this )} hidden = { this . state . hideDialog } onDismiss = { this . _onDialogDismiss . bind ( this )} modalProps = {{ isBlocking : true , containerClassName : styles.dialogContainer }} dialogContentProps = {{ type : DialogType.close , showCloseButton : true }} width = { '570px' } height = { '315px' } /> Implementation \u00b6 The IFrameDialog component can be configured with the following properties: Property Type Required Description dialogContentProps IDialogContentProps no Props to be passed through to Dialog Content. hidden boolean no Whether the dialog is hidden. modalProps IModalProps no Props to be passed through to Modal. onDismiss (ev?: React.MouseEvent ) => any no A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal. url string yes iframe Url iframeOnload iframeOnLoad?: (iframe: any) => {} no iframe's onload event handler width string yes iframe's width heigth string yes iframe's height allowFullScreen boolean no Specifies if iframe content can be displayed in a full screen allowTransparency boolean no Specifies if transparency is allowed in iframe marginHeight number no Specifies the top and bottom margins of the content of an iframe marginWidth number no Specifies the left and right margins of the content of an iframe name string no Specifies the name of an iframe sandbox string no Enables an extra set of restrictions for the content in an iframe scrolling string no Specifies whether or not to display scrollbars in an iframe seamless string no When present, it specifies that the iframe should look like it is a part of the containing document (no borders or scrollbars)","title":"IFrameDialog"},{"location":"controls/IFrameDialog/#iframedialog-control","text":"This control renders a Dialog with an iframe as content. Here is an example of the control in action:","title":"IFrameDialog control"},{"location":"controls/IFrameDialog/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFrameDialog } from \"@pnp/spfx-controls-react/lib/IFrameDialog\" ; Use the IFrameDialog control in your code as follows ( this._onIframeLoaded and this._onDialogDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively): < IFrameDialog url = { this . state . lookupDispFormUrl } iframeOnLoad = { this . _onIframeLoaded . bind ( this )} hidden = { this . state . hideDialog } onDismiss = { this . _onDialogDismiss . bind ( this )} modalProps = {{ isBlocking : true , containerClassName : styles.dialogContainer }} dialogContentProps = {{ type : DialogType.close , showCloseButton : true }} width = { '570px' } height = { '315px' } />","title":"How to use this control in your solutions"},{"location":"controls/IFrameDialog/#implementation","text":"The IFrameDialog component can be configured with the following properties: Property Type Required Description dialogContentProps IDialogContentProps no Props to be passed through to Dialog Content. hidden boolean no Whether the dialog is hidden. modalProps IModalProps no Props to be passed through to Modal. onDismiss (ev?: React.MouseEvent ) => any no A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal. url string yes iframe Url iframeOnload iframeOnLoad?: (iframe: any) => {} no iframe's onload event handler width string yes iframe's width heigth string yes iframe's height allowFullScreen boolean no Specifies if iframe content can be displayed in a full screen allowTransparency boolean no Specifies if transparency is allowed in iframe marginHeight number no Specifies the top and bottom margins of the content of an iframe marginWidth number no Specifies the left and right margins of the content of an iframe name string no Specifies the name of an iframe sandbox string no Enables an extra set of restrictions for the content in an iframe scrolling string no Specifies whether or not to display scrollbars in an iframe seamless string no When present, it specifies that the iframe should look like it is a part of the containing document (no borders or scrollbars)","title":"Implementation"},{"location":"controls/IFramePanel/","text":"IFramePanel control \u00b6 This control renders a Panel with an iframe as content. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFramePanel } from \"@pnp/spfx-controls-react/lib/IFramePanel\" ; The IFramePanel uses the Office Fabric UI implemenation of the panel . The properties of this control inherit the panel properties. Use the IFramePanel control in your code as follows ( this._onIframeLoaded and this._onDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively.) < IFramePanel url = { this . state . iFrameUrl } type = { PanelType . medium } headerText = \"Panel Title\" closeButtonAriaLabel = \"Close\" isOpen = { this . state . iFramePanelOpened } onDismiss = { this . _onDismiss . bind ( this )} iframeOnLoad = { this . _onIframeLoaded . bind ( this )} /> Implementation \u00b6 The IFramePanel component extends the properties from the Fabric UI IPanelProps along with the additional following properties: Property Type Required Description url string yes iframe Url heigth string yes iframe's height, if empty it will be dynamically set to the full height available in the panel's content area iframeOnload iframeOnLoad?: (iframe: any) => {} no iframe's onload event handler name string no Specifies the name of an iframe allowFullScreen boolean no Specifies if iframe content can be displayed in a full screen allowTransparency boolean no Specifies if transparency is allowed in iframe sandbox string no Enables an extra set of restrictions for the content in an iframe scrolling string no Specifies whether or not to display scrollbars in an iframe seamless string no When present, it specifies that the iframe should look like it is a part of the containing document (no borders or scrollbars)","title":"IFramePanel"},{"location":"controls/IFramePanel/#iframepanel-control","text":"This control renders a Panel with an iframe as content. Here is an example of the control in action:","title":"IFramePanel control"},{"location":"controls/IFramePanel/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFramePanel } from \"@pnp/spfx-controls-react/lib/IFramePanel\" ; The IFramePanel uses the Office Fabric UI implemenation of the panel . The properties of this control inherit the panel properties. Use the IFramePanel control in your code as follows ( this._onIframeLoaded and this._onDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively.) < IFramePanel url = { this . state . iFrameUrl } type = { PanelType . medium } headerText = \"Panel Title\" closeButtonAriaLabel = \"Close\" isOpen = { this . state . iFramePanelOpened } onDismiss = { this . _onDismiss . bind ( this )} iframeOnLoad = { this . _onIframeLoaded . bind ( this )} />","title":"How to use this control in your solutions"},{"location":"controls/IFramePanel/#implementation","text":"The IFramePanel component extends the properties from the Fabric UI IPanelProps along with the additional following properties: Property Type Required Description url string yes iframe Url heigth string yes iframe's height, if empty it will be dynamically set to the full height available in the panel's content area iframeOnload iframeOnLoad?: (iframe: any) => {} no iframe's onload event handler name string no Specifies the name of an iframe allowFullScreen boolean no Specifies if iframe content can be displayed in a full screen allowTransparency boolean no Specifies if transparency is allowed in iframe sandbox string no Enables an extra set of restrictions for the content in an iframe scrolling string no Specifies whether or not to display scrollbars in an iframe seamless string no When present, it specifies that the iframe should look like it is a part of the containing document (no borders or scrollbars)","title":"Implementation"},{"location":"controls/ListItemAttachments/","text":"ListItemAttachments control \u00b6 This control allows you to manage list item attachments, you can add or delete associated attachments. The attachments are listed in tile view. Here is an example of the control: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListItemAttachments } from '@pnp/spfx-controls-react/lib/ListItemAttachments' ; Use the ListItemAttachments control in your code as follows: < ListItemAttachments listId = 'dfa283f4-5faf-4d54-b6b8-5bcaf2725af5' itemId = { 1 } context = { this . props . context } disabled = { false } /> Implementation \u00b6 The ListItemAttachments control can be configured with the following properties: Property Type Required Description context WebPartContext | ApplicationCustomizerContext yes SPFx web part or extention context itemId number yes List Item Id listId string yes Guid of the list. webUrl string no URL of the site. By default it uses the current site URL. disabled boolean no Specifies if the control is disabled or not.","title":"ListItemAttachments"},{"location":"controls/ListItemAttachments/#listitemattachments-control","text":"This control allows you to manage list item attachments, you can add or delete associated attachments. The attachments are listed in tile view. Here is an example of the control:","title":"ListItemAttachments control"},{"location":"controls/ListItemAttachments/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListItemAttachments } from '@pnp/spfx-controls-react/lib/ListItemAttachments' ; Use the ListItemAttachments control in your code as follows: < ListItemAttachments listId = 'dfa283f4-5faf-4d54-b6b8-5bcaf2725af5' itemId = { 1 } context = { this . props . context } disabled = { false } />","title":"How to use this control in your solutions"},{"location":"controls/ListItemAttachments/#implementation","text":"The ListItemAttachments control can be configured with the following properties: Property Type Required Description context WebPartContext | ApplicationCustomizerContext yes SPFx web part or extention context itemId number yes List Item Id listId string yes Guid of the list. webUrl string no URL of the site. By default it uses the current site URL. disabled boolean no Specifies if the control is disabled or not.","title":"Implementation"},{"location":"controls/ListItemPicker/","text":"ListItemPicker control \u00b6 This control allows you to select one or more items from a list. The item selection is based from a column value. The control will suggest items based on the inserted value. Here is an example of the control: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListItemPicker } from '@pnp/spfx-controls-react/lib/listItemPicker' ; Use the ListItemPicker control in your code as follows: < ListItemPicker listId = 'da8daf15-d84f-4ab1-9800-7568f82fed3f' columnInternalName = 'Title' valueColumnInternalName = 'Id' itemLimit = { 2 } onSelectedItem = { this . onSelectedItem } context = { this . props . context } /> The onSelectedItem change event returns the list items selected and can be implemented as follows: private onSelectedItem ( data : { key : string ; name : string }[]) { for ( const item of data ) { console . log ( `Item value: ${ item . key } ` ); console . log ( `Item text: ${ item . name } ` ); } } Implementation \u00b6 The ListItemPicker control can be configured with the following properties: Property Type Required Description columnInternalName string yes InternalName of column to search and get values. keyColumnInternalName string no InternalName of column to use as the key for the selection. Must be a column with unique values. Default: Id context WebPartContext | ApplicationCustomizerContext yes SPFx web part or extention context listId string yes Guid of the list. itemLimit number yes Number of items which can be selected onSelectItem (items: any[]) => void yes Callback function which returns the selected items. className string no ClassName for the picker. webUrl string no URL of the site. By default it uses the current site URL. defaultSelectedItems any[] no Initial items that have already been selected and should appear in the people picker. suggestionsHeaderText string no The text that should appear at the top of the suggestion box. noResultsFoundText string no The text that should appear when no results are returned. disabled boolean no Specifies if the control is disabled or not.","title":"ListItemPicker"},{"location":"controls/ListItemPicker/#listitempicker-control","text":"This control allows you to select one or more items from a list. The item selection is based from a column value. The control will suggest items based on the inserted value. Here is an example of the control:","title":"ListItemPicker control"},{"location":"controls/ListItemPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListItemPicker } from '@pnp/spfx-controls-react/lib/listItemPicker' ; Use the ListItemPicker control in your code as follows: < ListItemPicker listId = 'da8daf15-d84f-4ab1-9800-7568f82fed3f' columnInternalName = 'Title' valueColumnInternalName = 'Id' itemLimit = { 2 } onSelectedItem = { this . onSelectedItem } context = { this . props . context } /> The onSelectedItem change event returns the list items selected and can be implemented as follows: private onSelectedItem ( data : { key : string ; name : string }[]) { for ( const item of data ) { console . log ( `Item value: ${ item . key } ` ); console . log ( `Item text: ${ item . name } ` ); } }","title":"How to use this control in your solutions"},{"location":"controls/ListItemPicker/#implementation","text":"The ListItemPicker control can be configured with the following properties: Property Type Required Description columnInternalName string yes InternalName of column to search and get values. keyColumnInternalName string no InternalName of column to use as the key for the selection. Must be a column with unique values. Default: Id context WebPartContext | ApplicationCustomizerContext yes SPFx web part or extention context listId string yes Guid of the list. itemLimit number yes Number of items which can be selected onSelectItem (items: any[]) => void yes Callback function which returns the selected items. className string no ClassName for the picker. webUrl string no URL of the site. By default it uses the current site URL. defaultSelectedItems any[] no Initial items that have already been selected and should appear in the people picker. suggestionsHeaderText string no The text that should appear at the top of the suggestion box. noResultsFoundText string no The text that should appear when no results are returned. disabled boolean no Specifies if the control is disabled or not.","title":"Implementation"},{"location":"controls/ListPicker/","text":"ListPicker control \u00b6 This control allows you to select one or multiple available lists/libraries of the current site. Here is an example of the control: ListPicker single selection mode: ListPicker multi-selection mode How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListPicker } from \"@pnp/spfx-controls-react/lib/ListPicker\" ; Use the ListPicker control in your code as follows: < ListPicker context = { this . props . context } label = \"Select your list(s)\" placeHolder = \"Select your list(s)\" baseTemplate = { 100 } includeHidden = { false } multiSelect = { false } onSelectionChanged = { this . onListPickerChange } /> The onSelectionChanged change event returns the list(s) and can be implemented as follows: private onListPickerChange ( lists : string | string []) { console . log ( \"Lists:\" , lists ); } Implementation \u00b6 The ListPicker control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes The context object of the SPFx loaded webpart or customizer. className string no If provided, additional class name to provide on the dropdown element. disabled boolean no Whether or not the control is disabled. baseTemplate number no The SharePoint BaseTemplate ID to filter the list options by. filter string no Filter list from OData query (takes precendents over Hidden and BaseTemplate Filters). includeHidden boolean no Whether or not to include hidden lists. Default is true . orderBy LibsOrderBy no How to order the lists retrieved from SharePoint. selectedList string OR string[] no Keys of the selected item(s). If you provide this, you must maintain selection state by observing onSelectionChanged events and passing a new value in when changed. multiSelect boolean no Optional mode indicates if multi-choice selections is allowed. Default to false . label string no Label to use for the control. placeholder string no Placeholder label to show in the dropdown. onSelectionChanged (newValue: string OR string[]): void no Callback function when the selected option changes. Enum LibsOrderBy Value Id Title","title":"ListPicker"},{"location":"controls/ListPicker/#listpicker-control","text":"This control allows you to select one or multiple available lists/libraries of the current site. Here is an example of the control: ListPicker single selection mode: ListPicker multi-selection mode","title":"ListPicker control"},{"location":"controls/ListPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListPicker } from \"@pnp/spfx-controls-react/lib/ListPicker\" ; Use the ListPicker control in your code as follows: < ListPicker context = { this . props . context } label = \"Select your list(s)\" placeHolder = \"Select your list(s)\" baseTemplate = { 100 } includeHidden = { false } multiSelect = { false } onSelectionChanged = { this . onListPickerChange } /> The onSelectionChanged change event returns the list(s) and can be implemented as follows: private onListPickerChange ( lists : string | string []) { console . log ( \"Lists:\" , lists ); }","title":"How to use this control in your solutions"},{"location":"controls/ListPicker/#implementation","text":"The ListPicker control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes The context object of the SPFx loaded webpart or customizer. className string no If provided, additional class name to provide on the dropdown element. disabled boolean no Whether or not the control is disabled. baseTemplate number no The SharePoint BaseTemplate ID to filter the list options by. filter string no Filter list from OData query (takes precendents over Hidden and BaseTemplate Filters). includeHidden boolean no Whether or not to include hidden lists. Default is true . orderBy LibsOrderBy no How to order the lists retrieved from SharePoint. selectedList string OR string[] no Keys of the selected item(s). If you provide this, you must maintain selection state by observing onSelectionChanged events and passing a new value in when changed. multiSelect boolean no Optional mode indicates if multi-choice selections is allowed. Default to false . label string no Label to use for the control. placeholder string no Placeholder label to show in the dropdown. onSelectionChanged (newValue: string OR string[]): void no Callback function when the selected option changes. Enum LibsOrderBy Value Id Title","title":"Implementation"},{"location":"controls/ListView.ContextualMenu/","text":"ListView: Add a contextual menu \u00b6 The ContextualMenu component \u00b6 In order to create a contextual menu for your list view, you first need to create a new component which will use a combination of an IconButton and ContextualMenu controls from the Office UI Fabric React. Here is some sample code: import * as React from 'react' ; import { Layer , IconButton , IButtonProps } from 'office-ui-fabric-react' ; import { ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu' ; // The following are project specific components import { IECBProps } from './IECBProps' ; import styles from './ECB.module.scss' ; import { IListitem } from '../../model/IListitem' ; export class ECB extends React . Component < IECBProps , {} > { public constructor ( props : IECBProps ) { super ( props ); this . state = { panelOpen : false }; } public render() { return ( < div className = { styles . ecb } > < IconButton id = 'ContextualMenuButton1' className = { styles . ecbbutton } text = '' width = '30' split = { false } iconProps = { { iconName : 'MoreVertical' } } menuIconProps = { { iconName : '' } } menuProps = {{ shouldFocusOnMount : true , items : [ { key : 'action1' , name : 'Action 1' , onClick : this.handleClick.bind ( this , this . props . item . Firstname + ' Action 1' ) }, { key : 'divider_1' , itemType : ContextualMenuItemType.Divider }, { key : 'action2' , name : 'Action 2' , onClick : this.handleClick.bind ( this , this . props . item . Firstname + ' Action 2' ) }, { key : 'action3' , name : 'Action 3' , onClick : this.handleClick.bind ( this , this . props . item . Lastname + ' Action 3' ) }, { key : 'disabled' , name : 'Disabled action' , disabled : true , onClick : () => console . error ( 'Disabled action should not be clickable.' ) } ] }} /> < /div> ); } private handleClick ( source : string , event ) { alert ( ` ${ source } clicked` ); } } The ListView column \u00b6 Once the ECB component is created, you can add the contextual menu to the ListView control. In order to do this, you have to insert another Viewfield in code at the position of our choice. For instance after the Lastname : { name : \"\" , sorting : false , maxWidth : 40 , render : ( rowitem : IListitem ) => { const element : React.ReactElement < IECBProps > = React . createElement ( ECB , { item : rowitem } ); return element ; } } Inside the render method of the IViewField , the ECB component gets created and the current item will be used as a reference for the clicked row. The result \u00b6 The result will look like the following: Once you click on an action, you will see the alert:","title":"ListView: add a contextual menu"},{"location":"controls/ListView.ContextualMenu/#listview-add-a-contextual-menu","text":"","title":"ListView: Add a contextual menu"},{"location":"controls/ListView.ContextualMenu/#the-contextualmenu-component","text":"In order to create a contextual menu for your list view, you first need to create a new component which will use a combination of an IconButton and ContextualMenu controls from the Office UI Fabric React. Here is some sample code: import * as React from 'react' ; import { Layer , IconButton , IButtonProps } from 'office-ui-fabric-react' ; import { ContextualMenuItemType } from 'office-ui-fabric-react/lib/ContextualMenu' ; // The following are project specific components import { IECBProps } from './IECBProps' ; import styles from './ECB.module.scss' ; import { IListitem } from '../../model/IListitem' ; export class ECB extends React . Component < IECBProps , {} > { public constructor ( props : IECBProps ) { super ( props ); this . state = { panelOpen : false }; } public render() { return ( < div className = { styles . ecb } > < IconButton id = 'ContextualMenuButton1' className = { styles . ecbbutton } text = '' width = '30' split = { false } iconProps = { { iconName : 'MoreVertical' } } menuIconProps = { { iconName : '' } } menuProps = {{ shouldFocusOnMount : true , items : [ { key : 'action1' , name : 'Action 1' , onClick : this.handleClick.bind ( this , this . props . item . Firstname + ' Action 1' ) }, { key : 'divider_1' , itemType : ContextualMenuItemType.Divider }, { key : 'action2' , name : 'Action 2' , onClick : this.handleClick.bind ( this , this . props . item . Firstname + ' Action 2' ) }, { key : 'action3' , name : 'Action 3' , onClick : this.handleClick.bind ( this , this . props . item . Lastname + ' Action 3' ) }, { key : 'disabled' , name : 'Disabled action' , disabled : true , onClick : () => console . error ( 'Disabled action should not be clickable.' ) } ] }} /> < /div> ); } private handleClick ( source : string , event ) { alert ( ` ${ source } clicked` ); } }","title":"The ContextualMenu component"},{"location":"controls/ListView.ContextualMenu/#the-listview-column","text":"Once the ECB component is created, you can add the contextual menu to the ListView control. In order to do this, you have to insert another Viewfield in code at the position of our choice. For instance after the Lastname : { name : \"\" , sorting : false , maxWidth : 40 , render : ( rowitem : IListitem ) => { const element : React.ReactElement < IECBProps > = React . createElement ( ECB , { item : rowitem } ); return element ; } } Inside the render method of the IViewField , the ECB component gets created and the current item will be used as a reference for the clicked row.","title":"The ListView column"},{"location":"controls/ListView.ContextualMenu/#the-result","text":"The result will look like the following: Once you click on an action, you will see the alert:","title":"The result"},{"location":"controls/ListView/","text":"ListView control \u00b6 This control renders a list view for the given set of items. List view control with grouping applied How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { ListView , IViewField , SelectionMode , GroupOrder , IGrouping } from \"@pnp/spfx-controls-react/lib/ListView\" ; Use the ListView control in your code as follows: < ListView items = { items } viewFields = { viewFields } iconFieldName = \"ServerRelativeUrl\" compact = { true } selectionMode = { SelectionMode . multiple } selection = { this . _getSelection } showFilter = { true } defaultFilter = \"John\" filterPlaceHolder = \"Search...\" groupByFields = { groupByFields } /> The control provides full text filtering through all the columns. If you want to exectue filtering on the specified columns, you can use syntax : <ColumndName> : <FilterValue> . Use ':' as a separator between column name and value. Control support both 'fieldName' and 'name' properties of IColumn interface. With the selection property you can define a method that which gets called when the user selects one or more items in the list view: private _getSelection ( items : any []) { console . log ( 'Selected items:' , items ); } With the groupByFields property you can define an array of field objects which will be used for grouping. Important : the same order of the fields defines how grouping will be applied. In the snippet the ListView control will first group by the Extension and after that by the Author field. const groupByFields : IGrouping [] = [ { name : \"Extension\" , order : GroupOrder.ascending }, { name : \"Author\" , order : GroupOrder.descending } ]; Extend ListView with a ContextualMenu To extend the ListView control with a ContextualMenu refer to ListView.ContextualMenu . Implementation \u00b6 The ListView control can be configured with the following properties: Property Type Required Description iconFieldName string no Specify the items' property name that defines the file URL path which will be used to show the file icon. This automatically creates a column and renders the file icon. items any[] yes Items to render in the list view. viewFields IViewField[] no The fields you want to render in the list view. Check the IViewField implementation to see which properties you can define. compact boolean no Boolean value to indicate if the control should render in compact mode. By default this is set to false . selectionMode SelectionMode no Specify if the items in the list view can be selected and how. Options are: none, single, multi. selection function no Selection event that passes the selected item(s) from the list view. groupByFields IGrouping[] no Defines the field on which you want to group the items in the list view. defaultSelection number[] no The index of the items to be select by default filterPlaceHolder string no Specify the placeholder for the filter text box. Default 'Search' showFilter boolean no Specify if the filter text box should be rendered. defaultFilter string no Specify the initial filter to be applied to the list. The IViewField has the following implementation: Property Type Required Description name string yes Name of the field. displayName string no Name that will be used as the column title. If not defined, the name property will be used. linkPropertyName string no Specify the field name that needs to be used to render a link for the current field. sorting boolean no Specify if you want to enable sorting for the current field. maxWidth number no Specify the minimum width of the column. maxWidth number no Specify the maximum width of the column. isResizable boolean no Determines if the column can be resized. render function no Override how the field has to get rendered. The IGrouping has the following implementation: Property Type Required Description name string yes Name of the field order GroupOrder yes Specify how the group needs to be ordered. enum GroupOrder Value Description ascending Order the group in ascending order. descending Order the group in descending order.","title":"ListView"},{"location":"controls/ListView/#listview-control","text":"This control renders a list view for the given set of items. List view control with grouping applied","title":"ListView control"},{"location":"controls/ListView/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { ListView , IViewField , SelectionMode , GroupOrder , IGrouping } from \"@pnp/spfx-controls-react/lib/ListView\" ; Use the ListView control in your code as follows: < ListView items = { items } viewFields = { viewFields } iconFieldName = \"ServerRelativeUrl\" compact = { true } selectionMode = { SelectionMode . multiple } selection = { this . _getSelection } showFilter = { true } defaultFilter = \"John\" filterPlaceHolder = \"Search...\" groupByFields = { groupByFields } /> The control provides full text filtering through all the columns. If you want to exectue filtering on the specified columns, you can use syntax : <ColumndName> : <FilterValue> . Use ':' as a separator between column name and value. Control support both 'fieldName' and 'name' properties of IColumn interface. With the selection property you can define a method that which gets called when the user selects one or more items in the list view: private _getSelection ( items : any []) { console . log ( 'Selected items:' , items ); } With the groupByFields property you can define an array of field objects which will be used for grouping. Important : the same order of the fields defines how grouping will be applied. In the snippet the ListView control will first group by the Extension and after that by the Author field. const groupByFields : IGrouping [] = [ { name : \"Extension\" , order : GroupOrder.ascending }, { name : \"Author\" , order : GroupOrder.descending } ]; Extend ListView with a ContextualMenu To extend the ListView control with a ContextualMenu refer to ListView.ContextualMenu .","title":"How to use this control in your solutions"},{"location":"controls/ListView/#implementation","text":"The ListView control can be configured with the following properties: Property Type Required Description iconFieldName string no Specify the items' property name that defines the file URL path which will be used to show the file icon. This automatically creates a column and renders the file icon. items any[] yes Items to render in the list view. viewFields IViewField[] no The fields you want to render in the list view. Check the IViewField implementation to see which properties you can define. compact boolean no Boolean value to indicate if the control should render in compact mode. By default this is set to false . selectionMode SelectionMode no Specify if the items in the list view can be selected and how. Options are: none, single, multi. selection function no Selection event that passes the selected item(s) from the list view. groupByFields IGrouping[] no Defines the field on which you want to group the items in the list view. defaultSelection number[] no The index of the items to be select by default filterPlaceHolder string no Specify the placeholder for the filter text box. Default 'Search' showFilter boolean no Specify if the filter text box should be rendered. defaultFilter string no Specify the initial filter to be applied to the list. The IViewField has the following implementation: Property Type Required Description name string yes Name of the field. displayName string no Name that will be used as the column title. If not defined, the name property will be used. linkPropertyName string no Specify the field name that needs to be used to render a link for the current field. sorting boolean no Specify if you want to enable sorting for the current field. maxWidth number no Specify the minimum width of the column. maxWidth number no Specify the maximum width of the column. isResizable boolean no Determines if the column can be resized. render function no Override how the field has to get rendered. The IGrouping has the following implementation: Property Type Required Description name string yes Name of the field order GroupOrder yes Specify how the group needs to be ordered. enum GroupOrder Value Description ascending Order the group in ascending order. descending Order the group in descending order.","title":"Implementation"},{"location":"controls/Map/","text":"Map control \u00b6 This control renders a map in your solution. The control has also the ability to search for new locations. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In your component file, import the Map control as follows: import { Map , ICoordinates , MapType } from \"@pnp/spfx-controls-react/lib/Map\" ; Use the Map control in your code as follows: < Map titleText = \"New of London\" coordinates = {{ latitude : 51.507351 , longitude : - 0.127758 }} enableSearch = { true } /> Implementation \u00b6 The Map control can be configured with the following properties: Property Type Required Description Default titleText string no Title label to show above the control. coordinates ICoordinates yes Coordinates required for rendering the control. enableSearch boolean no Allow the user to search for new locations. zoom number no Zoom level for the maps on display (range 1-15). 10 width number no Width of the maps area in percentage. 100% height number no Height of the maps area. 300px mapType MapType no Type of the map to render. standard loadingMessage string no Custom loading message. errorMessage string no Custom error message. mapsClassName string no Custom CSS class name. errorMessageClassName string no Custom CSS error class name. onUpdateCoordinates (coordinates: ICoordinates) => void no Callback to let your solution knows the new coordinates when a search was performed. ICoordinates interface: Property Type Required Description Default latitude number yes Latitude of the map to display. longitude number yes Longitude of the map to display. MapType enum: Name standard cycle normal transport","title":"Map"},{"location":"controls/Map/#map-control","text":"This control renders a map in your solution. The control has also the ability to search for new locations. Here is an example of the control in action:","title":"Map control"},{"location":"controls/Map/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In your component file, import the Map control as follows: import { Map , ICoordinates , MapType } from \"@pnp/spfx-controls-react/lib/Map\" ; Use the Map control in your code as follows: < Map titleText = \"New of London\" coordinates = {{ latitude : 51.507351 , longitude : - 0.127758 }} enableSearch = { true } />","title":"How to use this control in your solutions"},{"location":"controls/Map/#implementation","text":"The Map control can be configured with the following properties: Property Type Required Description Default titleText string no Title label to show above the control. coordinates ICoordinates yes Coordinates required for rendering the control. enableSearch boolean no Allow the user to search for new locations. zoom number no Zoom level for the maps on display (range 1-15). 10 width number no Width of the maps area in percentage. 100% height number no Height of the maps area. 300px mapType MapType no Type of the map to render. standard loadingMessage string no Custom loading message. errorMessage string no Custom error message. mapsClassName string no Custom CSS class name. errorMessageClassName string no Custom CSS error class name. onUpdateCoordinates (coordinates: ICoordinates) => void no Callback to let your solution knows the new coordinates when a search was performed. ICoordinates interface: Property Type Required Description Default latitude number yes Latitude of the map to display. longitude number yes Longitude of the map to display. MapType enum: Name standard cycle normal transport","title":"Implementation"},{"location":"controls/PeoplePicker/","text":"People Picker \u00b6 This control renders a People picker field which can be used to select one or more users from a SharePoint group or site. The control can be configured as mandatory. It will show a custom error message if field is empty. Empty People Picker control with error message and tooltip Selecting People Selected people How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { PeoplePicker , PrincipalType } from \"@pnp/spfx-controls-react/lib/PeoplePicker\" ; Use the PeoplePicker control in your code as follows: < PeoplePicker context = { this . props . context } titleText = \"People Picker\" personSelectionLimit = { 3 } groupName = { \"Team Site Owners\" } // Leave this blank in case you want to filter from all users showtooltip = { true } isRequired = { true } disabled = { true } selectedItems = { this . _getPeoplePickerItems } showHiddenInUI = { false } principalTypes = {[ PrincipalType . User ]} resolveDelay = { 1000 } /> With the selectedItems property you can get the selected People in the Peoplepicker : private _getPeoplePickerItems ( items : any []) { console . log ( 'Items:' , items ); } Implementation \u00b6 The People picker control can be configured with the following properties: Property Type Required Description Default context WebPartContext yes Context of the current web part. titleText string no Text to be displayed on the control groupName string no group from which users are fetched. Leave it blank if need to filter all users none personSelectionLimit number no Defines the limit of people that can be selected in the control 1 isRequired boolean no Set if the control is required or not false disabled boolean no Set if the control is disabled or not false errorMessage string no Specify the error message to display errorMessageClassName string no applies custom styling to the error message section showtooltip boolean no Defines if need a tooltip or not false tooltipMessage string no Specify the tooltip message to display tooltipDirectional DirectionalHint no Direction where the tooltip would be shown selectedItems (items: IPersonaProps[]) => void no Get the selected users in the control. peoplePickerWPclassName string no applies custom styling to the people picker element peoplePickerCntrlclassName string no applies custom styling to the people picker control only defaultSelectedUsers string[] no Default selected user emails or login names webAbsoluteUrl string no Specify the site URL on which you want to perform the user query call. If not provided, the people picker will perform a tenant wide people/group search. When provided it will search users/groups on the provided site. principalTypes PrincipalType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. ensureUser boolean no When ensure user property is true, it will return the local user ID on the current site when doing a tenant wide search. false suggestionsLimit number no Maximum number of suggestions to show in the full suggestion list. 5 resolveDelay number no Add delay to resolve and search users 200 Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name Value User 1 DistributionList 2 SecurityGroup 4 SharePointGroup 8","title":"PeoplePicker"},{"location":"controls/PeoplePicker/#people-picker","text":"This control renders a People picker field which can be used to select one or more users from a SharePoint group or site. The control can be configured as mandatory. It will show a custom error message if field is empty. Empty People Picker control with error message and tooltip Selecting People Selected people","title":"People Picker"},{"location":"controls/PeoplePicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { PeoplePicker , PrincipalType } from \"@pnp/spfx-controls-react/lib/PeoplePicker\" ; Use the PeoplePicker control in your code as follows: < PeoplePicker context = { this . props . context } titleText = \"People Picker\" personSelectionLimit = { 3 } groupName = { \"Team Site Owners\" } // Leave this blank in case you want to filter from all users showtooltip = { true } isRequired = { true } disabled = { true } selectedItems = { this . _getPeoplePickerItems } showHiddenInUI = { false } principalTypes = {[ PrincipalType . User ]} resolveDelay = { 1000 } /> With the selectedItems property you can get the selected People in the Peoplepicker : private _getPeoplePickerItems ( items : any []) { console . log ( 'Items:' , items ); }","title":"How to use this control in your solutions"},{"location":"controls/PeoplePicker/#implementation","text":"The People picker control can be configured with the following properties: Property Type Required Description Default context WebPartContext yes Context of the current web part. titleText string no Text to be displayed on the control groupName string no group from which users are fetched. Leave it blank if need to filter all users none personSelectionLimit number no Defines the limit of people that can be selected in the control 1 isRequired boolean no Set if the control is required or not false disabled boolean no Set if the control is disabled or not false errorMessage string no Specify the error message to display errorMessageClassName string no applies custom styling to the error message section showtooltip boolean no Defines if need a tooltip or not false tooltipMessage string no Specify the tooltip message to display tooltipDirectional DirectionalHint no Direction where the tooltip would be shown selectedItems (items: IPersonaProps[]) => void no Get the selected users in the control. peoplePickerWPclassName string no applies custom styling to the people picker element peoplePickerCntrlclassName string no applies custom styling to the people picker control only defaultSelectedUsers string[] no Default selected user emails or login names webAbsoluteUrl string no Specify the site URL on which you want to perform the user query call. If not provided, the people picker will perform a tenant wide people/group search. When provided it will search users/groups on the provided site. principalTypes PrincipalType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. ensureUser boolean no When ensure user property is true, it will return the local user ID on the current site when doing a tenant wide search. false suggestionsLimit number no Maximum number of suggestions to show in the full suggestion list. 5 resolveDelay number no Add delay to resolve and search users 200 Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name Value User 1 DistributionList 2 SecurityGroup 4 SharePointGroup 8","title":"Implementation"},{"location":"controls/Placeholder/","text":"Placeholder control \u00b6 This control renders a placeholder which can be used to show a message that the web part still has to be configured. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Placeholder } from \"@pnp/spfx-controls-react/lib/Placeholder\" ; Use the Placeholder control in your code as follows: < Placeholder iconName = 'Edit' iconText = 'Configure your web part' description = 'Please configure the web part.' buttonLabel = 'Configure' onConfigure = { this . _onConfigure } /> With the onConfigure property you can define what it needs to do when you click on the button. Like for example opening the property pane: private _onConfigure() { // Context of the web part this . props . context . propertyPane . open (); } Sample of using the hideButton functionality for hiding the button when page is in read mode: < Placeholder iconName = 'Edit' iconText = 'Configure your web part' description = 'Please configure the web part.' buttonLabel = 'Configure' hideButton = { this . props . displayMode === DisplayMode . Read } onConfigure = { this . _onConfigure } /> Implementation \u00b6 The placeholder control can be configured with the following properties: Property Type Required Description buttonLabel string no Text label to be displayed on the button bellow the description. The button is optional. contentClassName string no This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder. description string yes Text description for the placeholder. This appears bellow the Icon and IconText. iconName string yes The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: Office UI Fabric icons . For example: Page or Add . iconText string yes Heading text which is displayed next to the icon. hideButton boolean no Specify if you want to hide the button. Default is false . onConfigure function no onConfigure handler for the button. The button is optional.","title":"Placeholder"},{"location":"controls/Placeholder/#placeholder-control","text":"This control renders a placeholder which can be used to show a message that the web part still has to be configured.","title":"Placeholder control"},{"location":"controls/Placeholder/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Placeholder } from \"@pnp/spfx-controls-react/lib/Placeholder\" ; Use the Placeholder control in your code as follows: < Placeholder iconName = 'Edit' iconText = 'Configure your web part' description = 'Please configure the web part.' buttonLabel = 'Configure' onConfigure = { this . _onConfigure } /> With the onConfigure property you can define what it needs to do when you click on the button. Like for example opening the property pane: private _onConfigure() { // Context of the web part this . props . context . propertyPane . open (); } Sample of using the hideButton functionality for hiding the button when page is in read mode: < Placeholder iconName = 'Edit' iconText = 'Configure your web part' description = 'Please configure the web part.' buttonLabel = 'Configure' hideButton = { this . props . displayMode === DisplayMode . Read } onConfigure = { this . _onConfigure } />","title":"How to use this control in your solutions"},{"location":"controls/Placeholder/#implementation","text":"The placeholder control can be configured with the following properties: Property Type Required Description buttonLabel string no Text label to be displayed on the button bellow the description. The button is optional. contentClassName string no This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder. description string yes Text description for the placeholder. This appears bellow the Icon and IconText. iconName string yes The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: Office UI Fabric icons . For example: Page or Add . iconText string yes Heading text which is displayed next to the icon. hideButton boolean no Specify if you want to hide the button. Default is false . onConfigure function no onConfigure handler for the button. The button is optional.","title":"Implementation"},{"location":"controls/Progress/","text":"Progress control \u00b6 This control shows progress of multiple SEQUENTIALLY executed actions. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Progress } from \"@pnp/spfx-controls-react/lib/Progress\" ; Use the Progress control in your code as follows: < Progress title = { 'Progress Test' } showOverallProgress = { true } showIndeterminateOverallProgress = { false } hideNotStartedActions = { false } actions = { this . state . progressActions } currentActionIndex = { this . state . currentProgressActionIndex } longRunningText = { 'This operation takes longer than expected' } longRunningTextDisplayDelay = { 7000 } height = { '350px' } /> Note : the control itself is not responsible for actions' execution. It only renders the actions, overall progress and actions' execution states. When using the control, you should implement actions execution. As example, you can have a base class that implements IProgressAction interface and has an execute method: class BaseAction implements IProgressAction { public get title () : string { ... } public get subActionsTitles () : string [] { ... } public get hasError () : boolean { ... } public get errorMessage () : string { ... } public async execute () : Promise < void > { ... } } Then, you have multiple actions derived from the base one: class FirstAction extends BaseAction { public async execute () : Promise < void > { // implementation for FirstAction } } class SecondAction extends BaseAction { public async execute () : Promise < void > { // implementation for SecondAction } } Now, in a component, where Progress is used you can have code as below: export interface IYourComponentState { actions : IProgressAction []; currentActionIndex? : number ; // other state properties } // ... export class YourComponent extends React . Component < IYourComponentProps , IYourComponentState > { // all other code, including render with Progress reference listed above private _initActions() { this . setState ({ actions : [ new FirstAction (), new SecondAction () ] }); } private async _execute() { for ( let i = 0 ; i <= this . state . actions . length ; i ++ ) { this . setState ( currentActionIndex : i ); if ( i < this . state . actions . length ) { await this . state . actions [ i ]. execute (); } } } } Implementation \u00b6 The Progress component can be configured with the following properties: Property Type Required Description title string no Title, or header, of the progress. showOverallProgress boolean true Specifies if overall progress indicator should be shown. showIndeterminateOverallProgress boolean no Specifies if indeterminate overall progress animation will be shown. hideNotStartedActions boolean yes Specifies if not started actions should not be rendered. actions IProgressAction[] yes Progress actions currentActionIndex number no Index of currently executing action heigth string no Height of the component longRunningText string no Text to be displayed for long running operations longRunningTextDisplayDelay number no Delay until longRunningText is displayed im milliseconds. If not set or 0 longRunningText is displayed right away. className string no Class name to be applied to the component headerClassName string no Header class name. Header contains title, progress indicator, and delay text actionsContainerClassName string no Actions container class name actionClassName string no Single action class name successIconName string no Success icon name. Default is CheckMark errorIconName string no Error icon name. Default is Error inProgressIconName string no InProgress icon name. Default is '', spinner is displayed.","title":"Progress"},{"location":"controls/Progress/#progress-control","text":"This control shows progress of multiple SEQUENTIALLY executed actions. Here is an example of the control in action:","title":"Progress control"},{"location":"controls/Progress/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Progress } from \"@pnp/spfx-controls-react/lib/Progress\" ; Use the Progress control in your code as follows: < Progress title = { 'Progress Test' } showOverallProgress = { true } showIndeterminateOverallProgress = { false } hideNotStartedActions = { false } actions = { this . state . progressActions } currentActionIndex = { this . state . currentProgressActionIndex } longRunningText = { 'This operation takes longer than expected' } longRunningTextDisplayDelay = { 7000 } height = { '350px' } /> Note : the control itself is not responsible for actions' execution. It only renders the actions, overall progress and actions' execution states. When using the control, you should implement actions execution. As example, you can have a base class that implements IProgressAction interface and has an execute method: class BaseAction implements IProgressAction { public get title () : string { ... } public get subActionsTitles () : string [] { ... } public get hasError () : boolean { ... } public get errorMessage () : string { ... } public async execute () : Promise < void > { ... } } Then, you have multiple actions derived from the base one: class FirstAction extends BaseAction { public async execute () : Promise < void > { // implementation for FirstAction } } class SecondAction extends BaseAction { public async execute () : Promise < void > { // implementation for SecondAction } } Now, in a component, where Progress is used you can have code as below: export interface IYourComponentState { actions : IProgressAction []; currentActionIndex? : number ; // other state properties } // ... export class YourComponent extends React . Component < IYourComponentProps , IYourComponentState > { // all other code, including render with Progress reference listed above private _initActions() { this . setState ({ actions : [ new FirstAction (), new SecondAction () ] }); } private async _execute() { for ( let i = 0 ; i <= this . state . actions . length ; i ++ ) { this . setState ( currentActionIndex : i ); if ( i < this . state . actions . length ) { await this . state . actions [ i ]. execute (); } } } }","title":"How to use this control in your solutions"},{"location":"controls/Progress/#implementation","text":"The Progress component can be configured with the following properties: Property Type Required Description title string no Title, or header, of the progress. showOverallProgress boolean true Specifies if overall progress indicator should be shown. showIndeterminateOverallProgress boolean no Specifies if indeterminate overall progress animation will be shown. hideNotStartedActions boolean yes Specifies if not started actions should not be rendered. actions IProgressAction[] yes Progress actions currentActionIndex number no Index of currently executing action heigth string no Height of the component longRunningText string no Text to be displayed for long running operations longRunningTextDisplayDelay number no Delay until longRunningText is displayed im milliseconds. If not set or 0 longRunningText is displayed right away. className string no Class name to be applied to the component headerClassName string no Header class name. Header contains title, progress indicator, and delay text actionsContainerClassName string no Actions container class name actionClassName string no Single action class name successIconName string no Success icon name. Default is CheckMark errorIconName string no Error icon name. Default is Error inProgressIconName string no InProgress icon name. Default is '', spinner is displayed.","title":"Implementation"},{"location":"controls/RichText/","text":"RichText control \u00b6 This control provides rich text editing and display capability. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { RichText } from \"@pnp/spfx-controls-react/lib/RichText\" ; The simplest way to use the RichText control in your code is as follows: < RichText value = { this . props . value } onChange = {( text ) => this . props . onChange ( text )} /> The value property should contain the HTML that you wish to display The onChange handler will be called every time a user changes the text. For example, to have your web part store the rich text as it is updated, you would use the following code: private onTextChange = ( newText : string ) => { this . properties . myRichText = newText ; return newText ; } It is possible to use the onChange handler as users type -- for example, the following code replaces all instance of the word bold with bold text. private onTextChange = ( newText : string ) => { newText = newText . replace ( \" bold \" , \" <strong>bold</strong> \" ); this . properties . description = newText ; return newText ; } Implementation \u00b6 The RichText control can be configured with the following properties: Property Type Required Description className string no The custom CSS class to apply to the RichText control. isEditMode boolean no true indicates that users will be able to edit the content of the RichText control. false will display the rich text as read-only. styleOptions StyleOptions no Define the styles you want to show or hide for the rich text editor value string no Sets the rich text to display in the RichText control. onChange (text: string) => string no onChange handler for the RichText control. The function must return a string containing the rich text to display in the RichText control. StyleOptions interface Property Type Required Description showAlign boolean no Indicates whether to show the Align toolbar button or not. Default value is true showBold boolean no Indicates whether to show the Bold toolbar button or not. Default value is true showItalic boolean no Indicates whether to show the Italic toolbar button or not. Default value is true showLink boolean no Indicates whether to show the Hyperlink toolbar button or not. Default value is true showList boolean no Indicates whether to show the List toolbar button or not. Default value is true showMore boolean no Indicates whether to show the More toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true showStyles boolean no Indicates whether to show the Headings toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true showUnderline boolean no Indicates whether to show the Underline toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true Note that setting showAlign , showBold , showItalic , showLink , showList , showStyles , or showUnderline to false does not remove the user's ability to apply the button's associated formatting -- it only hides the toolbar option. Also, if showMore is true , all options remain available in the formatting pane -- regardless whether they were turned off using show___ . To prevent users from applying specific formats, use the onChange handler to parse the rich text and remove the formatting as desired.","title":"RichText"},{"location":"controls/RichText/#richtext-control","text":"This control provides rich text editing and display capability.","title":"RichText control"},{"location":"controls/RichText/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { RichText } from \"@pnp/spfx-controls-react/lib/RichText\" ; The simplest way to use the RichText control in your code is as follows: < RichText value = { this . props . value } onChange = {( text ) => this . props . onChange ( text )} /> The value property should contain the HTML that you wish to display The onChange handler will be called every time a user changes the text. For example, to have your web part store the rich text as it is updated, you would use the following code: private onTextChange = ( newText : string ) => { this . properties . myRichText = newText ; return newText ; } It is possible to use the onChange handler as users type -- for example, the following code replaces all instance of the word bold with bold text. private onTextChange = ( newText : string ) => { newText = newText . replace ( \" bold \" , \" <strong>bold</strong> \" ); this . properties . description = newText ; return newText ; }","title":"How to use this control in your solutions"},{"location":"controls/RichText/#implementation","text":"The RichText control can be configured with the following properties: Property Type Required Description className string no The custom CSS class to apply to the RichText control. isEditMode boolean no true indicates that users will be able to edit the content of the RichText control. false will display the rich text as read-only. styleOptions StyleOptions no Define the styles you want to show or hide for the rich text editor value string no Sets the rich text to display in the RichText control. onChange (text: string) => string no onChange handler for the RichText control. The function must return a string containing the rich text to display in the RichText control. StyleOptions interface Property Type Required Description showAlign boolean no Indicates whether to show the Align toolbar button or not. Default value is true showBold boolean no Indicates whether to show the Bold toolbar button or not. Default value is true showItalic boolean no Indicates whether to show the Italic toolbar button or not. Default value is true showLink boolean no Indicates whether to show the Hyperlink toolbar button or not. Default value is true showList boolean no Indicates whether to show the List toolbar button or not. Default value is true showMore boolean no Indicates whether to show the More toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true showStyles boolean no Indicates whether to show the Headings toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true showUnderline boolean no Indicates whether to show the Underline toolbar button or not. Note that this option is indenpendent from the other show___ options. I.e.: Setting showBold to false will disable the Bold toolbar, but will not disable it from the formatting pane. Default value is true Note that setting showAlign , showBold , showItalic , showLink , showList , showStyles , or showUnderline to false does not remove the user's ability to apply the button's associated formatting -- it only hides the toolbar option. Also, if showMore is true , all options remain available in the formatting pane -- regardless whether they were turned off using show___ . To prevent users from applying specific formats, use the onChange handler to parse the rich text and remove the formatting as desired.","title":"Implementation"},{"location":"controls/SecurityTrimmedControl/","text":"SecurityTrimmedControl \u00b6 This control is intended to be used when you want to show or hide components based on the user permissions. The control can be used to check the user\u2019s permissions on the current site / list were the solution is loaded, or on a remote site / list. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SecurityTrimmedControl } from \"@pnp/spfx-controls-react/lib/SecurityTrimmedControl\" ; You can use the SecurityTrimmedControl as follows in your solutions: Checking permissions on the current site <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentWeb} permissions={[SPPermission.viewPages]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on the current list <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentList} permissions={[SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on remote site <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteWeb} remoteSiteUrl=\"https://<tenant>.sharepoint.com/sites/<siteName>\" permissions={[SPPermission.viewPages, SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on remote list / library <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteListOrLib} remoteSiteUrl=\"https://<tenant>.sharepoint.com/sites/<siteName>\" relativeLibOrListUrl=\"/sites/<siteName>/<list-or-library-URL>\" permissions={[SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Implementation \u00b6 The SecurityTrimmedControl can be configured with the following properties: Property Type Required Description context WebPartContext or ApplicationCustomizerContext or FieldCustomizerContext or ListViewCommandSetContext yes Context of the web part, application customizer, field customizer, or list view command set. permissions SPPermission[] yes The permissions to check for the user. level PermissionLevel yes Specify where to check the user permissions: current site or list / remote site or list. remoteSiteUrl string no The URL of the remote site. Required when you want to check permissions on remote site or list. relativeLibOrListUrl string no The relative URL of the list or library. Required when you want to check permissions on remote list. folderPath string no Specify the name of a folder to check the user permissions against. Will be overridden if itemId is present. itemId number no Specify the ID of the item to check the user permissions against. Takes precedence over folder. className string no Specify the className to be used on the parent element. The PermissionLevel enum has the following values: Value Description Required properties currentWeb Checks permissions on the current web context , permissions currentList Checks permissions in the current loaded list context , permissions remoteWeb Checks permissions on the specified site URL context , permissions , remoteSiteUrl remoteListOrLib Checks permissions on the specified list/library URL in combination with the site URL context , permissions , remoteSiteUrl , relativeLibOrListUrl remoteListItem Check permissions on a specific item in a list/library context , permissions , remoteSiteUrl , relativeLibOrListUrl , itemId remoteFolder Check permissions on a specific folder context , permissions , remoteSiteUrl , relativeLibOrListUrl , folderPath","title":"SecurityTrimmedControl"},{"location":"controls/SecurityTrimmedControl/#securitytrimmedcontrol","text":"This control is intended to be used when you want to show or hide components based on the user permissions. The control can be used to check the user\u2019s permissions on the current site / list were the solution is loaded, or on a remote site / list.","title":"SecurityTrimmedControl"},{"location":"controls/SecurityTrimmedControl/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SecurityTrimmedControl } from \"@pnp/spfx-controls-react/lib/SecurityTrimmedControl\" ; You can use the SecurityTrimmedControl as follows in your solutions: Checking permissions on the current site <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentWeb} permissions={[SPPermission.viewPages]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on the current list <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentList} permissions={[SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on remote site <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteWeb} remoteSiteUrl=\"https://<tenant>.sharepoint.com/sites/<siteName>\" permissions={[SPPermission.viewPages, SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl> Checking permissions on remote list / library <SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteListOrLib} remoteSiteUrl=\"https://<tenant>.sharepoint.com/sites/<siteName>\" relativeLibOrListUrl=\"/sites/<siteName>/<list-or-library-URL>\" permissions={[SPPermission.addListItems]}> {/* Specify the components to load when user has the required permissions */} </SecurityTrimmedControl>","title":"How to use this control in your solutions"},{"location":"controls/SecurityTrimmedControl/#implementation","text":"The SecurityTrimmedControl can be configured with the following properties: Property Type Required Description context WebPartContext or ApplicationCustomizerContext or FieldCustomizerContext or ListViewCommandSetContext yes Context of the web part, application customizer, field customizer, or list view command set. permissions SPPermission[] yes The permissions to check for the user. level PermissionLevel yes Specify where to check the user permissions: current site or list / remote site or list. remoteSiteUrl string no The URL of the remote site. Required when you want to check permissions on remote site or list. relativeLibOrListUrl string no The relative URL of the list or library. Required when you want to check permissions on remote list. folderPath string no Specify the name of a folder to check the user permissions against. Will be overridden if itemId is present. itemId number no Specify the ID of the item to check the user permissions against. Takes precedence over folder. className string no Specify the className to be used on the parent element. The PermissionLevel enum has the following values: Value Description Required properties currentWeb Checks permissions on the current web context , permissions currentList Checks permissions in the current loaded list context , permissions remoteWeb Checks permissions on the specified site URL context , permissions , remoteSiteUrl remoteListOrLib Checks permissions on the specified list/library URL in combination with the site URL context , permissions , remoteSiteUrl , relativeLibOrListUrl remoteListItem Check permissions on a specific item in a list/library context , permissions , remoteSiteUrl , relativeLibOrListUrl , itemId remoteFolder Check permissions on a specific folder context , permissions , remoteSiteUrl , relativeLibOrListUrl , folderPath","title":"Implementation"},{"location":"controls/SiteBreadcrumb/","text":"SiteBreadcrumb control \u00b6 This control returns a breadcrumb based on the current location. How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SiteBreadcrumb } from \"@pnp/spfx-controls-react/lib/SiteBreadcrumb\" ; Use the SiteBreadcrumb control in your code as follows: < SiteBreadcrumb context = { this . props . context } /> Implementation \u00b6 The SiteBreadcrumb control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes Pass the context of your web part or application customizer extension.","title":"SiteBreadcrumb"},{"location":"controls/SiteBreadcrumb/#sitebreadcrumb-control","text":"This control returns a breadcrumb based on the current location.","title":"SiteBreadcrumb control"},{"location":"controls/SiteBreadcrumb/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SiteBreadcrumb } from \"@pnp/spfx-controls-react/lib/SiteBreadcrumb\" ; Use the SiteBreadcrumb control in your code as follows: < SiteBreadcrumb context = { this . props . context } />","title":"How to use this control in your solutions"},{"location":"controls/SiteBreadcrumb/#implementation","text":"The SiteBreadcrumb control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes Pass the context of your web part or application customizer extension.","title":"Implementation"},{"location":"controls/TaxonomyPicker/","text":"Taxonomy Picker \u00b6 This control allows you to select one or more Terms from a TermSet via its name or TermSet ID. You can also configure the control to select the child terms from a specific term in the TermSet by setting the AnchorId. Disclaimer This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in picker Term picker: Auto Complete How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { TaxonomyPicker , IPickerTerms } from \"@pnp/spfx-controls-react/lib/TaxonomyPicker\" ; Use the TaxonomyPicker control in your code as follows: < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onTaxPickerChange } isTermSetSelectable = { false } /> With the onChange property you can capture the event of when the terms in the picker has changed: private onTaxPickerChange ( terms : IPickerTerms ) { console . log ( \"Terms\" , terms ); } Term actions \u00b6 Since version 1.12.0 , you can apply term actions to all terms or specific ones. Term actions could for instance be used to retrieve the labels of the term, or retrieve other information. These term actions can be implemented as follows: < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onServicePickerChange } isTermSetSelectable = { false } termActions = {{ actions : [{ title : \"Update term label\" , iconName : \"LocaleLanguage\" , id : \"UpdateTermLabel\" , actionCallback : async ( taxService : SPTermStorePickerService , term : ITerm ) => { return { updateActionType : UpdateType.updateTermLabel , value : ` ${ term . Name } (updated)` }; }, applyToTerm : ( term : ITerm ) => ( true ) // Applying the action to all terms }] }} /> We also provided a default term action which you can use to retrieve the term its labels and will update the term text in the TaxonomyPicker hierarchy. < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onServicePickerChange } isTermSetSelectable = { false } termActions = {{ actions : [ new TermLabelAction ( \"Get Labels\" )] }} /> Implementation \u00b6 The TaxonomyPicker control can be configured with the following properties: Property Type Required Description panelTitle string yes TermSet Picker Panel title. label string yes Text displayed above the Taxonomy Picker. disabled string no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. termsetNameOrID string yes The name or Id of your TermSet that you would like the Taxonomy Picker to chose terms from. onChange function no captures the event of when the terms in the picker has changed. isTermSetSelectable boolean no Specify if the TermSet itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. disableChildrenOfDisabledParents boolean no Specify if you want to disable the child terms when their parent is disabled. anchorId string no Set the anchorid to a child term in the TermSet to be able to select terms from that level and below. termActions ITermActions no Allows to execute custom action on the term like e.g. get other term labelsITermActions. Interface IPickerTerm Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent TermSet of the term termSetName string no The Name of the parent TermSet of the term Interface IPickerTerms An Array of IPickerTerm Interface ITermActions Property Type Required Description Default actions ITermAction[] yes The array of supported actions termActionsDisplayStyle TermActionsDisplayStyle no Defines how to display term action button, available options: text, icon, text and icon text termActionsDisplayMode TermActionsDisplayMode no Defines how to display term actions, as buttons or dropdown buttons initialize (spTermService: SPTermStorePickerService) => Promise\\<void> no Initializes the term action with the taxonomy service Interface ITermAction Property Type Required Description id string yes Unique id of the term action title string yes Action title iconName string no Name of the icon to be used to display action hidden boolean no Specify if the action is hidden. This could be used for instance when you want to invoke the action right after rendering. invokeActionOnRender boolean no Specifies if you want to invoke the action on render applyToTerm (currentTerm: ITerm) => Promise\\<boolean> | boolean yes Method checks if the current term is supported actionCallback (spTermService: SPTermStorePickerService, currentTerm: ITerm) => Promise\\<UpdateAction> yes Method to be executed when action is fired Interface UpdateAction Property Type Required Description updateActionType UpdateType yes Defines the type of update you want to perform value string no New term label value to update. Only required when you want to update the term Enum UpdateType Value updateTermLabel updateTermsTree","title":"TaxonomyPicker"},{"location":"controls/TaxonomyPicker/#taxonomy-picker","text":"This control allows you to select one or more Terms from a TermSet via its name or TermSet ID. You can also configure the control to select the child terms from a specific term in the TermSet by setting the AnchorId. Disclaimer This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in picker Term picker: Auto Complete","title":"Taxonomy Picker"},{"location":"controls/TaxonomyPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { TaxonomyPicker , IPickerTerms } from \"@pnp/spfx-controls-react/lib/TaxonomyPicker\" ; Use the TaxonomyPicker control in your code as follows: < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onTaxPickerChange } isTermSetSelectable = { false } /> With the onChange property you can capture the event of when the terms in the picker has changed: private onTaxPickerChange ( terms : IPickerTerms ) { console . log ( \"Terms\" , terms ); }","title":"How to use this control in your solutions"},{"location":"controls/TaxonomyPicker/#term-actions","text":"Since version 1.12.0 , you can apply term actions to all terms or specific ones. Term actions could for instance be used to retrieve the labels of the term, or retrieve other information. These term actions can be implemented as follows: < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onServicePickerChange } isTermSetSelectable = { false } termActions = {{ actions : [{ title : \"Update term label\" , iconName : \"LocaleLanguage\" , id : \"UpdateTermLabel\" , actionCallback : async ( taxService : SPTermStorePickerService , term : ITerm ) => { return { updateActionType : UpdateType.updateTermLabel , value : ` ${ term . Name } (updated)` }; }, applyToTerm : ( term : ITerm ) => ( true ) // Applying the action to all terms }] }} /> We also provided a default term action which you can use to retrieve the term its labels and will update the term text in the TaxonomyPicker hierarchy. < TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = \"Countries\" panelTitle = \"Select Term\" label = \"Taxonomy Picker\" context = { this . props . context } onChange = { this . onServicePickerChange } isTermSetSelectable = { false } termActions = {{ actions : [ new TermLabelAction ( \"Get Labels\" )] }} />","title":"Term actions"},{"location":"controls/TaxonomyPicker/#implementation","text":"The TaxonomyPicker control can be configured with the following properties: Property Type Required Description panelTitle string yes TermSet Picker Panel title. label string yes Text displayed above the Taxonomy Picker. disabled string no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. termsetNameOrID string yes The name or Id of your TermSet that you would like the Taxonomy Picker to chose terms from. onChange function no captures the event of when the terms in the picker has changed. isTermSetSelectable boolean no Specify if the TermSet itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. disableChildrenOfDisabledParents boolean no Specify if you want to disable the child terms when their parent is disabled. anchorId string no Set the anchorid to a child term in the TermSet to be able to select terms from that level and below. termActions ITermActions no Allows to execute custom action on the term like e.g. get other term labelsITermActions. Interface IPickerTerm Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent TermSet of the term termSetName string no The Name of the parent TermSet of the term Interface IPickerTerms An Array of IPickerTerm Interface ITermActions Property Type Required Description Default actions ITermAction[] yes The array of supported actions termActionsDisplayStyle TermActionsDisplayStyle no Defines how to display term action button, available options: text, icon, text and icon text termActionsDisplayMode TermActionsDisplayMode no Defines how to display term actions, as buttons or dropdown buttons initialize (spTermService: SPTermStorePickerService) => Promise\\<void> no Initializes the term action with the taxonomy service Interface ITermAction Property Type Required Description id string yes Unique id of the term action title string yes Action title iconName string no Name of the icon to be used to display action hidden boolean no Specify if the action is hidden. This could be used for instance when you want to invoke the action right after rendering. invokeActionOnRender boolean no Specifies if you want to invoke the action on render applyToTerm (currentTerm: ITerm) => Promise\\<boolean> | boolean yes Method checks if the current term is supported actionCallback (spTermService: SPTermStorePickerService, currentTerm: ITerm) => Promise\\<UpdateAction> yes Method to be executed when action is fired Interface UpdateAction Property Type Required Description updateActionType UpdateType yes Defines the type of update you want to perform value string no New term label value to update. Only required when you want to update the term Enum UpdateType Value updateTermLabel updateTermsTree","title":"Implementation"},{"location":"controls/WebPartTitle/","text":"WebPartTitle control \u00b6 This control renders a web part title that is changeable when the page is in edit mode. Here is an example of the control in action: How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In the root web part file, the one that extends from the BaseClientSideWebPart class. Pass the following properties to your web part main component: const element : React.ReactElement < IControlsTestProps > = React . createElement ( ControlsTest , { title : this.properties.title , displayMode : this.displayMode , updateProperty : ( value : string ) => { this . properties . title = value ; } } ); Add the title , displayMode , and updateProperty properties to the properties interface of your component: import { DisplayMode } from '@microsoft/sp-core-library' ; export interface IControlsTestProps { title : string ; displayMode : DisplayMode ; updateProperty : ( value : string ) => void ; } In your component file, import the WebPartTitle control as follows: import { WebPartTitle } from \"@pnp/spfx-controls-react/lib/WebPartTitle\" ; Use the WebPartTitle control in your code as follows: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } /> Adding a \"see all\" link \u00b6 Since version 1.13.0 the WebPartTitle control has the ability to show a \"see all\" link by using the moreLink property. The property gives you the flexibility to render the link or component you want to show next to the web part title. You can do this as like in the following example code: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } moreLink = { < Link href = \"https://sharepoint.github.io/sp-dev-fx-controls-react/\" > See all < /Link> } /> If you wish, you may pass a callback function instead, as per the following example code: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } moreLink = { () => { return ( < Link href = \"https://sharepoint.github.io/sp-dev-fx-controls-react/\" > See all < /Link>); } } /> The resulting web part title will look like the following: Implementation \u00b6 The WebPartTitle control can be configured with the following properties: Property Type Required Description displayMode DisplayMode yes This tells the control in which page mode it is rendering. title string yes The title value for the web part. updateProperty Function yes Function that you can pass to update the title in the root web part. className string no Optional property to specify a custom class that allows you to change the web part title style. placeholder string no Optional property to specify a custom placeholder to display when the title is editable. themeVariant IReadonlyTheme no The current loaded SharePoint theme/section background (More info: Supporting section backgrounds ). moreLink Function | JSX.Element no Optional property to render a See all link in the web part title.","title":"WebPartTitle"},{"location":"controls/WebPartTitle/#webparttitle-control","text":"This control renders a web part title that is changeable when the page is in edit mode. Here is an example of the control in action:","title":"WebPartTitle control"},{"location":"controls/WebPartTitle/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In the root web part file, the one that extends from the BaseClientSideWebPart class. Pass the following properties to your web part main component: const element : React.ReactElement < IControlsTestProps > = React . createElement ( ControlsTest , { title : this.properties.title , displayMode : this.displayMode , updateProperty : ( value : string ) => { this . properties . title = value ; } } ); Add the title , displayMode , and updateProperty properties to the properties interface of your component: import { DisplayMode } from '@microsoft/sp-core-library' ; export interface IControlsTestProps { title : string ; displayMode : DisplayMode ; updateProperty : ( value : string ) => void ; } In your component file, import the WebPartTitle control as follows: import { WebPartTitle } from \"@pnp/spfx-controls-react/lib/WebPartTitle\" ; Use the WebPartTitle control in your code as follows: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } />","title":"How to use this control in your solutions"},{"location":"controls/WebPartTitle/#adding-a-see-all-link","text":"Since version 1.13.0 the WebPartTitle control has the ability to show a \"see all\" link by using the moreLink property. The property gives you the flexibility to render the link or component you want to show next to the web part title. You can do this as like in the following example code: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } moreLink = { < Link href = \"https://sharepoint.github.io/sp-dev-fx-controls-react/\" > See all < /Link> } /> If you wish, you may pass a callback function instead, as per the following example code: < WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } moreLink = { () => { return ( < Link href = \"https://sharepoint.github.io/sp-dev-fx-controls-react/\" > See all < /Link>); } } /> The resulting web part title will look like the following:","title":"Adding a \"see all\" link"},{"location":"controls/WebPartTitle/#implementation","text":"The WebPartTitle control can be configured with the following properties: Property Type Required Description displayMode DisplayMode yes This tells the control in which page mode it is rendering. title string yes The title value for the web part. updateProperty Function yes Function that you can pass to update the title in the root web part. className string no Optional property to specify a custom class that allows you to change the web part title style. placeholder string no Optional property to specify a custom placeholder to display when the title is editable. themeVariant IReadonlyTheme no The current loaded SharePoint theme/section background (More info: Supporting section backgrounds ). moreLink Function | JSX.Element no Optional property to render a See all link in the web part title.","title":"Implementation"},{"location":"controls/charts/BarChart/","text":"ChartControl - Bar Chart \u00b6 Bar charts represent data values as vertical bars. Example Usage \u00b6 To create a bar chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(255, 159, 64, 0.2)' , 'rgba(255, 205, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(201, 203, 207, 0.2)' ], borderColor : [ 'rgb(255, 99, 132)' , 'rgb(255, 159, 64)' , 'rgb(255, 205, 86)' , 'rgb(75, 192, 192)' , 'rgb(54, 162, 235)' , 'rgb(153, 102, 255)' , 'rgb(201, 203, 207)' ], borderWidth : 1 }] }; // set the options const options : Chart.ChartOptions = { scales : { yAxes : [ { ticks : { beginAtZero : true } } ] } }; return ( < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> ); You can omit the backgroundColor , borderColor , and borderWidth values from the code above to render a chart using the default Office palette: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] }] }; // set the options const options : Chart.ChartOptions = { scales : { yAxes : [ { ticks : { beginAtZero : true } } ] } }; return ( < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> ); Which will produce the following chart: As with all charts, the backgroundColor and borderColor values can be one of the following: Array of colors ( string[] ): each data element in the dataset will be assigned a different color in the same order as they are listed in the array. If there are more data elements than colors, the remaining data elements will have a grey color. A single color ( string ): every data element in the dataset will use the same color. Variations \u00b6 Stacked Bar Chart \u00b6 If your bar chart has multiple datasets, you can render it as a stacked bar chart by changing the settings on the X and Y axes to enable stacking, as follows: const options : Chart.ChartOptions = { scales : { xAxes : [{ stacked : true }], yAxes : [{ stacked : true }] } }; In order to render each dataset with a different color, make sure to specify the backgroundColor and borderColor settings for each dataset: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ], fill : false , backgroundColor : 'rgba(255, 99, 132, 0.2)' , // same color for all data elements borderColor : 'rgb(255, 99, 132)' , // same color for all data elements borderWidth : 1 }, { label : 'My Second Dataset' , data : [ 15 , 29 , 30 , 8 , 26 , 35 , 20 ], fill : false , backgroundColor : 'rgba(255, 159, 64, 0.2)' , // same color for all data elements borderColor : 'rgb(255, 159, 64)' , // same color for all data elements borderWidth : 1 } ] }; Horizontal Bar Chart \u00b6 To render a horizontal bar, use the following code: < ChartControl type = { ChartType . HorizontalBar } data = { data } options = { options } /> Using the same options as above. Note that horizontal bar charts can also be stacked using the same approach as above. Dataset Properties \u00b6 Bar charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) For example, the following code will apply the value 'red:' to every element in the dataset. const data : Chart.ChartData = { datasets : [ { label : 'My First Dataset' , data : [ 10 , 20 , 30 , ], backgroundColor : 'red' } }; Whereas the following code will set 10 to backgroundColor 'red' , 20 to 'green' , and 30 to 'blue' . const data : Chart.ChartData = { datasets : [ { label : 'My First Dataset' , data : [ 10 , 20 , 30 , ], backgroundColor : [ 'red' , 'green' , 'blue' ] } }; Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The bar fill color. borderColor Color OR Color[] The bar border color. borderWidth number OR number[] The bar's border width. Measured in pixels. borderSkipped 'bottom' 'left' 'top' 'right' Specifies which border should be hidden when rendering bars. This option is useful when custom-rendering charts. data number[] { t: Date, y: number} The chart's data. Required. hoverBackgroundColor Color OR Color[] The bar's fill color when a mouse hovers over it hoverBorderColor Color OR Color[] The bar's border color when a mouse hovers over it. hoverBorderWidth number OR number[] The bar's border width when a mouse hovers over it. Data Structure \u00b6 number[] \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] The chart elements will be rendered in the same order as found in the array. Time Scales \u00b6 You can also provide dates and times instead of labels for each data element. Time scales should be provided as t (as in ticks ) and y coordinates: data : [ { \"t\" : new Date ( 'December 1 2018' ), \"y\" : 46 }, { \"t\" : new Date ( 'December 3 2018' ), \"y\" : 9 }, { \"t\" : new Date ( 'December 7 2018' ), \"y\" : 48 }, { \"t\" : new Date ( 'December 10 2018' ), \"y\" : 13 }, { \"t\" : new Date ( 'December 20 2018' ), \"y\" : 12 }, ] Or, if you prefer using moment.js : data : [ { \"t\" : moment ( 'December 1 2018' ). valueOf (), \"y\" : 46 }, { \"t\" : moment ( 'December 3 2018' ). valueOf (), \"y\" : 9 }, { \"t\" : moment ( 'December 7 2018' ). valueOf (), \"y\" : 48 }, { \"t\" : moment ( 'December 10 2018' ). valueOf (), \"y\" : 13 }, { \"t\" : moment ( 'December 20 2018' ). valueOf (), \"y\" : 12 }, ] (add the following to your imports:) import * as moment from 'moment' ; To render horizontal axis as a time series, use the following options: options = {{ scales : { xAxes : [{ type : 'time' , time : { displayFormats : { // choose the scale that applies to your data, // or pass all the scales 'millisecond' : 'MMM DD YYYY' , // use your own date format 'second' : 'MMM DD YYYY' , 'minute' : 'MMM DD YYYY' , 'hour' : 'MMM DD YYYY' , 'day' : 'MMM DD YYYY' , 'week' : 'MMM DD YYYY' , 'month' : 'MMM DD YYYY' , 'quarter' : 'MMM DD YYYY' , 'year' : 'MMM DD YYYY' , } } }] } }} Which will produce the following chart: NOTE: As with regular data elements, you should pass the time scale array in the order that you want them to appear. Otherwise, you will get disappointing results. Configuration \u00b6 The following configuration options are specific to bar charts: Name Type Default Description barPercentage number 0.9 How much of the category should each bar occupy, in percent. Value should be between 0 and 1. categoryPercentage number 0.8 How much each category should occupy, in percent. Value should be between 0 and 1. barThickness number OR \"flex\" Sets the thickness of each bar. If the default value is used, the bars will be equally sized to match the smallest interval. If number value is provided, the bar width will be set in pixels and barPercentage and categoryPercentage will be ignored. If \"flex\" is used, the widths are calculated automatically based on the previous and following samples so that they take the full available widths without overlap maxBarThickness number Sets the maximum width of every bar. gridLines.offsetGridLines boolean true true , bars will fall between the grid lines; grid lines will shift to the left by half a tick interval. If false , grid line will align with the middle of the bars. For More Information \u00b6 For more information on what options are available with Bar charts, refer to the Bar Chart documentation on Chart.js .","title":"Bar Chart"},{"location":"controls/charts/BarChart/#chartcontrol-bar-chart","text":"Bar charts represent data values as vertical bars.","title":"ChartControl - Bar Chart"},{"location":"controls/charts/BarChart/#example-usage","text":"To create a bar chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ], backgroundColor : [ 'rgba(255, 99, 132, 0.2)' , 'rgba(255, 159, 64, 0.2)' , 'rgba(255, 205, 86, 0.2)' , 'rgba(75, 192, 192, 0.2)' , 'rgba(54, 162, 235, 0.2)' , 'rgba(153, 102, 255, 0.2)' , 'rgba(201, 203, 207, 0.2)' ], borderColor : [ 'rgb(255, 99, 132)' , 'rgb(255, 159, 64)' , 'rgb(255, 205, 86)' , 'rgb(75, 192, 192)' , 'rgb(54, 162, 235)' , 'rgb(153, 102, 255)' , 'rgb(201, 203, 207)' ], borderWidth : 1 }] }; // set the options const options : Chart.ChartOptions = { scales : { yAxes : [ { ticks : { beginAtZero : true } } ] } }; return ( < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> ); You can omit the backgroundColor , borderColor , and borderWidth values from the code above to render a chart using the default Office palette: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [{ label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] }] }; // set the options const options : Chart.ChartOptions = { scales : { yAxes : [ { ticks : { beginAtZero : true } } ] } }; return ( < ChartControl type = { ChartType . Bar } data = { data } options = { options } /> ); Which will produce the following chart: As with all charts, the backgroundColor and borderColor values can be one of the following: Array of colors ( string[] ): each data element in the dataset will be assigned a different color in the same order as they are listed in the array. If there are more data elements than colors, the remaining data elements will have a grey color. A single color ( string ): every data element in the dataset will use the same color.","title":"Example Usage"},{"location":"controls/charts/BarChart/#variations","text":"","title":"Variations"},{"location":"controls/charts/BarChart/#stacked-bar-chart","text":"If your bar chart has multiple datasets, you can render it as a stacked bar chart by changing the settings on the X and Y axes to enable stacking, as follows: const options : Chart.ChartOptions = { scales : { xAxes : [{ stacked : true }], yAxes : [{ stacked : true }] } }; In order to render each dataset with a different color, make sure to specify the backgroundColor and borderColor settings for each dataset: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ], fill : false , backgroundColor : 'rgba(255, 99, 132, 0.2)' , // same color for all data elements borderColor : 'rgb(255, 99, 132)' , // same color for all data elements borderWidth : 1 }, { label : 'My Second Dataset' , data : [ 15 , 29 , 30 , 8 , 26 , 35 , 20 ], fill : false , backgroundColor : 'rgba(255, 159, 64, 0.2)' , // same color for all data elements borderColor : 'rgb(255, 159, 64)' , // same color for all data elements borderWidth : 1 } ] };","title":"Stacked Bar Chart"},{"location":"controls/charts/BarChart/#horizontal-bar-chart","text":"To render a horizontal bar, use the following code: < ChartControl type = { ChartType . HorizontalBar } data = { data } options = { options } /> Using the same options as above. Note that horizontal bar charts can also be stacked using the same approach as above.","title":"Horizontal Bar Chart"},{"location":"controls/charts/BarChart/#dataset-properties","text":"Bar charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) For example, the following code will apply the value 'red:' to every element in the dataset. const data : Chart.ChartData = { datasets : [ { label : 'My First Dataset' , data : [ 10 , 20 , 30 , ], backgroundColor : 'red' } }; Whereas the following code will set 10 to backgroundColor 'red' , 20 to 'green' , and 30 to 'blue' . const data : Chart.ChartData = { datasets : [ { label : 'My First Dataset' , data : [ 10 , 20 , 30 , ], backgroundColor : [ 'red' , 'green' , 'blue' ] } }; Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The bar fill color. borderColor Color OR Color[] The bar border color. borderWidth number OR number[] The bar's border width. Measured in pixels. borderSkipped 'bottom' 'left' 'top' 'right' Specifies which border should be hidden when rendering bars. This option is useful when custom-rendering charts. data number[] { t: Date, y: number} The chart's data. Required. hoverBackgroundColor Color OR Color[] The bar's fill color when a mouse hovers over it hoverBorderColor Color OR Color[] The bar's border color when a mouse hovers over it. hoverBorderWidth number OR number[] The bar's border width when a mouse hovers over it.","title":"Dataset Properties"},{"location":"controls/charts/BarChart/#data-structure","text":"","title":"Data Structure"},{"location":"controls/charts/BarChart/#number","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] The chart elements will be rendered in the same order as found in the array.","title":"number[]"},{"location":"controls/charts/BarChart/#time-scales","text":"You can also provide dates and times instead of labels for each data element. Time scales should be provided as t (as in ticks ) and y coordinates: data : [ { \"t\" : new Date ( 'December 1 2018' ), \"y\" : 46 }, { \"t\" : new Date ( 'December 3 2018' ), \"y\" : 9 }, { \"t\" : new Date ( 'December 7 2018' ), \"y\" : 48 }, { \"t\" : new Date ( 'December 10 2018' ), \"y\" : 13 }, { \"t\" : new Date ( 'December 20 2018' ), \"y\" : 12 }, ] Or, if you prefer using moment.js : data : [ { \"t\" : moment ( 'December 1 2018' ). valueOf (), \"y\" : 46 }, { \"t\" : moment ( 'December 3 2018' ). valueOf (), \"y\" : 9 }, { \"t\" : moment ( 'December 7 2018' ). valueOf (), \"y\" : 48 }, { \"t\" : moment ( 'December 10 2018' ). valueOf (), \"y\" : 13 }, { \"t\" : moment ( 'December 20 2018' ). valueOf (), \"y\" : 12 }, ] (add the following to your imports:) import * as moment from 'moment' ; To render horizontal axis as a time series, use the following options: options = {{ scales : { xAxes : [{ type : 'time' , time : { displayFormats : { // choose the scale that applies to your data, // or pass all the scales 'millisecond' : 'MMM DD YYYY' , // use your own date format 'second' : 'MMM DD YYYY' , 'minute' : 'MMM DD YYYY' , 'hour' : 'MMM DD YYYY' , 'day' : 'MMM DD YYYY' , 'week' : 'MMM DD YYYY' , 'month' : 'MMM DD YYYY' , 'quarter' : 'MMM DD YYYY' , 'year' : 'MMM DD YYYY' , } } }] } }} Which will produce the following chart: NOTE: As with regular data elements, you should pass the time scale array in the order that you want them to appear. Otherwise, you will get disappointing results.","title":"Time Scales"},{"location":"controls/charts/BarChart/#configuration","text":"The following configuration options are specific to bar charts: Name Type Default Description barPercentage number 0.9 How much of the category should each bar occupy, in percent. Value should be between 0 and 1. categoryPercentage number 0.8 How much each category should occupy, in percent. Value should be between 0 and 1. barThickness number OR \"flex\" Sets the thickness of each bar. If the default value is used, the bars will be equally sized to match the smallest interval. If number value is provided, the bar width will be set in pixels and barPercentage and categoryPercentage will be ignored. If \"flex\" is used, the widths are calculated automatically based on the previous and following samples so that they take the full available widths without overlap maxBarThickness number Sets the maximum width of every bar. gridLines.offsetGridLines boolean true true , bars will fall between the grid lines; grid lines will shift to the left by half a tick interval. If false , grid line will align with the middle of the bars.","title":"Configuration"},{"location":"controls/charts/BarChart/#for-more-information","text":"For more information on what options are available with Bar charts, refer to the Bar Chart documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/BubbleChart/","text":"ChartControl - Bubble Chart \u00b6 Bubble chart show elements across three dimensions. Each bubble in the chart is located according to the first two dimensions. The size of each bubble represents the thid dimension. Example Usage \u00b6 To create a bubble chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Bubble } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { datasets : [ { label : \"Bubble\" , data : [ { x : 10 , y : 20 , r : 20 }, { x : 85 , y : 50 , r : 35 }, { x : 70 , y : 70 , r : 5 }, { x : 40 , y : 100 , r : 5 }, { x : 50 , y : 50 , r : 12 }, { x : 30 , y : 80 , r : 15 }, { x : 20 , y : 30 , r : 15 }, { x : 40 , y : 10 , r : 10 } ] }] }; // set the options const options : Chart.ChartOptions = { legend : { display : false }, title : { display : true , text : \"My First Bubbles\" } }; return ( < ChartControl type = { ChartType . Bubble } data = { data } options = { options } /> ); Dataset Properties \u00b6 Bubble charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color OR Color[] The bubble's fill color. Default is 'rgba(0,0,0,0.1)' . borderColor Color OR Color[] The bubble's border color. Default is 'rgba(0,0,0,0.1)' . borderWidth number OR number[] The width of the bubble's border. Measured in pixels. Default is 3 . data { x: number, y:number, r: number}[] The data to render. Required. hoverBackgroundColor Color OR Color[] The bubble's background color when a mouse hovers over it. hoverBorderColor Color OR Color[] The bubble's border color when a mouse hovers over it. hoverBorderWidth number OR number[] The bubble's border width when a mouse hovers over it. Default is 1 . hoverRadius number OR number[] The bubble's radius when a mouse hovers over it. Default is 4 . hitRadius number OR number[] The bubble's radius when a mouse click event occurs. Default is 1 . label string The dataset's label pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of bubble. Default is 'circle' rotation number OR number[] The bubble's rotation, in degrees. Default is 0 . radius number OR number[] The bubble's radius. Default is 3 . Data Structure \u00b6 The data property of each dataset item consists of an x , y , and r coordinate. { // X Value x : number , // Y Value y : number , // Bubble radius in pixels r : number } NOTE: Unlike the x and y , the r value is measured in pixels and does not scale with the chart. For More Information \u00b6 For more information on what options are available with Bubble charts, refer to the Bubble Chart documentation on Chart.js .","title":"Bubble Chart"},{"location":"controls/charts/BubbleChart/#chartcontrol-bubble-chart","text":"Bubble chart show elements across three dimensions. Each bubble in the chart is located according to the first two dimensions. The size of each bubble represents the thid dimension.","title":"ChartControl - Bubble Chart"},{"location":"controls/charts/BubbleChart/#example-usage","text":"To create a bubble chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Bubble } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { datasets : [ { label : \"Bubble\" , data : [ { x : 10 , y : 20 , r : 20 }, { x : 85 , y : 50 , r : 35 }, { x : 70 , y : 70 , r : 5 }, { x : 40 , y : 100 , r : 5 }, { x : 50 , y : 50 , r : 12 }, { x : 30 , y : 80 , r : 15 }, { x : 20 , y : 30 , r : 15 }, { x : 40 , y : 10 , r : 10 } ] }] }; // set the options const options : Chart.ChartOptions = { legend : { display : false }, title : { display : true , text : \"My First Bubbles\" } }; return ( < ChartControl type = { ChartType . Bubble } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/BubbleChart/#dataset-properties","text":"Bubble charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color OR Color[] The bubble's fill color. Default is 'rgba(0,0,0,0.1)' . borderColor Color OR Color[] The bubble's border color. Default is 'rgba(0,0,0,0.1)' . borderWidth number OR number[] The width of the bubble's border. Measured in pixels. Default is 3 . data { x: number, y:number, r: number}[] The data to render. Required. hoverBackgroundColor Color OR Color[] The bubble's background color when a mouse hovers over it. hoverBorderColor Color OR Color[] The bubble's border color when a mouse hovers over it. hoverBorderWidth number OR number[] The bubble's border width when a mouse hovers over it. Default is 1 . hoverRadius number OR number[] The bubble's radius when a mouse hovers over it. Default is 4 . hitRadius number OR number[] The bubble's radius when a mouse click event occurs. Default is 1 . label string The dataset's label pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of bubble. Default is 'circle' rotation number OR number[] The bubble's rotation, in degrees. Default is 0 . radius number OR number[] The bubble's radius. Default is 3 .","title":"Dataset Properties"},{"location":"controls/charts/BubbleChart/#data-structure","text":"The data property of each dataset item consists of an x , y , and r coordinate. { // X Value x : number , // Y Value y : number , // Bubble radius in pixels r : number } NOTE: Unlike the x and y , the r value is measured in pixels and does not scale with the chart.","title":"Data Structure"},{"location":"controls/charts/BubbleChart/#for-more-information","text":"For more information on what options are available with Bubble charts, refer to the Bubble Chart documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/DoughnutChart/","text":"ChartControl - Doughnut Chart \u00b6 Doughnut charts are divided into segments, each of which shows the proportional value of the data. Example Usage \u00b6 To create a donut chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Doughnut } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Donut\" } }; return ( < ChartControl type = { ChartType . Doughnut } data = { data } options = { options } /> ); Dataset Properties \u00b6 Doughnut charts allow each dataset to have different configuration properties. Properties are provided as arrays. Settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it. Data Structure \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] Configuration \u00b6 The following configuration options are specific to doughnut charts: Name Type Default Description cutoutPercentage number 50 The percentage of the chart that is cut out of the middle. rotation number -0.5 * Math.PI The angle at which the doughtnut segments start circumference number 2 * Math.PI The total circumference of the donut chart. animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it. For More Information \u00b6 For more information on what options are available with Doughnut charts, refer to the Doughnut and Pie documentation on Chart.js .","title":"Doughnut Chart"},{"location":"controls/charts/DoughnutChart/#chartcontrol-doughnut-chart","text":"Doughnut charts are divided into segments, each of which shows the proportional value of the data.","title":"ChartControl - Doughnut Chart"},{"location":"controls/charts/DoughnutChart/#example-usage","text":"To create a donut chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Doughnut } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Donut\" } }; return ( < ChartControl type = { ChartType . Doughnut } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/DoughnutChart/#dataset-properties","text":"Doughnut charts allow each dataset to have different configuration properties. Properties are provided as arrays. Settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it.","title":"Dataset Properties"},{"location":"controls/charts/DoughnutChart/#data-structure","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ]","title":"Data Structure"},{"location":"controls/charts/DoughnutChart/#configuration","text":"The following configuration options are specific to doughnut charts: Name Type Default Description cutoutPercentage number 50 The percentage of the chart that is cut out of the middle. rotation number -0.5 * Math.PI The angle at which the doughtnut segments start circumference number 2 * Math.PI The total circumference of the donut chart. animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it.","title":"Configuration"},{"location":"controls/charts/DoughnutChart/#for-more-information","text":"For more information on what options are available with Doughnut charts, refer to the Doughnut and Pie documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/LineChart/","text":"ChartControl - Line Chart \u00b6 Line charts represent data values as plotted points on a line. Example Usage \u00b6 To create a line chart, add the ChartControl import: import { ChartControl } from \"@pnp/spfx-controls-react/lib/ChartControl\" ; Then render the ChartControl: < ChartControl type = 'line' data = { data } options = { options } /> Alternatively, you can use the following import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Followed by: < ChartControl type = { ChartType . Line } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : false , lineTension : 0 , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Line Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); Variations \u00b6 Curved lines \u00b6 You can render curved lines instead of straight lines by removing the lineTension setting from each dataset, or by setting it to a value other than 0 . For example, to render the above chart, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : false , //lineTension: 0, -- removed data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Curved Line Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); Area Chart \u00b6 To render an area chart, change the fill setting of the dataset to true . // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : true , lineTension : 0 , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Area Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); If your chart has negative and positive values, you can control where the filled area by setting the fill setting to one of the following value: fill Value Description Sample 'start' Fill from the bottom of the chart 'end' Fill from the top of the chart 'origin' Fill from the 'zero' line Same as true For example, the code below will set the fill value to start : // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : 'start' , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Area Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); Which renders the following chart: Stacked Area Chart \u00b6 If your bar chart has multiple datasets, you can render it as a stacked area chart by changing the settings on the Y axis to enable stacking, as follows: const options : Chart.ChartOptions = { scales : { yAxes : [{ stacked : true }] } }; In order to render each dataset with a different color, make sure to specify the backgroundColor and borderColor settings for each dataset. For example, to render the above chart, use the following code: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : true , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, { label : 'My Second Dataset' , fill : true , lineTension : 0 , data : [ 45 , 49 , 88 , 71 , - 36 , 35 , 60 ], backgroundColor : 'rgba(255, 159, 64, 0.2)' , borderColor : 'rgb(255, 159, 64)' , borderWidth : 1 } ] }; const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Stacked Area Chart\" }, scales : { yAxes : [{ stacked : true }] } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); As with lines, you can set the lineTension value to render curved lines instead of straight lines: In addition to the fill values listed above, you can specify how each dataset fill: fill Value Type Description Sample Values number Fill to dataset by its absolute index 1 , 2 , 3 , ... string Fill to dataset by its relative index '-3' , '-2' , '-1' , '+1' , '+2' , '+3' , ... For example, if you use declare your datasets with the following fill values: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : \"start\" , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, { label : 'My Second Dataset' , fill : '-1' , lineTension : 0 , data : [ 45 , 49 , 88 , 71 , - 36 , 35 , 60 ], backgroundColor : 'rgba(255, 159, 64, 0.2)' , borderColor : 'rgb(255, 159, 64)' , borderWidth : 1 } ] }; Will cause the first dataset to fill from the bottom of the chart, while the second dataset will fill to the previous dataset (by it's relative index of -1 ) Dataset Properties \u00b6 Line charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . cubicInterpolationMode 'default' 'monotone' Determins which algorithm is used to interpolate a smooth curve between data points. data number[] Point[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it. showLine boolean The point's radius width when a mouse hovers over it. spanGaps boolean The point's radius width when a mouse hovers over it. steppedLine boolean 'before' 'after' Determines whether the line is shown as a stepped line. Any value but false overrides the lineTension setting. Data Structure \u00b6 number[] \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , - 10 , 33 , - 47 ] The chart elements will be rendered in the same order as found in the array. Point[] \u00b6 You can also provide data elements with x and y coordinates: data : [{ x : 10 , y : 20 }, { x : 15 , y : 10 }] Point Configuration \u00b6 Point elements can be configured to change their appearance using the following configuration options: Name Type Default Description radius number 3 Point radius. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' 'circle' Style of point. rotation number 0 Rotation of the point, in degrees. backgroundColor Color 'rgba(0,0,0,0.1) Fill color. borderWidth number 1 Stroke width. borderColor Color 'rgba(0,0,0,0.1) Stroke color. hitRadius number 1 Extra radius added around the point to make it easier to detect mouse events. hoverRadius number 4 Point radius, when mouse hovers over point. hoverBorderWidth number 1 Stroke width, when mouse hovers over point. Configuration \u00b6 The following configuration options are specific to line charts: Name Type Default Description showLines boolean true Indicates whether a line will be drawn between each data point. A value of false will not render lines. spanGaps boolean false Indicates whether invalid number values ( NaN ) will cause a break in the line . A value of false will not span data gaps and cause a break in the line. For More Information \u00b6 For more information on what options are available with Line charts, refer to the Line Chart documentation on Chart.js .","title":"Line Chart"},{"location":"controls/charts/LineChart/#chartcontrol-line-chart","text":"Line charts represent data values as plotted points on a line.","title":"ChartControl - Line Chart"},{"location":"controls/charts/LineChart/#example-usage","text":"To create a line chart, add the ChartControl import: import { ChartControl } from \"@pnp/spfx-controls-react/lib/ChartControl\" ; Then render the ChartControl: < ChartControl type = 'line' data = { data } options = { options } /> Alternatively, you can use the following import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Followed by: < ChartControl type = { ChartType . Line } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : false , lineTension : 0 , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Line Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/LineChart/#variations","text":"","title":"Variations"},{"location":"controls/charts/LineChart/#curved-lines","text":"You can render curved lines instead of straight lines by removing the lineTension setting from each dataset, or by setting it to a value other than 0 . For example, to render the above chart, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : false , //lineTension: 0, -- removed data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Curved Line Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> );","title":"Curved lines"},{"location":"controls/charts/LineChart/#area-chart","text":"To render an area chart, change the fill setting of the dataset to true . // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : true , lineTension : 0 , data : [ 65 , 59 , 80 , 81 , 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Area Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); If your chart has negative and positive values, you can control where the filled area by setting the fill setting to one of the following value: fill Value Description Sample 'start' Fill from the bottom of the chart 'end' Fill from the top of the chart 'origin' Fill from the 'zero' line Same as true For example, the code below will set the fill value to start : // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : 'start' , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Area Chart\" } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); Which renders the following chart:","title":"Area Chart"},{"location":"controls/charts/LineChart/#stacked-area-chart","text":"If your bar chart has multiple datasets, you can render it as a stacked area chart by changing the settings on the Y axis to enable stacking, as follows: const options : Chart.ChartOptions = { scales : { yAxes : [{ stacked : true }] } }; In order to render each dataset with a different color, make sure to specify the backgroundColor and borderColor settings for each dataset. For example, to render the above chart, use the following code: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : true , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, { label : 'My Second Dataset' , fill : true , lineTension : 0 , data : [ 45 , 49 , 88 , 71 , - 36 , 35 , 60 ], backgroundColor : 'rgba(255, 159, 64, 0.2)' , borderColor : 'rgb(255, 159, 64)' , borderWidth : 1 } ] }; const options : Chart.ChartOptions = { legend : { display : false , }, title : { display : true , text : \"My First Stacked Area Chart\" }, scales : { yAxes : [{ stacked : true }] } }; return ( < ChartControl type = { ChartType . Line } data = { data } options = { options } /> ); As with lines, you can set the lineTension value to render curved lines instead of straight lines: In addition to the fill values listed above, you can specify how each dataset fill: fill Value Type Description Sample Values number Fill to dataset by its absolute index 1 , 2 , 3 , ... string Fill to dataset by its relative index '-3' , '-2' , '-1' , '+1' , '+2' , '+3' , ... For example, if you use declare your datasets with the following fill values: const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , fill : \"start\" , lineTension : 0 , data : [ - 65 , - 59 , 80 , 81 , - 56 , 55 , 40 ], backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , borderWidth : 1 }, { label : 'My Second Dataset' , fill : '-1' , lineTension : 0 , data : [ 45 , 49 , 88 , 71 , - 36 , 35 , 60 ], backgroundColor : 'rgba(255, 159, 64, 0.2)' , borderColor : 'rgb(255, 159, 64)' , borderWidth : 1 } ] }; Will cause the first dataset to fill from the bottom of the chart, while the second dataset will fill to the previous dataset (by it's relative index of -1 )","title":"Stacked Area Chart"},{"location":"controls/charts/LineChart/#dataset-properties","text":"Line charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . cubicInterpolationMode 'default' 'monotone' Determins which algorithm is used to interpolate a smooth curve between data points. data number[] Point[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it. showLine boolean The point's radius width when a mouse hovers over it. spanGaps boolean The point's radius width when a mouse hovers over it. steppedLine boolean 'before' 'after' Determines whether the line is shown as a stepped line. Any value but false overrides the lineTension setting.","title":"Dataset Properties"},{"location":"controls/charts/LineChart/#data-structure","text":"","title":"Data Structure"},{"location":"controls/charts/LineChart/#number","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , - 10 , 33 , - 47 ] The chart elements will be rendered in the same order as found in the array.","title":"number[]"},{"location":"controls/charts/LineChart/#point","text":"You can also provide data elements with x and y coordinates: data : [{ x : 10 , y : 20 }, { x : 15 , y : 10 }]","title":"Point[]"},{"location":"controls/charts/LineChart/#point-configuration","text":"Point elements can be configured to change their appearance using the following configuration options: Name Type Default Description radius number 3 Point radius. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' 'circle' Style of point. rotation number 0 Rotation of the point, in degrees. backgroundColor Color 'rgba(0,0,0,0.1) Fill color. borderWidth number 1 Stroke width. borderColor Color 'rgba(0,0,0,0.1) Stroke color. hitRadius number 1 Extra radius added around the point to make it easier to detect mouse events. hoverRadius number 4 Point radius, when mouse hovers over point. hoverBorderWidth number 1 Stroke width, when mouse hovers over point.","title":"Point Configuration"},{"location":"controls/charts/LineChart/#configuration","text":"The following configuration options are specific to line charts: Name Type Default Description showLines boolean true Indicates whether a line will be drawn between each data point. A value of false will not render lines. spanGaps boolean false Indicates whether invalid number values ( NaN ) will cause a break in the line . A value of false will not span data gaps and cause a break in the line.","title":"Configuration"},{"location":"controls/charts/LineChart/#for-more-information","text":"For more information on what options are available with Line charts, refer to the Line Chart documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/PieChart/","text":"ChartControl - Pie Chart \u00b6 Pie charts are divided into segments, each of which shows the proportional value of the data. Example Usage \u00b6 To create a pie chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Pie } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 10 , 50 , 20 , 60 , 30 , 70 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; return ( < ChartControl type = { ChartType . Pie } data = { data } options = { options } /> ); Variations \u00b6 Half-Moon Pie charts \u00b6 By default, pie charts (and doughnut charts) render a whole circle. You can change the chart's circumference option to render partial circles. The default circumference value is 2 * Math.PI . To render a half-moon, specify a half value (i.e.: Math.PI ), as follows: const options : Chart.ChartOptions = { circumference : Math.PI , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; Which renders the following half-moon: To rotate the pie chart 90 degrees to the left, specify a rotation value in the chart's options. For example, to render the horizontal half-moon chart shown at the top of this section, use the following options: const options : Chart.ChartOptions = { circumference : Math.PI , rotation : - 1 * Math . PI , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; Doughnut charts \u00b6 Technically, doughnut charts and pie charts are derived from the same class in Chart.js , where a doughnut chart's cutoutPercentage is set to 50. If you wish to render simple doughnut charts, use the Doughnut Chart type . However, if you wish to customize how the pie/doughtnut chart is rendered, you can set the cutout percentage to a different value. For example, you can use the following code to render a custom \"fuel-gauge\" chart: const options : Chart.ChartOptions = { circumference : 1 * Math . PI , rotation : 1 * Math . PI , cutoutPercentage : 60 , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; Will produce the following chart: Dataset Properties \u00b6 Pie charts allow each dataset to have different configuration properties. Properties are provided as arrays. Settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it. Data Structure \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] Configuration \u00b6 The following configuration options are specific to pie charts: Name Type Default Description cutoutPercentage number 50 The percentage of the chart that is cut out of the middle. rotation number -0.5 * Math.PI The angle at which the pie segments start circumference number 2 * Math.PI The total circumference of the donut chart. animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it. For More Information \u00b6 For more information on what options are available with Pie charts, refer to the Doughtnut and Pie documentation on Chart.js .","title":"Pie Chart"},{"location":"controls/charts/PieChart/#chartcontrol-pie-chart","text":"Pie charts are divided into segments, each of which shows the proportional value of the data.","title":"ChartControl - Pie Chart"},{"location":"controls/charts/PieChart/#example-usage","text":"To create a pie chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Pie } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 10 , 50 , 20 , 60 , 30 , 70 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; return ( < ChartControl type = { ChartType . Pie } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/PieChart/#variations","text":"","title":"Variations"},{"location":"controls/charts/PieChart/#half-moon-pie-charts","text":"By default, pie charts (and doughnut charts) render a whole circle. You can change the chart's circumference option to render partial circles. The default circumference value is 2 * Math.PI . To render a half-moon, specify a half value (i.e.: Math.PI ), as follows: const options : Chart.ChartOptions = { circumference : Math.PI , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; Which renders the following half-moon: To rotate the pie chart 90 degrees to the left, specify a rotation value in the chart's options. For example, to render the horizontal half-moon chart shown at the top of this section, use the following options: const options : Chart.ChartOptions = { circumference : Math.PI , rotation : - 1 * Math . PI , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } };","title":"Half-Moon Pie charts"},{"location":"controls/charts/PieChart/#doughnut-charts","text":"Technically, doughnut charts and pie charts are derived from the same class in Chart.js , where a doughnut chart's cutoutPercentage is set to 50. If you wish to render simple doughnut charts, use the Doughnut Chart type . However, if you wish to customize how the pie/doughtnut chart is rendered, you can set the cutout percentage to a different value. For example, you can use the following code to render a custom \"fuel-gauge\" chart: const options : Chart.ChartOptions = { circumference : 1 * Math . PI , rotation : 1 * Math . PI , cutoutPercentage : 60 , legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Pie\" } }; Will produce the following chart:","title":"Doughnut charts"},{"location":"controls/charts/PieChart/#dataset-properties","text":"Pie charts allow each dataset to have different configuration properties. Properties are provided as arrays. Settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it.","title":"Dataset Properties"},{"location":"controls/charts/PieChart/#data-structure","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ]","title":"Data Structure"},{"location":"controls/charts/PieChart/#configuration","text":"The following configuration options are specific to pie charts: Name Type Default Description cutoutPercentage number 50 The percentage of the chart that is cut out of the middle. rotation number -0.5 * Math.PI The angle at which the pie segments start circumference number 2 * Math.PI The total circumference of the donut chart. animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it.","title":"Configuration"},{"location":"controls/charts/PieChart/#for-more-information","text":"For more information on what options are available with Pie charts, refer to the Doughtnut and Pie documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/PolarAreaChart/","text":"ChartControl - Polar Chart \u00b6 Polar charts are similar to pie charts, except that each segment has the same angle, and the radius of each segment differs depending on the value. Example Usage \u00b6 To create a polar area chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . PolarArea } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 10 , 50 , 20 , 60 , 30 , 70 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Polar\" } }; return ( < ChartControl type = { ChartType . PolarArea } data = { data } options = { options } /> ); Dataset Properties \u00b6 Polar area charts allow each dataset to have different configuration properties. Properties are provided as arrays. The settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it. Data Structure \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] Configuration \u00b6 The following configuration options are specific to polar area charts: Name Type Default Description rotation number -0.5 * Math.PI The angle at which the polar segments start animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it. For More Information \u00b6 For more information on what options are available with Polar Area charts, refer to the Polar Area documentation on Chart.js .","title":"Polar Area Chart"},{"location":"controls/charts/PolarAreaChart/#chartcontrol-polar-chart","text":"Polar charts are similar to pie charts, except that each segment has the same angle, and the radius of each segment differs depending on the value.","title":"ChartControl - Polar Chart"},{"location":"controls/charts/PolarAreaChart/#example-usage","text":"To create a polar area chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . PolarArea } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ 'January' , 'February' , 'March' , 'April' , 'May' , 'June' , 'July' ], datasets : [ { label : 'My First Dataset' , data : [ 10 , 50 , 20 , 60 , 30 , 70 , 40 ] } ] }; // set the options const options : Chart.ChartOptions = { legend : { display : true , position : \"left\" }, title : { display : true , text : \"My First Polar\" } }; return ( < ChartControl type = { ChartType . PolarArea } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/PolarAreaChart/#dataset-properties","text":"Polar area charts allow each dataset to have different configuration properties. Properties are provided as arrays. The settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description backgroundColor Color[] The segment's fill color. borderColor Color[] The segment's border color. borderWidth number[] The segment's border width. Measured in pixels. data number[] The chart's data. Required. hoverBackgroundColor Color[] The segment's fill color when a mouse hovers over it hoverBorderColor Color[] The segment's border color when a mouse hovers over it. hoverBorderWidth number[] The segment's border width when a mouse hovers over it.","title":"Dataset Properties"},{"location":"controls/charts/PolarAreaChart/#data-structure","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ]","title":"Data Structure"},{"location":"controls/charts/PolarAreaChart/#configuration","text":"The following configuration options are specific to polar area charts: Name Type Default Description rotation number -0.5 * Math.PI The angle at which the polar segments start animation.animateRotate boolean true true will animate the chart while rotating it. animation.animateScale boolean false true will animate the chart while scaling it.","title":"Configuration"},{"location":"controls/charts/PolarAreaChart/#for-more-information","text":"For more information on what options are available with Polar Area charts, refer to the Polar Area documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/RadarChart/","text":"ChartControl - Radar Chart \u00b6 Radar charts are best used when comparing points of two or more datasets. Example Usage \u00b6 To create a radar chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Radar } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ \"Eating\" , \"Drinking\" , \"Sleeping\" , \"Designing\" , \"Coding\" , \"Cycling\" , \"Running\" ], datasets : [ // It is better to use multiple datasets for radar charts { label : \"My First Dataset\" , data : [ 65 , 59 , 90 , 81 , 56 , 55 , 40 ], fill : true , // semi-transparent colors are best backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , pointBackgroundColor : \"rgb(255, 99, 132)\" , pointBorderColor : \"#fff\" , pointHoverBackgroundColor : \"#fff\" , pointHoverBorderColor : \"rgb(255, 99, 132)\" }, { label : \"My Second Dataset\" , data : [ 28 , 48 , 40 , 19 , 96 , 27 , 100 ], fill : true , backgroundColor : \"rgba(54, 162, 235, 0.2)\" , borderColor : \"rgb(54, 162, 235)\" , pointBackgroundColor : \"rgb(54, 162, 235)\" , pointBorderColor : \"#fff\" , pointHoverBackgroundColor : \"#fff\" , pointHoverBorderColor : \"rgb(54, 162, 235)\" }] }; // set the options const options : Chart.ChartOptions = { // Using an aspect ratio of 1 will render a square chart area aspectRatio : 1 , elements : { line : { tension : 0 , borderWidth : 3 } } }; // render the chart return ( < ChartControl type = { ChartType . Radar } data = { data } options = { options } /> ); Dataset Properties \u00b6 Radar charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . data number[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it. Data Structure \u00b6 The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ] For More Information \u00b6 For more information on what options are available with Radar charts, refer to the Radar documentation on Chart.js .","title":"Radar Chart"},{"location":"controls/charts/RadarChart/#chartcontrol-radar-chart","text":"Radar charts are best used when comparing points of two or more datasets.","title":"ChartControl - Radar Chart"},{"location":"controls/charts/RadarChart/#example-usage","text":"To create a radar chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Radar } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { labels : [ \"Eating\" , \"Drinking\" , \"Sleeping\" , \"Designing\" , \"Coding\" , \"Cycling\" , \"Running\" ], datasets : [ // It is better to use multiple datasets for radar charts { label : \"My First Dataset\" , data : [ 65 , 59 , 90 , 81 , 56 , 55 , 40 ], fill : true , // semi-transparent colors are best backgroundColor : \"rgba(255, 99, 132, 0.2)\" , borderColor : \"rgb(255, 99, 132)\" , pointBackgroundColor : \"rgb(255, 99, 132)\" , pointBorderColor : \"#fff\" , pointHoverBackgroundColor : \"#fff\" , pointHoverBorderColor : \"rgb(255, 99, 132)\" }, { label : \"My Second Dataset\" , data : [ 28 , 48 , 40 , 19 , 96 , 27 , 100 ], fill : true , backgroundColor : \"rgba(54, 162, 235, 0.2)\" , borderColor : \"rgb(54, 162, 235)\" , pointBackgroundColor : \"rgb(54, 162, 235)\" , pointBorderColor : \"#fff\" , pointHoverBackgroundColor : \"#fff\" , pointHoverBorderColor : \"rgb(54, 162, 235)\" }] }; // set the options const options : Chart.ChartOptions = { // Using an aspect ratio of 1 will render a square chart area aspectRatio : 1 , elements : { line : { tension : 0 , borderWidth : 3 } } }; // render the chart return ( < ChartControl type = { ChartType . Radar } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/RadarChart/#dataset-properties","text":"Radar charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . data number[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it.","title":"Dataset Properties"},{"location":"controls/charts/RadarChart/#data-structure","text":"The data property of each dataset item consists of an array of numbers. Each point in the array corresponds to the matching label on the x axis: data : [ 20 , 10 , 33 , 47 ]","title":"Data Structure"},{"location":"controls/charts/RadarChart/#for-more-information","text":"For more information on what options are available with Radar charts, refer to the Radar documentation on Chart.js .","title":"For More Information"},{"location":"controls/charts/ScatterChart/","text":"ChartControl - Scatter Chart \u00b6 Scatter charts are similar to line charts, except that the X axis (the horizontal axis) uses data values. Unlike other charts, scatter charts use x and y coordinates. Example Usage \u00b6 To create a scatter chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Scatter } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { datasets : [{ label : 'Scatter Dataset' , data : [ { x : - 10 , y : 0 }, { x : 0 , y : 10 }, { x : 6 , y : 4 }, { x : 2 , y : 6 }, { x : - 4 , y : 7 }, { x : - 8 , y : 5 }, { x : 10 , y : 5 }] }] }; // set the options const options : Chart.ChartOptions = { scales : { xAxes : [{ type : 'linear' , position : 'bottom' }] } }; return ( < ChartControl type = { ChartType . Scatter } data = { data } options = { options } /> ); Dataset Properties \u00b6 Scatter charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . cubicInterpolationMode 'default' 'monotone' Determins which algorithm is used to interpolate a smooth curve between data points. data Point[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it. showLine boolean The point's radius width when a mouse hovers over it. spanGaps boolean The point's radius width when a mouse hovers over it. steppedLine boolean 'before' 'after' Determines whether the line is shown as a stepped line. Any value but false overrides the lineTension setting. Data Structure \u00b6 The data property of each dataset item consists of an array of points. Each point in the array consist of an x and y coordinate. data : [{ x : 10 , y : 20 }, { x : 15 , y : 10 }] Point Configuration \u00b6 Point elements can be configured to change their appearance using the following configuration options: Name Type Default Description radius number 3 Point radius. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' 'circle' Style of point. rotation number 0 Rotation of the point, in degrees. backgroundColor Color 'rgba(0,0,0,0.1) Fill color. borderWidth number 1 Stroke width. borderColor Color 'rgba(0,0,0,0.1) Stroke color. hitRadius number 1 Extra radius added around the point to make it easier to detect mouse events. hoverRadius number 4 Point radius, when mouse hovers over point. hoverBorderWidth number 1 Stroke width, when mouse hovers over point. You can change the point configuration in the chart via the options.elements.point configuration. For example, to render the above chart, use the following code: const options : Chart.ChartOptions = { elements : { point : { pointStyle : \"triangle\" , radius : 10 , hoverRadius : 15 } }, scales : { xAxes : [{ type : 'linear' , position : 'bottom' }] } }; You can also control point configurations at the dataset level. TypeScript const data: Chart.ChartData = { datasets: [{ label: 'Triangle', data: [ { x: -10, y: 0 }, { x: 0, y: 10 }], pointStyle: \"triangle\", backgroundColor: 'red' }, { label: 'Rectangle', data: [ { x: -6, y: 6 }, { x: -4, y: 4 }], pointStyle: \"rectRounded\", backgroundColor: 'green' }, { label: 'Circle', data: [ { x: 2, y: 6 }, { x: 8, y: 2 } ], pointStyle: \"circle\", backgroundColor: 'blue' } ] }; Which renders the following chart: For More Information \u00b6 For more information on what options are available with Scatter charts, refer to the Scatter documentation on Chart.js .","title":"Scatter Chart"},{"location":"controls/charts/ScatterChart/#chartcontrol-scatter-chart","text":"Scatter charts are similar to line charts, except that the X axis (the horizontal axis) uses data values. Unlike other charts, scatter charts use x and y coordinates.","title":"ChartControl - Scatter Chart"},{"location":"controls/charts/ScatterChart/#example-usage","text":"To create a scatter chart, add the ChartControl import: import { ChartControl , ChartType } from '@pnp/spfx-controls-react/lib/ChartControl' ; Then render the ChartControl: < ChartControl type = { ChartType . Scatter } data = { data } options = { options } /> For example, to render the chart above, use the following code: // set the data const data : Chart.ChartData = { datasets : [{ label : 'Scatter Dataset' , data : [ { x : - 10 , y : 0 }, { x : 0 , y : 10 }, { x : 6 , y : 4 }, { x : 2 , y : 6 }, { x : - 4 , y : 7 }, { x : - 8 , y : 5 }, { x : 10 , y : 5 }] }] }; // set the options const options : Chart.ChartOptions = { scales : { xAxes : [{ type : 'linear' , position : 'bottom' }] } }; return ( < ChartControl type = { ChartType . Scatter } data = { data } options = { options } /> );","title":"Example Usage"},{"location":"controls/charts/ScatterChart/#dataset-properties","text":"Scatter charts allow each dataset to have different configuration properties. Some properties can be provided as arrays. When arrays are provided, the settings in the array will be applied to each data element in the same order (e.g.: first value applies to first element, second value to second element, etc.) Name Type Description label string Dataset label. Appears in the legend and tooltips. xAxisID string The axis ID for the X axis. If not specified, the dataset will be rendered on the first available X axis. If an ID is specified, the dataset will be rendered on that axis yAxisID string The axis ID for the Y axis. If not specified, the dataset will be rendered on the first available Y axis. If an ID is specified, the dataset will be rendered on that axis backgroundColor Color OR Color[] The fill color under the line. borderColor Color OR Color[] The color of the line. borderWidth number OR number[] The width of the line. Measured in pixels. borderDash number[] The length and spacing of dashes. Consist of an array of numbers that specify distances to alternately draw a line and a gap. If array length is odd, elements of the array will be repeated. If an empty array is provided, lines will be solid. borderDashOffset number The distance to offset dashes. borderCapStyle 'butt' 'round' 'square' Specifies the end of the lines. Default is 'butt '. borderJoinStyle 'bevel' 'round' 'miter' Determines the shape used to join two line segments where they meet. Default is 'miter' . cubicInterpolationMode 'default' 'monotone' Determins which algorithm is used to interpolate a smooth curve between data points. data Point[] The chart's data. Required. fill false number string 'start' 'end' 'origin' Controls how the dataset's area is filled. lineTension number Ttension of the Bezier curve line. 0 renders straight lines. Ignored if cubicInterpolationMode is set to monotone . pointBackgroundColor Color OR Color[] The point's fill color. pointBorderColor Color OR Color[] The point's border color. pointBorderWidth number OR number[] The point's border width. pointRadius number OR number[] The point's fill color. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' HTMLImageElement HTMLCanvasElement HTMLImageElement[] HTMLCanvasElement[] Style of point. pointRotation number OR number[] The point's roation, in degrees. pointHitRadius number OR number[] The point's border width. pointHoverBackgroundColor Color OR Color[] The point's background color when a mouse hovers over it. pointHoverBorderColor Color OR Color[] The point's border color when a mouse hovers over it. pointHoverBorderWidth number OR number[] The point's border width when a mouse hovers over it. pointHoverRadius number OR number[] The point's radius width when a mouse hovers over it. showLine boolean The point's radius width when a mouse hovers over it. spanGaps boolean The point's radius width when a mouse hovers over it. steppedLine boolean 'before' 'after' Determines whether the line is shown as a stepped line. Any value but false overrides the lineTension setting.","title":"Dataset Properties"},{"location":"controls/charts/ScatterChart/#data-structure","text":"The data property of each dataset item consists of an array of points. Each point in the array consist of an x and y coordinate. data : [{ x : 10 , y : 20 }, { x : 15 , y : 10 }]","title":"Data Structure"},{"location":"controls/charts/ScatterChart/#point-configuration","text":"Point elements can be configured to change their appearance using the following configuration options: Name Type Default Description radius number 3 Point radius. pointStyle 'circle' 'cross' 'crossRot' 'dash' 'line' 'rect' 'rectRounded' 'rectRot' 'star' 'triangle' 'circle' Style of point. rotation number 0 Rotation of the point, in degrees. backgroundColor Color 'rgba(0,0,0,0.1) Fill color. borderWidth number 1 Stroke width. borderColor Color 'rgba(0,0,0,0.1) Stroke color. hitRadius number 1 Extra radius added around the point to make it easier to detect mouse events. hoverRadius number 4 Point radius, when mouse hovers over point. hoverBorderWidth number 1 Stroke width, when mouse hovers over point. You can change the point configuration in the chart via the options.elements.point configuration. For example, to render the above chart, use the following code: const options : Chart.ChartOptions = { elements : { point : { pointStyle : \"triangle\" , radius : 10 , hoverRadius : 15 } }, scales : { xAxes : [{ type : 'linear' , position : 'bottom' }] } }; You can also control point configurations at the dataset level. TypeScript const data: Chart.ChartData = { datasets: [{ label: 'Triangle', data: [ { x: -10, y: 0 }, { x: 0, y: 10 }], pointStyle: \"triangle\", backgroundColor: 'red' }, { label: 'Rectangle', data: [ { x: -6, y: 6 }, { x: -4, y: 4 }], pointStyle: \"rectRounded\", backgroundColor: 'green' }, { label: 'Circle', data: [ { x: 2, y: 6 }, { x: 8, y: 2 } ], pointStyle: \"circle\", backgroundColor: 'blue' } ] }; Which renders the following chart:","title":"Point Configuration"},{"location":"controls/charts/ScatterChart/#for-more-information","text":"For more information on what options are available with Scatter charts, refer to the Scatter documentation on Chart.js .","title":"For More Information"},{"location":"controls/fields/FieldAttachmentsRenderer/","text":"FieldAttachmentsRenderer control \u00b6 This control renders Clip icon based on the provided count property is defined and greater than 0. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields \u00b6 Attachments How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldAttachmentsRenderer } from \"@pnp/spfx-controls-react/lib/FieldAttachmentsRenderer\" ; Use the FieldAttachmentsRenderer control in your code as follows: < FieldAttachmentsRenderer count = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldAttachmentsRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. count number no Amount of attachments. The icon is displayed if the property is defined and greater than 0","title":"FieldAttachmentsRenderer"},{"location":"controls/fields/FieldAttachmentsRenderer/#fieldattachmentsrenderer-control","text":"This control renders Clip icon based on the provided count property is defined and greater than 0. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldAttachmentsRenderer control"},{"location":"controls/fields/FieldAttachmentsRenderer/#covered-fields","text":"Attachments","title":"Covered Fields"},{"location":"controls/fields/FieldAttachmentsRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldAttachmentsRenderer } from \"@pnp/spfx-controls-react/lib/FieldAttachmentsRenderer\" ; Use the FieldAttachmentsRenderer control in your code as follows: < FieldAttachmentsRenderer count = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldAttachmentsRenderer/#implementation","text":"The FieldAttachmentsRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. count number no Amount of attachments. The icon is displayed if the property is defined and greater than 0","title":"Implementation"},{"location":"controls/fields/FieldDateRenderer/","text":"FieldDateRenderer control \u00b6 This control renders date string as a simple text. Covered Fields \u00b6 Date and Time How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldDateRenderer } from \"@pnp/spfx-controls-react/lib/FieldDateRenderer\" ; Use the FieldDateRenderer control in your code as follows: < FieldDateRenderer text = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Note: FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to FieldRendererHelper implementation. Implementation \u00b6 The FieldDateRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"FieldDateRenderer"},{"location":"controls/fields/FieldDateRenderer/#fielddaterenderer-control","text":"This control renders date string as a simple text.","title":"FieldDateRenderer control"},{"location":"controls/fields/FieldDateRenderer/#covered-fields","text":"Date and Time","title":"Covered Fields"},{"location":"controls/fields/FieldDateRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldDateRenderer } from \"@pnp/spfx-controls-react/lib/FieldDateRenderer\" ; Use the FieldDateRenderer control in your code as follows: < FieldDateRenderer text = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Note: FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to FieldRendererHelper implementation.","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldDateRenderer/#implementation","text":"The FieldDateRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"Implementation"},{"location":"controls/fields/FieldFileTypeRenderer/","text":"FieldFileTypeRenderer control \u00b6 This control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields \u00b6 Type (DocIcon) How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldFileTypeRenderer } from \"@pnp/spfx-controls-react/lib/FieldFileTypeRenderer\" ; Use the FieldFileTypeRenderer control in your code as follows: < FieldFileTypeRenderer path = { fileLeafRef } isFolder = { false } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldFileTypeRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. path string yes document/file path isFolder boolean no true if the icon should be rendered for a folder, not file","title":"FieldFileTypeRenderer"},{"location":"controls/fields/FieldFileTypeRenderer/#fieldfiletyperenderer-control","text":"This control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldFileTypeRenderer control"},{"location":"controls/fields/FieldFileTypeRenderer/#covered-fields","text":"Type (DocIcon)","title":"Covered Fields"},{"location":"controls/fields/FieldFileTypeRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldFileTypeRenderer } from \"@pnp/spfx-controls-react/lib/FieldFileTypeRenderer\" ; Use the FieldFileTypeRenderer control in your code as follows: < FieldFileTypeRenderer path = { fileLeafRef } isFolder = { false } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldFileTypeRenderer/#implementation","text":"The FieldFileTypeRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. path string yes document/file path isFolder boolean no true if the icon should be rendered for a folder, not file","title":"Implementation"},{"location":"controls/fields/FieldLookupRenderer/","text":"FieldLookupRenderer control \u00b6 This control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields \u00b6 Lookup (single, multi) How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldLookupRenderer } from \"@pnp/spfx-controls-react/lib/FieldLookupRenderer\" ; Use the FieldLookupRenderer control in your code as follows: < FieldLookupRenderer lookups = { event . fieldValue } fieldId = { '<field-guid>' } context = { this . context } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldLookupRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. lookups ISPFieldLookupValue[] yes Lookup field values. dispFormUrl boolean no Url of Display form for the list that is referenced by the lookup. onClick (args: ILookupClickEventArgs) => {} no Custom event handler of lookup item click. If not set the dialog with Display Form will be shown. fieldId string Field's id context IContext Customizer context. Must be providede if fieldId is set","title":"FieldLookupRenderer"},{"location":"controls/fields/FieldLookupRenderer/#fieldlookuprenderer-control","text":"This control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldLookupRenderer control"},{"location":"controls/fields/FieldLookupRenderer/#covered-fields","text":"Lookup (single, multi)","title":"Covered Fields"},{"location":"controls/fields/FieldLookupRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldLookupRenderer } from \"@pnp/spfx-controls-react/lib/FieldLookupRenderer\" ; Use the FieldLookupRenderer control in your code as follows: < FieldLookupRenderer lookups = { event . fieldValue } fieldId = { '<field-guid>' } context = { this . context } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldLookupRenderer/#implementation","text":"The FieldLookupRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. lookups ISPFieldLookupValue[] yes Lookup field values. dispFormUrl boolean no Url of Display form for the list that is referenced by the lookup. onClick (args: ILookupClickEventArgs) => {} no Custom event handler of lookup item click. If not set the dialog with Display Form will be shown. fieldId string Field's id context IContext Customizer context. Must be providede if fieldId is set","title":"Implementation"},{"location":"controls/fields/FieldNameRenderer/","text":"FieldNameRenderer control \u00b6 This control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon. Note: The Name column in document libraries is marked as noneditable. See this issue for details. Note Glimmer icon displays correctly starting with SharePoint Framework v1.4 Covered Fields \u00b6 Document Name (LinkFilename, LinkFilenameNomenu, FileLieafRef) How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldNameRenderer } from \"@pnp/spfx-controls-react/lib/FieldNameRenderer\" ; Use the FieldNameRenderer control in your code as follows: < FieldNameRenderer text = { 'Technical Requirements' } isLink = { true } isNew = { false } filePath = { 'https://contoso.sharepoint.com/Documents/tech-requirements.pdf' } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldNameRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. isNew boolean no True if the document is new. filePath string no Path to the document. hasPreview boolean no True if the document has preview and link href should be constructed to display the preview (instead of direct document's link). The flag works only if onClick property is NOT defined. onClick (args: INameClickEventArgs) => {} no Custom handler for link click. If not set link click will lead to rendering document preview. Works if isLink is set to true onDoubleClick (args: INameClickEventArgs) => {} no Custom handler for link double click. If not set link If not set link will use OOTB behavior. Works if isLink is set to true","title":"FieldNameRenderer"},{"location":"controls/fields/FieldNameRenderer/#fieldnamerenderer-control","text":"This control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon. Note: The Name column in document libraries is marked as noneditable. See this issue for details. Note Glimmer icon displays correctly starting with SharePoint Framework v1.4","title":"FieldNameRenderer control"},{"location":"controls/fields/FieldNameRenderer/#covered-fields","text":"Document Name (LinkFilename, LinkFilenameNomenu, FileLieafRef)","title":"Covered Fields"},{"location":"controls/fields/FieldNameRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldNameRenderer } from \"@pnp/spfx-controls-react/lib/FieldNameRenderer\" ; Use the FieldNameRenderer control in your code as follows: < FieldNameRenderer text = { 'Technical Requirements' } isLink = { true } isNew = { false } filePath = { 'https://contoso.sharepoint.com/Documents/tech-requirements.pdf' } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldNameRenderer/#implementation","text":"The FieldNameRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. isNew boolean no True if the document is new. filePath string no Path to the document. hasPreview boolean no True if the document has preview and link href should be constructed to display the preview (instead of direct document's link). The flag works only if onClick property is NOT defined. onClick (args: INameClickEventArgs) => {} no Custom handler for link click. If not set link click will lead to rendering document preview. Works if isLink is set to true onDoubleClick (args: INameClickEventArgs) => {} no Custom handler for link double click. If not set link If not set link will use OOTB behavior. Works if isLink is set to true","title":"Implementation"},{"location":"controls/fields/FieldRendererHelper/","text":"FieldRendererHelper class \u00b6 FieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters. How to use this class in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldRendererHelper } from \"@pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper\" ; Use the FieldRendererHelper.getFieldRenderer method to asynchronously request proper React control (As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render ): public componentWillMount() { FieldRendererHelper . getFieldRenderer ( fieldValue , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer => { // update state to re-render the Field Customizer this . setState ({ fieldRenderer : fieldRenderer }); }); } Render the requestted fieldRenderer : public render () : React . ReactElement < {} > { return ( < div className = { styles . cell } > { this . state . fieldRenderer } < /div> ); } Implementation \u00b6 The FieldRendererHelper class contains single method getFieldRenderer with next signature: public static getFieldRenderer ( fieldValue : any , props : IFieldRendererProps , listItem : ListItemAccessor , context : IContext ) : Promise < JSX . Element > Parameters: Parameter Type Description fieldValue any Value of the field. props IFieldRendererProps Basic properties interface for Field Controls. Contains className and cssProps properties listItem ListItemAccessor Current List Item context IContext SPFx Context","title":"FieldRendererHelper"},{"location":"controls/fields/FieldRendererHelper/#fieldrendererhelper-class","text":"FieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters.","title":"FieldRendererHelper class"},{"location":"controls/fields/FieldRendererHelper/#how-to-use-this-class-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldRendererHelper } from \"@pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper\" ; Use the FieldRendererHelper.getFieldRenderer method to asynchronously request proper React control (As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render ): public componentWillMount() { FieldRendererHelper . getFieldRenderer ( fieldValue , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer => { // update state to re-render the Field Customizer this . setState ({ fieldRenderer : fieldRenderer }); }); } Render the requestted fieldRenderer : public render () : React . ReactElement < {} > { return ( < div className = { styles . cell } > { this . state . fieldRenderer } < /div> ); }","title":"How to use this class in your solutions"},{"location":"controls/fields/FieldRendererHelper/#implementation","text":"The FieldRendererHelper class contains single method getFieldRenderer with next signature: public static getFieldRenderer ( fieldValue : any , props : IFieldRendererProps , listItem : ListItemAccessor , context : IContext ) : Promise < JSX . Element > Parameters: Parameter Type Description fieldValue any Value of the field. props IFieldRendererProps Basic properties interface for Field Controls. Contains className and cssProps properties listItem ListItemAccessor Current List Item context IContext SPFx Context","title":"Implementation"},{"location":"controls/fields/FieldTaxonomyRenderer/","text":"FieldTaxonomyRenderer control \u00b6 This control renders terms from Managed Metadata field. Covered Fields \u00b6 Managed Metadata How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTaxonomyRenderer } from \"@pnp/spfx-controls-react/lib/FieldTaxonomyRenderer\" ; Use the FieldTaxonomyRenderer control in your code as follows: < FieldTaxonomyRenderer terms = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldTaxonomyRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. terms ITerm[] yes Managed Metadata terms.","title":"FieldTaxonomyRenderer"},{"location":"controls/fields/FieldTaxonomyRenderer/#fieldtaxonomyrenderer-control","text":"This control renders terms from Managed Metadata field.","title":"FieldTaxonomyRenderer control"},{"location":"controls/fields/FieldTaxonomyRenderer/#covered-fields","text":"Managed Metadata","title":"Covered Fields"},{"location":"controls/fields/FieldTaxonomyRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTaxonomyRenderer } from \"@pnp/spfx-controls-react/lib/FieldTaxonomyRenderer\" ; Use the FieldTaxonomyRenderer control in your code as follows: < FieldTaxonomyRenderer terms = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTaxonomyRenderer/#implementation","text":"The FieldTaxonomyRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. terms ITerm[] yes Managed Metadata terms.","title":"Implementation"},{"location":"controls/fields/FieldTextRenderer/","text":"FieldTextRenderer control \u00b6 This control renders simple text. Covered Fields \u00b6 Single line of text Multiple lines of text Choice Number Currency Yes/No Default renderer for uncovered types of fields How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTextRenderer } from \"@pnp/spfx-controls-react/lib/FieldTextRenderer\" ; Use the FieldTextRenderer control in your code as follows: < FieldTextRenderer text = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldTextRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"FieldTextRenderer"},{"location":"controls/fields/FieldTextRenderer/#fieldtextrenderer-control","text":"This control renders simple text.","title":"FieldTextRenderer control"},{"location":"controls/fields/FieldTextRenderer/#covered-fields","text":"Single line of text Multiple lines of text Choice Number Currency Yes/No Default renderer for uncovered types of fields","title":"Covered Fields"},{"location":"controls/fields/FieldTextRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTextRenderer } from \"@pnp/spfx-controls-react/lib/FieldTextRenderer\" ; Use the FieldTextRenderer control in your code as follows: < FieldTextRenderer text = { event . fieldValue } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTextRenderer/#implementation","text":"The FieldTextRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"Implementation"},{"location":"controls/fields/FieldTitleRenderer/","text":"FieldTitleRenderer control \u00b6 This control renders title either as a simple text or as a link to the Display Form. Additional actions like Share and Context Menu are not implemented. Covered Fields \u00b6 List Item Title (Title, LinkTitle, LinkTitleNoMenu) How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTitleRenderer } from \"@pnp/spfx-controls-react/lib/FieldTitleRenderer\" ; Use the FieldTitleRenderer control in your code as follows: < FieldTitleRenderer text = { 'Technical Requirements' } isLink = { true } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldTitleRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. baseUrl string no Web Url. Should be provided if onClick is not defined listId string no List Id. Should be provided if onClick is not defined id number no Item Id. Should be provided if onClick is not defined onClick (args: ITitleClickEventArgs) => {} no Custom title click event handler. If not set Display form for the item will be displayed.","title":"FieldTitleRenderer"},{"location":"controls/fields/FieldTitleRenderer/#fieldtitlerenderer-control","text":"This control renders title either as a simple text or as a link to the Display Form. Additional actions like Share and Context Menu are not implemented.","title":"FieldTitleRenderer control"},{"location":"controls/fields/FieldTitleRenderer/#covered-fields","text":"List Item Title (Title, LinkTitle, LinkTitleNoMenu)","title":"Covered Fields"},{"location":"controls/fields/FieldTitleRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTitleRenderer } from \"@pnp/spfx-controls-react/lib/FieldTitleRenderer\" ; Use the FieldTitleRenderer control in your code as follows: < FieldTitleRenderer text = { 'Technical Requirements' } isLink = { true } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTitleRenderer/#implementation","text":"The FieldTitleRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. baseUrl string no Web Url. Should be provided if onClick is not defined listId string no List Id. Should be provided if onClick is not defined id number no Item Id. Should be provided if onClick is not defined onClick (args: ITitleClickEventArgs) => {} no Custom title click event handler. If not set Display form for the item will be displayed.","title":"Implementation"},{"location":"controls/fields/FieldUrlRenderer/","text":"FieldUrlRenderer control \u00b6 This control renders Hyperlink or Picture field value as a link or image. Covered Fields \u00b6 Hyperlink or Image Url in Links List How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUrlRenderer } from \"@pnp/spfx-controls-react/lib/FieldUrlRenderer\" ; Use the FieldUrlRenderer control in your code as follows: // to show Url < FieldUrlRenderer text = { 'microsoft' } url = { 'http://www.microsoft.com' } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> // to show Image < FieldUrlRenderer url = { 'http://cdn.contoso.com/images/logo.png' } isImageUrl = { true } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldUrlRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. url string yes Url. isImageUrl boolean no True if the control should be rendered as an image.","title":"FieldUrlRenderer"},{"location":"controls/fields/FieldUrlRenderer/#fieldurlrenderer-control","text":"This control renders Hyperlink or Picture field value as a link or image.","title":"FieldUrlRenderer control"},{"location":"controls/fields/FieldUrlRenderer/#covered-fields","text":"Hyperlink or Image Url in Links List","title":"Covered Fields"},{"location":"controls/fields/FieldUrlRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUrlRenderer } from \"@pnp/spfx-controls-react/lib/FieldUrlRenderer\" ; Use the FieldUrlRenderer control in your code as follows: // to show Url < FieldUrlRenderer text = { 'microsoft' } url = { 'http://www.microsoft.com' } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> // to show Image < FieldUrlRenderer url = { 'http://cdn.contoso.com/images/logo.png' } isImageUrl = { true } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldUrlRenderer/#implementation","text":"The FieldUrlRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. url string yes Url. isImageUrl boolean no True if the control should be rendered as an image.","title":"Implementation"},{"location":"controls/fields/FieldUserRenderer/","text":"FieldUserRenderer control \u00b6 This control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control. Note: some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier Covered Fields \u00b6 Person or Group How to use this control in your solutions \u00b6 Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUserRenderer } from \"@pnp/spfx-controls-react/lib/FieldUserRenderer\" ; Use the FieldUserRenderer control in your code as follows: < FieldUserRenderer users = { event . fieldValue } context = { this . context } className = { 'some-class' } cssProps = {{ background : '#f00' }} /> Implementation \u00b6 The FieldUserRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. users IPrincipal no Users/groups to be displayed as they appear in event.fieldValue for Field Customizer's onRenderCell event. context IContext yes SPFx context.","title":"FieldUserRenderer"},{"location":"controls/fields/FieldUserRenderer/#fielduserrenderer-control","text":"This control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control. Note: some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier","title":"FieldUserRenderer control"},{"location":"controls/fields/FieldUserRenderer/#covered-fields","text":"Person or Group","title":"Covered Fields"},{"location":"controls/fields/FieldUserRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUserRenderer } from \"@pnp/spfx-controls-react/lib/FieldUserRenderer\" ; Use the FieldUserRenderer control in your code as follows: < FieldUserRenderer users = { event . fieldValue } context = { this . context } className = { 'some-class' } cssProps = {{ background : '#f00' }} />","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldUserRenderer/#implementation","text":"The FieldUserRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. users IPrincipal no Users/groups to be displayed as they appear in event.fieldValue for Field Customizer's onRenderCell event. context IContext yes SPFx context.","title":"Implementation"},{"location":"controls/fields/main/","text":"Field Customizer Out-of-the-box Fields Controls \u00b6 These controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component. Related UserVoice requests: https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth Usage \u00b6 The main scenario to use this package is to import FieldRendererHelper class and to call getFieldRenderer method. This method returns a Promise with a proper field renderer ( Promise<JSX.Element> ) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields). As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render . The resulting field renderer could be saved in the element's state and used later in render method. Here is an example on how it can be used inside custom Field Customizer component (.tsx file): export interface IOotbFieldsState { fieldRenderer? : JSX.Element ; } //... @override public componentWillMount() { FieldRendererHelper . getFieldRenderer ( this . props . value , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer => { this . setState ({ fieldRenderer : fieldRenderer }); }); } public render () : React . ReactElement < {} > { return ( < div className = { styles . cell } > { this . state . fieldRenderer } < /div> ); } Additionally, any of included components can be used by itself. FieldRendererHelper \u00b6 FieldRendererHelper class is a recommended way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields. Available Controls \u00b6 The following Field Controls are currently available: FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Getting started"},{"location":"controls/fields/main/#field-customizer-out-of-the-box-fields-controls","text":"These controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component. Related UserVoice requests: https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth","title":"Field Customizer Out-of-the-box Fields Controls"},{"location":"controls/fields/main/#usage","text":"The main scenario to use this package is to import FieldRendererHelper class and to call getFieldRenderer method. This method returns a Promise with a proper field renderer ( Promise<JSX.Element> ) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields). As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render . The resulting field renderer could be saved in the element's state and used later in render method. Here is an example on how it can be used inside custom Field Customizer component (.tsx file): export interface IOotbFieldsState { fieldRenderer? : JSX.Element ; } //... @override public componentWillMount() { FieldRendererHelper . getFieldRenderer ( this . props . value , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer => { this . setState ({ fieldRenderer : fieldRenderer }); }); } public render () : React . ReactElement < {} > { return ( < div className = { styles . cell } > { this . state . fieldRenderer } < /div> ); } Additionally, any of included components can be used by itself.","title":"Usage"},{"location":"controls/fields/main/#fieldrendererhelper","text":"FieldRendererHelper class is a recommended way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields.","title":"FieldRendererHelper"},{"location":"controls/fields/main/#available-controls","text":"The following Field Controls are currently available: FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Available Controls"}]}