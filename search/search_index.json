{
    "docs": [
        {
            "location": "/", 
            "text": "Reusable React controls for your SharePoint Framework solutions\n\n\nThis repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions.\n\n\nGetting started\n\n\nInstallation\n\n\nTo get started you have to install the following dependency to your project: \n@pnp/spfx-controls-react\n.\n\n\nEnter the following command to install the dependency to your project:\n\n\nnpm install @pnp/spfx-controls-react --save --save-exact\n\n\n\n\n\nConfiguration\n\n\nOnce the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the \nconfig/config.json\n and adding the following line to the \nlocalizedResources\n property:\n\n\nControlStrings\n:\n \nnode_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js\n\n\n\n\n\n\nAvailable controls\n\n\nThe following controls are currently available:\n\n\n\n\nFileTypeIcon\n (Control that shows the icon of a specified file path or application)\n\n\nListView\n (List view control)\n\n\nPlaceholder\n (Control that can be used to show an initial placeholder if the web part has to be configured)\n\n\nSiteBreadcrumb\n (Breadcrumb control)\n\n\nWebPartTitle\n (Customizable web part title control)\n\n\nIFrameDialog\n (renders a Dialog with an iframe as a content)\n\n\n\n\nField customizer controls:\n\n\n\n\nNote\n: If you want to use these controls in your solution, first check out the start guide for these controls: \nusing the field controls\n.\n\n\n\n\n\n\nFieldAttachmentsRenderer\n (renders Clip icon based on the provided \ncount\n property is defined and greater than 0)\n\n\nFieldDateRenderer\n (renders date string as a simple text)\n\n\nFieldFileTypeRenderer\n (renders document or folder icon based on file path)\n\n\nFieldLookupRenderer\n (renders lookup values)\n\n\nFieldNameRenderer\n (renders document's name as a link)\n\n\nFieldTaxonomyRenderer\n (renders terms from Managed Metadata field)\n\n\nFieldTextRenderer\n (renders simple text)\n\n\nFieldTitleRenderer\n (renders title either as a simple text or as a link to the Dislpay Form)\n\n\nFieldUrlRenderer\n (renders Hyperlink or Picture field value as a link or image)\n\n\nFieldUserRenderer\n (renders each referenced user/group as a link on a separate line)", 
            "title": "Home"
        }, 
        {
            "location": "/#reusable-react-controls-for-your-sharepoint-framework-solutions", 
            "text": "This repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions.", 
            "title": "Reusable React controls for your SharePoint Framework solutions"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/#installation", 
            "text": "To get started you have to install the following dependency to your project:  @pnp/spfx-controls-react .  Enter the following command to install the dependency to your project:  npm install @pnp/spfx-controls-react --save --save-exact", 
            "title": "Installation"
        }, 
        {
            "location": "/#configuration", 
            "text": "Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the  config/config.json  and adding the following line to the  localizedResources  property:  ControlStrings :   node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js", 
            "title": "Configuration"
        }, 
        {
            "location": "/#available-controls", 
            "text": "The following controls are currently available:   FileTypeIcon  (Control that shows the icon of a specified file path or application)  ListView  (List view control)  Placeholder  (Control that can be used to show an initial placeholder if the web part has to be configured)  SiteBreadcrumb  (Breadcrumb control)  WebPartTitle  (Customizable web part title control)  IFrameDialog  (renders a Dialog with an iframe as a content)   Field customizer controls:   Note : If you want to use these controls in your solution, first check out the start guide for these controls:  using the field controls .    FieldAttachmentsRenderer  (renders Clip icon based on the provided  count  property is defined and greater than 0)  FieldDateRenderer  (renders date string as a simple text)  FieldFileTypeRenderer  (renders document or folder icon based on file path)  FieldLookupRenderer  (renders lookup values)  FieldNameRenderer  (renders document's name as a link)  FieldTaxonomyRenderer  (renders terms from Managed Metadata field)  FieldTextRenderer  (renders simple text)  FieldTitleRenderer  (renders title either as a simple text or as a link to the Dislpay Form)  FieldUrlRenderer  (renders Hyperlink or Picture field value as a link or image)  FieldUserRenderer  (renders each referenced user/group as a link on a separate line)", 
            "title": "Available controls"
        }, 
        {
            "location": "/controls/FileTypeIcon/", 
            "text": "FileTypeIcon control\n\n\nThis control returns the file type icon based on a specified file path or application.\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFileTypeIcon\n,\n \nApplicationType\n,\n \nIconType\n,\n \nImageSize\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FileTypeIcon\n;\n\n\n\n\n\n\n\n\nUse the \nFileTypeIcon\n control in your code as follows:\n\n\n\n\n/* Showing the icons font */\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nfont\n}\n \napplication\n=\n{\nApplicationType\n.\nWord\n}\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nfont\n}\n \napplication\n=\n{\nApplicationType\n.\nExcel\n}\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nfont\n}\n \npath\n=\nhttps://contoso.sharepoint.com/documents/filename.docx\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nfont\n}\n \npath\n=\nhttps://contoso.sharepoint.com/documents/filename.xslx\n \n/\n\n\n\n/* Showing the icon image */\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nimage\n}\n \napplication\n=\n{\nApplicationType\n.\nWord\n}\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nimage\n}\n \npath\n=\nhttps://contoso.sharepoint.com/documents/filename.docx\n \n/\n\n\n\n/* Icon image allows three different sizes */\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nimage\n}\n \nsize\n=\n{\nImageSize\n.\nsmall\n}\n \napplication\n=\n{\nApplicationType\n.\nExcel\n}\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nimage\n}\n \nsize\n=\n{\nImageSize\n.\nmedium\n}\n \napplication\n=\n{\nApplicationType\n.\nExcel\n}\n \n/\n\n\nFileTypeIcon\n \ntype\n=\n{\nIconType\n.\nimage\n}\n \nsize\n=\n{\nImageSize\n.\nlarge\n}\n \napplication\n=\n{\nApplicationType\n.\nExcel\n}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FileTypeIcon component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napplication\n\n\nApplicationType\n\n\nno\n\n\nType of the application for which you want to show the icon. Use the \nApplicationType\n enum to get the list of available applications.\n\n\n\n\n\n\npath\n\n\nstring\n\n\nno\n\n\nPath to the document. If this is provided, the control will use the file extension to display the corresponding icon.\n\n\n\n\n\n\nsize\n\n\nImageSize\n\n\nno\n\n\nThis is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the \nImageSize\n enum to get the list of available images sizes.\n\n\n\n\n\n\ntype\n\n\nIconType\n\n\nyes\n\n\nThis property specifies is you want to use the icon font or image. Use the \nIconType\n enum to get the list of available icon types.", 
            "title": "FileTypeIcon"
        }, 
        {
            "location": "/controls/FileTypeIcon/#filetypeicon-control", 
            "text": "This control returns the file type icon based on a specified file path or application.", 
            "title": "FileTypeIcon control"
        }, 
        {
            "location": "/controls/FileTypeIcon/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FileTypeIcon ,   ApplicationType ,   IconType ,   ImageSize   }   from   @pnp/spfx-controls-react/lib/FileTypeIcon ;    Use the  FileTypeIcon  control in your code as follows:   /* Showing the icons font */  FileTypeIcon   type = { IconType . font }   application = { ApplicationType . Word }   /  FileTypeIcon   type = { IconType . font }   application = { ApplicationType . Excel }   /  FileTypeIcon   type = { IconType . font }   path = https://contoso.sharepoint.com/documents/filename.docx   /  FileTypeIcon   type = { IconType . font }   path = https://contoso.sharepoint.com/documents/filename.xslx   /  /* Showing the icon image */  FileTypeIcon   type = { IconType . image }   application = { ApplicationType . Word }   /  FileTypeIcon   type = { IconType . image }   path = https://contoso.sharepoint.com/documents/filename.docx   /  /* Icon image allows three different sizes */  FileTypeIcon   type = { IconType . image }   size = { ImageSize . small }   application = { ApplicationType . Excel }   /  FileTypeIcon   type = { IconType . image }   size = { ImageSize . medium }   application = { ApplicationType . Excel }   /  FileTypeIcon   type = { IconType . image }   size = { ImageSize . large }   application = { ApplicationType . Excel }   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/FileTypeIcon/#implementation", 
            "text": "The FileTypeIcon component can be configured with the following properties:     Property  Type  Required  Description      application  ApplicationType  no  Type of the application for which you want to show the icon. Use the  ApplicationType  enum to get the list of available applications.    path  string  no  Path to the document. If this is provided, the control will use the file extension to display the corresponding icon.    size  ImageSize  no  This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the  ImageSize  enum to get the list of available images sizes.    type  IconType  yes  This property specifies is you want to use the icon font or image. Use the  IconType  enum to get the list of available icon types.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/ListView/", 
            "text": "ListView control\n\n\nThis control renders a list view for the given set of items.\n\n\n\n\nList view control with grouping applied\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nListView\n,\n \nIViewField\n,\n \nSelectionMode\n,\n \nGroupOrder\n,\n \nIGrouping\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/ListView\n;\n\n\n\n\n\n\n\n\nUse the \nListView\n control in your code as follows:\n\n\n\n\nListView\n\n  \nitems\n=\n{\nitems\n}\n\n  \nviewFields\n=\n{\nviewFields\n}\n\n  \niconFieldName\n=\nServerRelativeUrl\n\n  \ncompact\n=\n{\ntrue\n}\n\n  \nselectionMode\n=\n{\nSelectionMode\n.\nmultiple\n}\n\n  \nselection\n=\n{\nthis\n.\n_getSelection\n}\n\n  \ngroupByFields\n=\n{\ngroupByFields\n}\n \n/\n\n\n\n\n\n\n\n\nWith the \nselection\n property you can define a method that which gets called when the user selects one or more items in the list view:\n\n\n\n\nprivate\n \n_getSelection\n(\nitems\n: \nany\n[])\n \n{\n\n  \nconsole\n.\nlog\n(\nSelected items:\n,\n \nitems\n);\n\n\n}\n\n\n\n\n\n\n\n\nWith the \ngroupByFields\n property you can define an array of field objects which will be used for grouping. \n\n\n\n\nImportant\n: the same order of the fields defines how grouping will be applied. In the snippet the \nListView\n control will first group by the \nExtension\n and after that by the \nAuthor\n field.\n\n\nconst\n \ngroupByFields\n: \nIGrouping\n[]\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nExtension\n,\n \n    \norder\n: \nGroupOrder.ascending\n \n  \n},\n \n{\n\n    \nname\n:\n \nAuthor\n,\n \n    \norder\n: \nGroupOrder.descending\n\n  \n}\n\n\n];\n\n\n\n\n\n\nImplementation\n\n\nThe ListView control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\niconFieldName\n\n\nstring\n\n\nno\n\n\nSpecify the name of the file URL path which will be used to show the file icon.\n\n\n\n\n\n\nitems\n\n\nany[]\n\n\nyes\n\n\nItems to render in the list view.\n\n\n\n\n\n\nviewFields\n\n\nIViewField[]\n\n\nno\n\n\nThe fields you want to render in the list view. Check the \nIViewField\n implementation to see which properties you can define.\n\n\n\n\n\n\ncompact\n\n\nboolean\n\n\nno\n\n\nBoolean value to indicate if the control should render in compact mode. By default this is set to \nfalse\n.\n\n\n\n\n\n\nselectionMode\n\n\nSelectionMode\n\n\nno\n\n\nSpecify if the items in the list view can be selected and how. Options are: none, single, multi.\n\n\n\n\n\n\nselection\n\n\nfunction\n\n\nno\n\n\nSelection event that passes the selected item(s) from the list view.\n\n\n\n\n\n\ngroupByFields\n\n\nIGrouping[]\n\n\nno\n\n\nDefines the field on which you want to group the items in the list view.\n\n\n\n\n\n\ndefaultSelection\n\n\nnumber[]\n\n\nno\n\n\nThe index of the items to be select by default\n\n\n\n\n\n\n\n\nThe \nIViewField\n has the following implementation:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nName of the field.\n\n\n\n\n\n\ndisplayName\n\n\nstring\n\n\nno\n\n\nName that will be used as the column title. If not defined, the name property will be used.\n\n\n\n\n\n\nlinkPropertyName\n\n\nstring\n\n\nno\n\n\nSpecify the field name that needs to be used to render a link for the current field.\n\n\n\n\n\n\nsorting\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to enable sorting for the current field.\n\n\n\n\n\n\nmaxWidth\n\n\nnumber\n\n\nno\n\n\nSpecify the minimum width of the column.\n\n\n\n\n\n\nmaxWidth\n\n\nnumber\n\n\nno\n\n\nSpecify the maximum width of the column.\n\n\n\n\n\n\nrender\n\n\nfunction\n\n\nno\n\n\nOverride how the field has to get rendered.\n\n\n\n\n\n\n\n\nThe \nIGrouping\n has the following implementation:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nName of the field\n\n\n\n\n\n\norder\n\n\nGroupOrder\n\n\nyes\n\n\nSpecify how the group needs to be ordered.\n\n\n\n\n\n\n\n\nenum \nGroupOrder\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nascending\n\n\nOrder the group in ascending order.\n\n\n\n\n\n\ndescending\n\n\nOrder the group in descending order.", 
            "title": "ListView"
        }, 
        {
            "location": "/controls/ListView/#listview-control", 
            "text": "This control renders a list view for the given set of items.   List view control with grouping applied", 
            "title": "ListView control"
        }, 
        {
            "location": "/controls/ListView/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   ListView ,   IViewField ,   SelectionMode ,   GroupOrder ,   IGrouping   }   from   @pnp/spfx-controls-react/lib/ListView ;    Use the  ListView  control in your code as follows:   ListView \n   items = { items } \n   viewFields = { viewFields } \n   iconFieldName = ServerRelativeUrl \n   compact = { true } \n   selectionMode = { SelectionMode . multiple } \n   selection = { this . _getSelection } \n   groupByFields = { groupByFields }   /    With the  selection  property you can define a method that which gets called when the user selects one or more items in the list view:   private   _getSelection ( items :  any [])   { \n   console . log ( Selected items: ,   items );  }    With the  groupByFields  property you can define an array of field objects which will be used for grouping.    Important : the same order of the fields defines how grouping will be applied. In the snippet the  ListView  control will first group by the  Extension  and after that by the  Author  field.  const   groupByFields :  IGrouping []   =   [ \n   { \n     name :   Extension ,  \n     order :  GroupOrder.ascending  \n   },   { \n     name :   Author ,  \n     order :  GroupOrder.descending \n   }  ];", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/ListView/#implementation", 
            "text": "The ListView control can be configured with the following properties:     Property  Type  Required  Description      iconFieldName  string  no  Specify the name of the file URL path which will be used to show the file icon.    items  any[]  yes  Items to render in the list view.    viewFields  IViewField[]  no  The fields you want to render in the list view. Check the  IViewField  implementation to see which properties you can define.    compact  boolean  no  Boolean value to indicate if the control should render in compact mode. By default this is set to  false .    selectionMode  SelectionMode  no  Specify if the items in the list view can be selected and how. Options are: none, single, multi.    selection  function  no  Selection event that passes the selected item(s) from the list view.    groupByFields  IGrouping[]  no  Defines the field on which you want to group the items in the list view.    defaultSelection  number[]  no  The index of the items to be select by default     The  IViewField  has the following implementation:     Property  Type  Required  Description      name  string  yes  Name of the field.    displayName  string  no  Name that will be used as the column title. If not defined, the name property will be used.    linkPropertyName  string  no  Specify the field name that needs to be used to render a link for the current field.    sorting  boolean  no  Specify if you want to enable sorting for the current field.    maxWidth  number  no  Specify the minimum width of the column.    maxWidth  number  no  Specify the maximum width of the column.    render  function  no  Override how the field has to get rendered.     The  IGrouping  has the following implementation:     Property  Type  Required  Description      name  string  yes  Name of the field    order  GroupOrder  yes  Specify how the group needs to be ordered.     enum  GroupOrder     Value  Description      ascending  Order the group in ascending order.    descending  Order the group in descending order.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/Placeholder/", 
            "text": "Placeholder control\n\n\nThis control renders a placeholder which can be used to show a message that the web part still has to be configured.\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nPlaceholder\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/Placeholder\n;\n\n\n\n\n\n\n\n\nUse the \nPlaceholder\n control in your code as follows:\n\n\n\n\nPlaceholder\n\n  \niconName\n=\nEdit\n\n  \niconText\n=\nConfigure your web part\n\n  \ndescription\n=\nPlease configure the web part.\n\n  \nbuttonLabel\n=\nConfigure\n\n  \nonConfigure\n=\n{\nthis\n.\n_onConfigure\n}\n \n/\n\n\n\n\n\n\n\n\nWith the \nonConfigure\n property you can define what it needs to do when you click on the button. Like for example opening the property pane:\n\n\n\n\nprivate\n \n_onConfigure() {\n\n  \n// Context of the web part\n\n  \nthis\n.\nprops\n.\ncontext\n.\npropertyPane\n.\nopen\n();\n\n\n}\n\n\n\n\n\n\nImplementation\n\n\nThe placeholder control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuttonLabel\n\n\nstring\n\n\nno\n\n\nText label to be displayed on the button bellow the description. The button is optional.\n\n\n\n\n\n\ncontentClassName\n\n\nstring\n\n\nno\n\n\nThis is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder.\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nyes\n\n\nText description for the placeholder. This appears bellow the Icon and IconText.\n\n\n\n\n\n\niconName\n\n\nstring\n\n\nyes\n\n\nThe name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: \nOffice UI Fabric icons\n. For example: \nPage\n or \nAdd\n.\n\n\n\n\n\n\niconText\n\n\nstring\n\n\nyes\n\n\nHeading text which is displayed next to the icon.\n\n\n\n\n\n\nonConfigure\n\n\nfunction\n\n\nno\n\n\nonConfigure handler for the button. The button is optional.", 
            "title": "Placeholder"
        }, 
        {
            "location": "/controls/Placeholder/#placeholder-control", 
            "text": "This control renders a placeholder which can be used to show a message that the web part still has to be configured.", 
            "title": "Placeholder control"
        }, 
        {
            "location": "/controls/Placeholder/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   Placeholder   }   from   @pnp/spfx-controls-react/lib/Placeholder ;    Use the  Placeholder  control in your code as follows:   Placeholder \n   iconName = Edit \n   iconText = Configure your web part \n   description = Please configure the web part. \n   buttonLabel = Configure \n   onConfigure = { this . _onConfigure }   /    With the  onConfigure  property you can define what it needs to do when you click on the button. Like for example opening the property pane:   private   _onConfigure() { \n   // Context of the web part \n   this . props . context . propertyPane . open ();  }", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/Placeholder/#implementation", 
            "text": "The placeholder control can be configured with the following properties:     Property  Type  Required  Description      buttonLabel  string  no  Text label to be displayed on the button bellow the description. The button is optional.    contentClassName  string  no  This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder.    description  string  yes  Text description for the placeholder. This appears bellow the Icon and IconText.    iconName  string  yes  The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page:  Office UI Fabric icons . For example:  Page  or  Add .    iconText  string  yes  Heading text which is displayed next to the icon.    onConfigure  function  no  onConfigure handler for the button. The button is optional.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/", 
            "text": "SiteBreadcrumb control\n\n\nThis control returns a breadcrumb based on the current location.\n\n\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nSiteBreadcrumb\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/SiteBreadcrumb\n;\n\n\n\n\n\n\n\n\nUse the \nSiteBreadcrumb\n control in your code as follows:\n\n\n\n\nSiteBreadcrumb\n \ncontext\n=\n{\nthis\n.\nprops\n.\ncontext\n}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe SiteBreadcrumb control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nWebPartContext OR ApplicationCustomizerContext\n\n\nyes\n\n\nPass the context of your web part or application customizer extension.", 
            "title": "SiteBreadcrumb"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#sitebreadcrumb-control", 
            "text": "This control returns a breadcrumb based on the current location.", 
            "title": "SiteBreadcrumb control"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   SiteBreadcrumb   }   from   @pnp/spfx-controls-react/lib/SiteBreadcrumb ;    Use the  SiteBreadcrumb  control in your code as follows:   SiteBreadcrumb   context = { this . props . context }   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#implementation", 
            "text": "The SiteBreadcrumb control can be configured with the following properties:     Property  Type  Required  Description      context  WebPartContext OR ApplicationCustomizerContext  yes  Pass the context of your web part or application customizer extension.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/WebPartTitle/", 
            "text": "WebPartTitle control\n\n\nThis control renders a web part title that is changeable when the page is in edit mode.\n\n\nHere is an example of the control in action:\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nIn the root web part file, the one that extends from the \nBaseClientSideWebPart\n class. Pass the following properties to your web part main component:\n\n\n\n\nconst\n \nelement\n: \nReact.ReactElement\nIControlsTestProps\n \n=\n \nReact\n.\ncreateElement\n(\n\n  \nControlsTest\n,\n\n  \n{\n\n    \ntitle\n: \nthis.properties.title\n,\n\n    \ndisplayMode\n: \nthis.displayMode\n,\n\n    \nupdateProperty\n:\n \n(\nvalue\n: \nstring\n)\n \n=\n \n{\n\n      \nthis\n.\nproperties\n.\ntitle\n \n=\n \nvalue\n;\n\n    \n}\n\n  \n}\n\n\n);\n\n\n\n\n\n\n\n\nAdd the \ntitle\n, \ndisplayMode\n, and \nupdateProperty\n properties to the properties interface of your component:\n\n\n\n\nimport\n \n{\n \nDisplayMode\n \n}\n \nfrom\n \n@microsoft/sp-core-library\n;\n\n\n\nexport\n \ninterface\n \nIControlsTestProps\n \n{\n\n  \ntitle\n: \nstring\n;\n\n  \ndisplayMode\n: \nDisplayMode\n;\n\n  \nupdateProperty\n:\n \n(\nvalue\n: \nstring\n)\n \n=\n \nvoid\n;\n\n\n}\n\n\n\n\n\n\n\n\nIn your component file, import the \nWebPartTitle\n control as follows:\n\n\n\n\nimport\n \n{\n \nWebPartTitle\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/WebPartTitle\n;\n\n\n\n\n\n\n\n\nUse the \nWebPartTitle\n control in your code as follows:\n\n\n\n\nWebPartTitle\n \ndisplayMode\n=\n{\nthis\n.\nprops\n.\ndisplayMode\n}\n\n              \ntitle\n=\n{\nthis\n.\nprops\n.\ntitle\n}\n\n              \nupdateProperty\n=\n{\nthis\n.\nprops\n.\nupdateProperty\n}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe WebPartTitle control can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndisplayMode\n\n\nDisplayMode\n\n\nyes\n\n\nThis tells the control in which page mode it is rendering.\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nyes\n\n\nThe title value for the web part.\n\n\n\n\n\n\nupdateProperty\n\n\nFunction\n\n\nyes\n\n\nFunction that you can pass to update the title in the root web part.\n\n\n\n\n\n\nclassName\n\n\nstring\n\n\nno\n\n\nOptional property to specify a custom class that allows you to change the web part title style.", 
            "title": "WebPartTitle"
        }, 
        {
            "location": "/controls/WebPartTitle/#webparttitle-control", 
            "text": "This control renders a web part title that is changeable when the page is in edit mode.  Here is an example of the control in action:", 
            "title": "WebPartTitle control"
        }, 
        {
            "location": "/controls/WebPartTitle/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  In the root web part file, the one that extends from the  BaseClientSideWebPart  class. Pass the following properties to your web part main component:   const   element :  React.ReactElement IControlsTestProps   =   React . createElement ( \n   ControlsTest , \n   { \n     title :  this.properties.title , \n     displayMode :  this.displayMode , \n     updateProperty :   ( value :  string )   =   { \n       this . properties . title   =   value ; \n     } \n   }  );    Add the  title ,  displayMode , and  updateProperty  properties to the properties interface of your component:   import   {   DisplayMode   }   from   @microsoft/sp-core-library ;  export   interface   IControlsTestProps   { \n   title :  string ; \n   displayMode :  DisplayMode ; \n   updateProperty :   ( value :  string )   =   void ;  }    In your component file, import the  WebPartTitle  control as follows:   import   {   WebPartTitle   }   from   @pnp/spfx-controls-react/lib/WebPartTitle ;    Use the  WebPartTitle  control in your code as follows:   WebPartTitle   displayMode = { this . props . displayMode } \n               title = { this . props . title } \n               updateProperty = { this . props . updateProperty }   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/WebPartTitle/#implementation", 
            "text": "The WebPartTitle control can be configured with the following properties:     Property  Type  Required  Description      displayMode  DisplayMode  yes  This tells the control in which page mode it is rendering.    title  string  yes  The title value for the web part.    updateProperty  Function  yes  Function that you can pass to update the title in the root web part.    className  string  no  Optional property to specify a custom class that allows you to change the web part title style.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/IFrameDialog/", 
            "text": "IFrameDialog control\n\n\nThis control renders a Dialog with an iframe as a content.\n\n\nHere is an example of the control in action:\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nIFrameDialog\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/IFrameDialog\n;\n\n\n\n\n\n\n\n\nUse the \nIFrameDialog\n control in your code as follows (\nthis._onIframeLoaded\n and \nthis._onDialogDismiss\n are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively):\n\n\n\n\nIFrameDialog\n \n    \nurl\n=\n{\nthis\n.\nstate\n.\nlookupDispFormUrl\n}\n\n    \niframeOnLoad\n=\n{\nthis\n.\n_onIframeLoaded\n.\nbind\n(\nthis\n)}\n\n    \nhidden\n=\n{\nthis\n.\nstate\n.\nhideDialog\n}\n\n    \nonDismiss\n=\n{\nthis\n.\n_onDialogDismiss\n.\nbind\n(\nthis\n)}\n\n    \nmodalProps\n=\n{{\n\n        \nisBlocking\n: \ntrue\n,\n\n        \ncontainerClassName\n: \nstyles.dialogContainer\n\n    \n}}\n\n    \ndialogContentProps\n=\n{{\n\n        \ntype\n: \nDialogType.close\n,\n\n        \nshowCloseButton\n: \ntrue\n\n    \n}}\n\n    \nwidth\n=\n{\n570px\n}\n\n    \nheight\n=\n{\n315px\n}\n/\n\n\n\n\n\n\nImplementation\n\n\nThe IFrameDialog component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndialogContentProps\n\n\nIDialogContentProps\n\n\nno\n\n\nProps to be passed through to Dialog Content.\n\n\n\n\n\n\nhidden\n\n\nboolean\n\n\nno\n\n\nWhether the dialog is hidden.\n\n\n\n\n\n\nmodalProps\n\n\nIModalProps\n\n\nno\n\n\nProps to be passed through to Modal.\n\n\n\n\n\n\nonDismiss\n\n\n(ev?: React.MouseEvent\n) =\n any\n\n\nno\n\n\nA callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nyes\n\n\niframe Url\n\n\n\n\n\n\niframeOnload\n\n\niframeOnLoad?: (iframe: any) =\n {}\n\n\nno\n\n\niframe's onload event handler\n\n\n\n\n\n\nwidth\n\n\nstring\n\n\nyes\n\n\niframe's width\n\n\n\n\n\n\nheigth\n\n\nstring\n\n\nyes\n\n\niframe's height", 
            "title": "IFrameDialog"
        }, 
        {
            "location": "/controls/IFrameDialog/#iframedialog-control", 
            "text": "This control renders a Dialog with an iframe as a content.  Here is an example of the control in action:", 
            "title": "IFrameDialog control"
        }, 
        {
            "location": "/controls/IFrameDialog/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   IFrameDialog   }   from   @pnp/spfx-controls-react/lib/IFrameDialog ;    Use the  IFrameDialog  control in your code as follows ( this._onIframeLoaded  and  this._onDialogDismiss  are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively):   IFrameDialog  \n     url = { this . state . lookupDispFormUrl } \n     iframeOnLoad = { this . _onIframeLoaded . bind ( this )} \n     hidden = { this . state . hideDialog } \n     onDismiss = { this . _onDialogDismiss . bind ( this )} \n     modalProps = {{ \n         isBlocking :  true , \n         containerClassName :  styles.dialogContainer \n     }} \n     dialogContentProps = {{ \n         type :  DialogType.close , \n         showCloseButton :  true \n     }} \n     width = { 570px } \n     height = { 315px } /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/IFrameDialog/#implementation", 
            "text": "The IFrameDialog component can be configured with the following properties:     Property  Type  Required  Description      dialogContentProps  IDialogContentProps  no  Props to be passed through to Dialog Content.    hidden  boolean  no  Whether the dialog is hidden.    modalProps  IModalProps  no  Props to be passed through to Modal.    onDismiss  (ev?: React.MouseEvent ) =  any  no  A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.    url  string  yes  iframe Url    iframeOnload  iframeOnLoad?: (iframe: any) =  {}  no  iframe's onload event handler    width  string  yes  iframe's width    heigth  string  yes  iframe's height", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/main/", 
            "text": "Field Customizer Out-of-the-box Fields Controls\n\n\nThese controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component.\nRelated UserVoice requests:\n\n\nhttps://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls\n\n\nhttps://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth\n\n\nUsage\n\n\nThe main scenario to use this package is to import \nFieldRendererHelper\n class and to call \ngetFieldRenderer\n method. This method returns a Promise with a proper field renderer (\nPromise\nJSX.Element\n) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields).\nAs the method returns \nPromise\n it should be called in one of React component lifecycle methods, for example, \ncomponentWillMount\n that will occur before \nrender\n. The resulting field renderer could be saved in the element's state and used later in \nrender\n method.\nHere is an example on how it can be used inside custom Field Customizer component (.tsx file):\n\n\nexport\n \ninterface\n \nIOotbFieldsState\n \n{\n\n  \nfieldRenderer?\n: \nJSX.Element\n;\n\n\n}\n\n\n\n//...\n\n\n\n@override\n\n  \npublic\n \ncomponentWillMount() {\n\n    \nFieldRendererHelper\n.\ngetFieldRenderer\n(\nthis\n.\nprops\n.\nvalue\n,\n \n{\n\n      \nclassName\n: \nthis.props.className\n,\n\n      \ncssProps\n: \nthis.props.cssProps\n\n    \n},\n \nthis\n.\nprops\n.\nlistItem\n,\n \nthis\n.\nprops\n.\ncontext\n).\nthen\n(\nfieldRenderer\n \n=\n \n{\n\n      \nthis\n.\nsetState\n({\n\n        \nfieldRenderer\n: \nfieldRenderer\n\n      \n});\n\n    \n});\n\n  \n}\n\n\n\npublic\n \nrender\n()\n:\n \nReact\n.\nReactElement\n{}\n \n{\n\n    \nreturn\n \n(\n\n      \ndiv\n \nclassName\n=\n{\nstyles\n.\ncell\n}\n\n        \n{\nthis\n.\nstate\n.\nfieldRenderer\n}\n\n      \n/div\n\n    \n);\n\n  \n}\n\n\n\n\n\n\nAdditionally, any of included components can be used by itself.\n\n\nFieldRendererHelper\n\n\nFieldRendererHelper\n class is a \nrecommended\n way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields.\n\n\nAvailable Controls\n\n\nThe following Field Controls are currently available:\n\n\n\n\nFieldAttachmentsRenderer\n (renders Clip icon based on the provided \ncount\n property is defined and greater than 0)\n\n\nFieldDateRenderer\n (renders date string as a simple text)\n\n\nFieldFileTypeRenderer\n (renders document or folder icon based on file path)\n\n\nFieldLookupRenderer\n (renders lookup values)\n\n\nFieldNameRenderer\n (renders document's name as a link)\n\n\nFieldTaxonomyRenderer\n (renders terms from Managed Metadata field)\n\n\nFieldTextRenderer\n (renders simple text)\n\n\nFieldTitleRenderer\n (renders title either as a simple text or as a link to the Dislpay Form)\n\n\nFieldUrlRenderer\n (renders Hyperlink or Picture field value as a link or image)\n\n\nFieldUserRenderer\n (renders each referenced user/group as a link on a separate line)", 
            "title": "Getting started"
        }, 
        {
            "location": "/controls/fields/main/#field-customizer-out-of-the-box-fields-controls", 
            "text": "These controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component.\nRelated UserVoice requests:  https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls  https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth", 
            "title": "Field Customizer Out-of-the-box Fields Controls"
        }, 
        {
            "location": "/controls/fields/main/#usage", 
            "text": "The main scenario to use this package is to import  FieldRendererHelper  class and to call  getFieldRenderer  method. This method returns a Promise with a proper field renderer ( Promise JSX.Element ) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields).\nAs the method returns  Promise  it should be called in one of React component lifecycle methods, for example,  componentWillMount  that will occur before  render . The resulting field renderer could be saved in the element's state and used later in  render  method.\nHere is an example on how it can be used inside custom Field Customizer component (.tsx file):  export   interface   IOotbFieldsState   { \n   fieldRenderer? :  JSX.Element ;  }  //...  @override \n   public   componentWillMount() { \n     FieldRendererHelper . getFieldRenderer ( this . props . value ,   { \n       className :  this.props.className , \n       cssProps :  this.props.cssProps \n     },   this . props . listItem ,   this . props . context ). then ( fieldRenderer   =   { \n       this . setState ({ \n         fieldRenderer :  fieldRenderer \n       }); \n     }); \n   }  public   render () :   React . ReactElement {}   { \n     return   ( \n       div   className = { styles . cell } \n         { this . state . fieldRenderer } \n       /div \n     ); \n   }   Additionally, any of included components can be used by itself.", 
            "title": "Usage"
        }, 
        {
            "location": "/controls/fields/main/#fieldrendererhelper", 
            "text": "FieldRendererHelper  class is a  recommended  way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields.", 
            "title": "FieldRendererHelper"
        }, 
        {
            "location": "/controls/fields/main/#available-controls", 
            "text": "The following Field Controls are currently available:   FieldAttachmentsRenderer  (renders Clip icon based on the provided  count  property is defined and greater than 0)  FieldDateRenderer  (renders date string as a simple text)  FieldFileTypeRenderer  (renders document or folder icon based on file path)  FieldLookupRenderer  (renders lookup values)  FieldNameRenderer  (renders document's name as a link)  FieldTaxonomyRenderer  (renders terms from Managed Metadata field)  FieldTextRenderer  (renders simple text)  FieldTitleRenderer  (renders title either as a simple text or as a link to the Dislpay Form)  FieldUrlRenderer  (renders Hyperlink or Picture field value as a link or image)  FieldUserRenderer  (renders each referenced user/group as a link on a separate line)", 
            "title": "Available Controls"
        }, 
        {
            "location": "/controls/fields/FieldRendererHelper/", 
            "text": "FieldRendererHelper class\n\n\nFieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters.\n\n\nHow to use this class in your solutions\n\n\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\n\n\n\n\nImport the following modules to your component:\n\n\n\n\n\n\nimport\n \n{\n \nFieldRendererHelper\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper\n;\n\n\n\n\n\n\n\n\nUse the \nFieldRendererHelper.getFieldRenderer\n method to asynchronously request proper React control (As the method returns \nPromise\n it should be called in one of React component lifecycle methods, for example, \ncomponentWillMount\n that will occur before \nrender\n):\n\n\n\n\npublic\n \ncomponentWillMount() {\n\n    \nFieldRendererHelper\n.\ngetFieldRenderer\n(\nfieldValue\n,\n \n{\n\n      \nclassName\n: \nthis.props.className\n,\n\n      \ncssProps\n: \nthis.props.cssProps\n\n    \n},\n \nthis\n.\nprops\n.\nlistItem\n,\n \nthis\n.\nprops\n.\ncontext\n).\nthen\n(\nfieldRenderer\n \n=\n \n{\n\n        \n// update state to re-render the Field Customizer\n\n      \nthis\n.\nsetState\n({\n\n        \nfieldRenderer\n: \nfieldRenderer\n\n      \n});\n\n    \n});\n\n  \n}\n\n\n\n\n\n\n\n\nRender the requestted \nfieldRenderer\n:\n\n\n\n\npublic\n \nrender\n()\n:\n \nReact\n.\nReactElement\n{}\n \n{\n\n    \nreturn\n \n(\n\n      \ndiv\n \nclassName\n=\n{\nstyles\n.\ncell\n}\n\n        \n{\nthis\n.\nstate\n.\nfieldRenderer\n}\n\n      \n/div\n\n    \n);\n\n  \n}\n\n\n\n\n\n\nImplementation\n\n\nThe FieldRendererHelper class contains single method \ngetFieldRenderer\n with next signature:\n\n\npublic\n \nstatic\n \ngetFieldRenderer\n(\nfieldValue\n: \nany\n,\n \nprops\n: \nIFieldRendererProps\n,\n \nlistItem\n: \nListItemAccessor\n,\n \ncontext\n: \nIContext\n)\n:\n \nPromise\nJSX\n.\nElement\n\n\n\n\n\n\nParameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfieldValue\n\n\nany\n\n\nValue of the field.\n\n\n\n\n\n\nprops\n\n\nIFieldRendererProps\n\n\nBasic properties interface for Field Controls. Contains \nclassName\n and \ncssProps\n properties\n\n\n\n\n\n\nlistItem\n\n\nListItemAccessor\n\n\nCurrent List Item\n\n\n\n\n\n\ncontext\n\n\nIContext\n\n\nSPFx Context", 
            "title": "FieldRendererHelper"
        }, 
        {
            "location": "/controls/fields/FieldRendererHelper/#fieldrendererhelper-class", 
            "text": "FieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters.", 
            "title": "FieldRendererHelper class"
        }, 
        {
            "location": "/controls/fields/FieldRendererHelper/#how-to-use-this-class-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.    Import the following modules to your component:    import   {   FieldRendererHelper   }   from   @pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper ;    Use the  FieldRendererHelper.getFieldRenderer  method to asynchronously request proper React control (As the method returns  Promise  it should be called in one of React component lifecycle methods, for example,  componentWillMount  that will occur before  render ):   public   componentWillMount() { \n     FieldRendererHelper . getFieldRenderer ( fieldValue ,   { \n       className :  this.props.className , \n       cssProps :  this.props.cssProps \n     },   this . props . listItem ,   this . props . context ). then ( fieldRenderer   =   { \n         // update state to re-render the Field Customizer \n       this . setState ({ \n         fieldRenderer :  fieldRenderer \n       }); \n     }); \n   }    Render the requestted  fieldRenderer :   public   render () :   React . ReactElement {}   { \n     return   ( \n       div   className = { styles . cell } \n         { this . state . fieldRenderer } \n       /div \n     ); \n   }", 
            "title": "How to use this class in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldRendererHelper/#implementation", 
            "text": "The FieldRendererHelper class contains single method  getFieldRenderer  with next signature:  public   static   getFieldRenderer ( fieldValue :  any ,   props :  IFieldRendererProps ,   listItem :  ListItemAccessor ,   context :  IContext ) :   Promise JSX . Element   Parameters:     Parameter  Type  Description      fieldValue  any  Value of the field.    props  IFieldRendererProps  Basic properties interface for Field Controls. Contains  className  and  cssProps  properties    listItem  ListItemAccessor  Current List Item    context  IContext  SPFx Context", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldAttachmentsRenderer/", 
            "text": "FieldAttachmentsRenderer control\n\n\nThis control renders Clip icon based on the provided \ncount\n property is defined and greater than 0.\n\n\n\n\nNote:\n this control displays correctly starting with SharePoint Framework v1.4\n\n\nCovered Fields\n\n\n\n\nAttachments\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldAttachmentsRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldAttachmentsRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldAttachmentsRenderer\n control in your code as follows:\n\n\n\n\nFieldAttachmentsRenderer\n \ncount\n=\n{\nevent\n.\nfieldValue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldAttachmentsRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ncount\n\n\nnumber\n\n\nno\n\n\nAmount of attachments. The icon is displayed if the property is defined and greater than 0", 
            "title": "FieldAttachmentsRenderer"
        }, 
        {
            "location": "/controls/fields/FieldAttachmentsRenderer/#fieldattachmentsrenderer-control", 
            "text": "This control renders Clip icon based on the provided  count  property is defined and greater than 0.   Note:  this control displays correctly starting with SharePoint Framework v1.4", 
            "title": "FieldAttachmentsRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldAttachmentsRenderer/#covered-fields", 
            "text": "Attachments", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldAttachmentsRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldAttachmentsRenderer   }   from   @pnp/spfx-controls-react/lib/FieldAttachmentsRenderer ;    Use the  FieldAttachmentsRenderer  control in your code as follows:   FieldAttachmentsRenderer   count = { event . fieldValue }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldAttachmentsRenderer/#implementation", 
            "text": "The FieldAttachmentsRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    count  number  no  Amount of attachments. The icon is displayed if the property is defined and greater than 0", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldDateRenderer/", 
            "text": "FieldDateRenderer control\n\n\nThis control renders date string as a simple text.\n\n\n\n\nCovered Fields\n\n\n\n\nDate and Time\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldDateRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldDateRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldDateRenderer\n control in your code as follows:\n\n\n\n\nFieldDateRenderer\n \ntext\n=\n{\nevent\n.\nfieldValue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nNote:\n FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to \nFieldRendererHelper\n implementation.\n\n\nImplementation\n\n\nThe FieldDateRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nno\n\n\nText to be rendered", 
            "title": "FieldDateRenderer"
        }, 
        {
            "location": "/controls/fields/FieldDateRenderer/#fielddaterenderer-control", 
            "text": "This control renders date string as a simple text.", 
            "title": "FieldDateRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldDateRenderer/#covered-fields", 
            "text": "Date and Time", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldDateRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldDateRenderer   }   from   @pnp/spfx-controls-react/lib/FieldDateRenderer ;    Use the  FieldDateRenderer  control in your code as follows:   FieldDateRenderer   text = { event . fieldValue }   className = { some-class }   cssProps = {{   background :   #f00   }}   /   Note:  FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to  FieldRendererHelper  implementation.", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldDateRenderer/#implementation", 
            "text": "The FieldDateRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    text  string  no  Text to be rendered", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldFileTypeRenderer/", 
            "text": "FieldFileTypeRenderer control\n\n\nThis control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons.\n\n\nNote:\n this control displays correctly starting with SharePoint Framework v1.4\n\n\n\n\nCovered Fields\n\n\n\n\nType (DocIcon)\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldFileTypeRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldFileTypeRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldFileTypeRenderer\n control in your code as follows:\n\n\n\n\nFieldFileTypeRenderer\n \npath\n=\n{\nfileLeafRef\n}\n \nisFolder\n=\n{\nfalse\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldFileTypeRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\npath\n\n\nstring\n\n\nyes\n\n\ndocument/file path\n\n\n\n\n\n\nisFolder\n\n\nboolean\n\n\nno\n\n\ntrue if the icon should be rendered for a folder, not file", 
            "title": "FieldFileTypeRenderer"
        }, 
        {
            "location": "/controls/fields/FieldFileTypeRenderer/#fieldfiletyperenderer-control", 
            "text": "This control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons.  Note:  this control displays correctly starting with SharePoint Framework v1.4", 
            "title": "FieldFileTypeRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldFileTypeRenderer/#covered-fields", 
            "text": "Type (DocIcon)", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldFileTypeRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldFileTypeRenderer   }   from   @pnp/spfx-controls-react/lib/FieldFileTypeRenderer ;    Use the  FieldFileTypeRenderer  control in your code as follows:   FieldFileTypeRenderer   path = { fileLeafRef }   isFolder = { false }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldFileTypeRenderer/#implementation", 
            "text": "The FieldFileTypeRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    path  string  yes  document/file path    isFolder  boolean  no  true if the icon should be rendered for a folder, not file", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldLookupRenderer/", 
            "text": "FieldLookupRenderer control\n\n\nThis control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form.\n\n\nNote:\n this control displays correctly starting with SharePoint Framework v1.4\n\n\n\n\n\n\nCovered Fields\n\n\n\n\nLookup (single, multi)\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldLookupRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldLookupRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldLookupRenderer\n control in your code as follows:\n\n\n\n\nFieldLookupRenderer\n \nlookups\n=\n{\nevent\n.\nfieldValue\n}\n \nfieldId\n=\n{\nfield-guid\n}\n \ncontext\n=\n{\nthis\n.\ncontext\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldLookupRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\nlookups\n\n\nISPFieldLookupValue[]\n\n\nyes\n\n\nLookup field values.\n\n\n\n\n\n\ndispFormUrl\n\n\nboolean\n\n\nno\n\n\nUrl of Display form for the list that is referenced by the lookup.\n\n\n\n\n\n\nonClick\n\n\n(args: ILookupClickEventArgs) =\n {}\n\n\nno\n\n\nCustom event handler of lookup item click. If not set the dialog with Display Form will be shown.\n\n\n\n\n\n\nfieldId\n\n\nstring\n\n\nField's id\n\n\n\n\n\n\n\n\ncontext\n\n\nIContext\n\n\nCustomizer context. Must be providede if fieldId is set", 
            "title": "FieldLookupRenderer"
        }, 
        {
            "location": "/controls/fields/FieldLookupRenderer/#fieldlookuprenderer-control", 
            "text": "This control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form.  Note:  this control displays correctly starting with SharePoint Framework v1.4", 
            "title": "FieldLookupRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldLookupRenderer/#covered-fields", 
            "text": "Lookup (single, multi)", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldLookupRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldLookupRenderer   }   from   @pnp/spfx-controls-react/lib/FieldLookupRenderer ;    Use the  FieldLookupRenderer  control in your code as follows:   FieldLookupRenderer   lookups = { event . fieldValue }   fieldId = { field-guid }   context = { this . context }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldLookupRenderer/#implementation", 
            "text": "The FieldLookupRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    lookups  ISPFieldLookupValue[]  yes  Lookup field values.    dispFormUrl  boolean  no  Url of Display form for the list that is referenced by the lookup.    onClick  (args: ILookupClickEventArgs) =  {}  no  Custom event handler of lookup item click. If not set the dialog with Display Form will be shown.    fieldId  string  Field's id     context  IContext  Customizer context. Must be providede if fieldId is set", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldNameRenderer/", 
            "text": "FieldNameRenderer control\n\n\nThis control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon.\n\n\nNote:\n The Name column in document libraries is marked as noneditable. See \nthis issue\n for details.\n\nNote\n Glimmer icon displays correctly starting with SharePoint Framework v1.4\n\n\n\n\nCovered Fields\n\n\n\n\nDocument Name (LinkFilename, LinkFilenameNomenu, FileLieafRef)\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldNameRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldNameRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldNameRenderer\n control in your code as follows:\n\n\n\n\nFieldNameRenderer\n \ntext\n=\n{\nTechnical Requirements\n}\n \nisLink\n=\n{\ntrue\n}\n \nisNew\n=\n{\nfalse\n}\n \nfilePath\n=\n{\nhttps://contoso.sharepoint.com/Documents/tech-requirements.pdf\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldNameRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nno\n\n\nText to be rendered.\n\n\n\n\n\n\nisLink\n\n\nboolean\n\n\nyes\n\n\nTrue if the name should be rendered as a link.\n\n\n\n\n\n\nisNew\n\n\nboolean\n\n\nno\n\n\nTrue if the document is new.\n\n\n\n\n\n\nfilePath\n\n\nstring\n\n\nno\n\n\nPath to the document.\n\n\n\n\n\n\nhasPreview\n\n\nboolean\n\n\nno\n\n\nTrue if the document has preview (true by default)\n\n\n\n\n\n\nonClick\n\n\n(args: INameClickEventArgs) =\n {}\n\n\nno\n\n\nCustom handler for link click. If not set link click will lead to rendering document preview.", 
            "title": "FieldNameRenderer"
        }, 
        {
            "location": "/controls/fields/FieldNameRenderer/#fieldnamerenderer-control", 
            "text": "This control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon.  Note:  The Name column in document libraries is marked as noneditable. See  this issue  for details. Note  Glimmer icon displays correctly starting with SharePoint Framework v1.4", 
            "title": "FieldNameRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldNameRenderer/#covered-fields", 
            "text": "Document Name (LinkFilename, LinkFilenameNomenu, FileLieafRef)", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldNameRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldNameRenderer   }   from   @pnp/spfx-controls-react/lib/FieldNameRenderer ;    Use the  FieldNameRenderer  control in your code as follows:   FieldNameRenderer   text = { Technical Requirements }   isLink = { true }   isNew = { false }   filePath = { https://contoso.sharepoint.com/Documents/tech-requirements.pdf }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldNameRenderer/#implementation", 
            "text": "The FieldNameRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    text  string  no  Text to be rendered.    isLink  boolean  yes  True if the name should be rendered as a link.    isNew  boolean  no  True if the document is new.    filePath  string  no  Path to the document.    hasPreview  boolean  no  True if the document has preview (true by default)    onClick  (args: INameClickEventArgs) =  {}  no  Custom handler for link click. If not set link click will lead to rendering document preview.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldTaxonomyRenderer/", 
            "text": "FieldTaxonomyRenderer control\n\n\nThis control renders terms from Managed Metadata field.\n\n\n\n\nCovered Fields\n\n\n\n\nManaged Metadata\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldTaxonomyRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldTaxonomyRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldTaxonomyRenderer\n control in your code as follows:\n\n\n\n\nFieldTaxonomyRenderer\n \nterms\n=\n{\nevent\n.\nfieldValue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldTaxonomyRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\nterms\n\n\nITerm[]\n\n\nyes\n\n\nManaged Metadata terms.", 
            "title": "FieldTaxonomyRenderer"
        }, 
        {
            "location": "/controls/fields/FieldTaxonomyRenderer/#fieldtaxonomyrenderer-control", 
            "text": "This control renders terms from Managed Metadata field.", 
            "title": "FieldTaxonomyRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldTaxonomyRenderer/#covered-fields", 
            "text": "Managed Metadata", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldTaxonomyRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldTaxonomyRenderer   }   from   @pnp/spfx-controls-react/lib/FieldTaxonomyRenderer ;    Use the  FieldTaxonomyRenderer  control in your code as follows:   FieldTaxonomyRenderer   terms = { event . fieldValue }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldTaxonomyRenderer/#implementation", 
            "text": "The FieldTaxonomyRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    terms  ITerm[]  yes  Managed Metadata terms.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldTextRenderer/", 
            "text": "FieldTextRenderer control\n\n\nThis control renders simple text.\n\n\n\n\nCovered Fields\n\n\n\n\nSingle line of text\n\n\nMultiple lines of text\n\n\nChoice\n\n\nNumber\n\n\nCurrency\n\n\nYes/No\n\n\nDefault renderer for uncovered types of fields\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldTextRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldTextRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldTextRenderer\n control in your code as follows:\n\n\n\n\nFieldTextRenderer\n \ntext\n=\n{\nevent\n.\nfieldValue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldTextRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nno\n\n\nText to be rendered", 
            "title": "FieldTextRenderer"
        }, 
        {
            "location": "/controls/fields/FieldTextRenderer/#fieldtextrenderer-control", 
            "text": "This control renders simple text.", 
            "title": "FieldTextRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldTextRenderer/#covered-fields", 
            "text": "Single line of text  Multiple lines of text  Choice  Number  Currency  Yes/No  Default renderer for uncovered types of fields", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldTextRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldTextRenderer   }   from   @pnp/spfx-controls-react/lib/FieldTextRenderer ;    Use the  FieldTextRenderer  control in your code as follows:   FieldTextRenderer   text = { event . fieldValue }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldTextRenderer/#implementation", 
            "text": "The FieldTextRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    text  string  no  Text to be rendered", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldTitleRenderer/", 
            "text": "FieldTitleRenderer control\n\n\nThis control renders title either as a simple text or as a link to the Dislpay Form. Additional actions like Share and Context Menu are not implemented.\n\n\n\n\nCovered Fields\n\n\n\n\nList Item Title (Title, LinkTitle, LinkTitleNoMenu)\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldTitleRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldTitleRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldTitleRenderer\n control in your code as follows:\n\n\n\n\nFieldTitleRenderer\n \ntext\n=\n{\nTechnical Requirements\n}\n \nisLink\n=\n{\ntrue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldTitleRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nno\n\n\nText to be rendered.\n\n\n\n\n\n\nisLink\n\n\nboolean\n\n\nyes\n\n\nTrue if the name should be rendered as a link.\n\n\n\n\n\n\nbaseUrl\n\n\nstring\n\n\nno\n\n\nWeb Url. Should be provided if \nonClick\n is not defined\n\n\n\n\n\n\nlistId\n\n\nstring\n\n\nno\n\n\nList Id. Should be provided if \nonClick\n is not defined\n\n\n\n\n\n\nid\n\n\nnumber\n\n\nno\n\n\nItem Id. Should be provided if \nonClick\n is not defined\n\n\n\n\n\n\nonClick\n\n\n(args: ITitleClickEventArgs) =\n {}\n\n\nno\n\n\nCustom title click event handler. If not set Display form for the item will be displayed.", 
            "title": "FieldTitleRenderer"
        }, 
        {
            "location": "/controls/fields/FieldTitleRenderer/#fieldtitlerenderer-control", 
            "text": "This control renders title either as a simple text or as a link to the Dislpay Form. Additional actions like Share and Context Menu are not implemented.", 
            "title": "FieldTitleRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldTitleRenderer/#covered-fields", 
            "text": "List Item Title (Title, LinkTitle, LinkTitleNoMenu)", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldTitleRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldTitleRenderer   }   from   @pnp/spfx-controls-react/lib/FieldTitleRenderer ;    Use the  FieldTitleRenderer  control in your code as follows:   FieldTitleRenderer   text = { Technical Requirements }   isLink = { true }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldTitleRenderer/#implementation", 
            "text": "The FieldTitleRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    text  string  no  Text to be rendered.    isLink  boolean  yes  True if the name should be rendered as a link.    baseUrl  string  no  Web Url. Should be provided if  onClick  is not defined    listId  string  no  List Id. Should be provided if  onClick  is not defined    id  number  no  Item Id. Should be provided if  onClick  is not defined    onClick  (args: ITitleClickEventArgs) =  {}  no  Custom title click event handler. If not set Display form for the item will be displayed.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldUrlRenderer/", 
            "text": "FieldUrlRenderer control\n\n\nThis control renders Hyperlink or Picture field value as a link or image.\n\n\n\n\n\n\nCovered Fields\n\n\n\n\nHyperlink or Image\n\n\nUrl in Links List\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldUrlRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldUrlRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldUrlRenderer\n control in your code as follows:\n\n\n\n\n// to show Url\n\n\nFieldUrlRenderer\n \ntext\n=\n{\nmicrosoft\n}\n \nurl\n=\n{\nhttp://www.microsoft.com\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n// to show Image\n\n\nFieldUrlRenderer\n \nurl\n=\n{\nhttp://cdn.contoso.com/images/logo.png\n}\n \nisImageUrl\n=\n{\ntrue\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldUrlRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nno\n\n\nText to be rendered.\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nyes\n\n\nUrl.\n\n\n\n\n\n\nisImageUrl\n\n\nboolean\n\n\nno\n\n\nTrue if the control should be rendered as an image.", 
            "title": "FieldUrlRenderer"
        }, 
        {
            "location": "/controls/fields/FieldUrlRenderer/#fieldurlrenderer-control", 
            "text": "This control renders Hyperlink or Picture field value as a link or image.", 
            "title": "FieldUrlRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldUrlRenderer/#covered-fields", 
            "text": "Hyperlink or Image  Url in Links List", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldUrlRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldUrlRenderer   }   from   @pnp/spfx-controls-react/lib/FieldUrlRenderer ;    Use the  FieldUrlRenderer  control in your code as follows:   // to show Url  FieldUrlRenderer   text = { microsoft }   url = { http://www.microsoft.com }   className = { some-class }   cssProps = {{   background :   #f00   }}   /  // to show Image  FieldUrlRenderer   url = { http://cdn.contoso.com/images/logo.png }   isImageUrl = { true }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldUrlRenderer/#implementation", 
            "text": "The FieldUrlRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    text  string  no  Text to be rendered.    url  string  yes  Url.    isImageUrl  boolean  no  True if the control should be rendered as an image.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/fields/FieldUserRenderer/", 
            "text": "FieldUserRenderer control\n\n\nThis control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control.\n\n\n\n\n\n\nNote:\n some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier\n\n\nCovered Fields\n\n\n\n\nPerson or Group\n\n\n\n\nHow to use this control in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/spfx-controls-react\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport\n \n{\n \nFieldUserRenderer\n \n}\n \nfrom\n \n@pnp/spfx-controls-react/lib/FieldUserRenderer\n;\n\n\n\n\n\n\n\n\nUse the \nFieldUserRenderer\n control in your code as follows:\n\n\n\n\nFieldUserRenderer\n \nusers\n=\n{\nevent\n.\nfieldValue\n}\n \ncontext\n=\n{\nthis\n.\ncontext\n}\n \nclassName\n=\n{\nsome-class\n}\n \ncssProps\n=\n{{\n \nbackground\n:\n \n#f00\n \n}}\n \n/\n\n\n\n\n\n\nImplementation\n\n\nThe FieldUserRenderer component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncssProps\n\n\nReact.CSSProperties\n\n\nno\n\n\nCSS styles to apply to the renderer.\n\n\n\n\n\n\nclassName\n\n\nICssInput\n\n\nno\n\n\nCSS classes to apply to the renderer.\n\n\n\n\n\n\nusers\n\n\nIPrincipal\n\n\nno\n\n\nUsers/groups to be displayed as they appear in \nevent.fieldValue\n for Field Customizer's \nonRenderCell\n event.\n\n\n\n\n\n\ncontext\n\n\nIContext\n\n\nyes\n\n\nSPFx context.", 
            "title": "FieldUserRenderer"
        }, 
        {
            "location": "/controls/fields/FieldUserRenderer/#fielduserrenderer-control", 
            "text": "This control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control.    Note:  some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier", 
            "title": "FieldUserRenderer control"
        }, 
        {
            "location": "/controls/fields/FieldUserRenderer/#covered-fields", 
            "text": "Person or Group", 
            "title": "Covered Fields"
        }, 
        {
            "location": "/controls/fields/FieldUserRenderer/#how-to-use-this-control-in-your-solutions", 
            "text": "Check that you installed the  @pnp/spfx-controls-react  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import   {   FieldUserRenderer   }   from   @pnp/spfx-controls-react/lib/FieldUserRenderer ;    Use the  FieldUserRenderer  control in your code as follows:   FieldUserRenderer   users = { event . fieldValue }   context = { this . context }   className = { some-class }   cssProps = {{   background :   #f00   }}   /", 
            "title": "How to use this control in your solutions"
        }, 
        {
            "location": "/controls/fields/FieldUserRenderer/#implementation", 
            "text": "The FieldUserRenderer component can be configured with the following properties:     Property  Type  Required  Description      cssProps  React.CSSProperties  no  CSS styles to apply to the renderer.    className  ICssInput  no  CSS classes to apply to the renderer.    users  IPrincipal  no  Users/groups to be displayed as they appear in  event.fieldValue  for Field Customizer's  onRenderCell  event.    context  IContext  yes  SPFx context.", 
            "title": "Implementation"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Releases\n\n\n1.2.4\n\n\nEnhancements\n\n\n\n\nHiding placeholder title on small zones\n\n\n\n\nFixes\n\n\n\n\niFrame dialog reference fix \n#52 - Need some more implementation documentation on IFrameDialog\n\n\n\n\n1.2.3\n\n\nEnhancements\n\n\n\n\nOptimized telemetry so that it only pushes control data\n\n\nWebPartTitle\n hide control completely when empty\n\n\n\n\n1.2.2\n\n\nFixes\n\n\n\n\nFixes an issue sorting in the \nListView\n control while items were selected. Indexes were not updated.\n\n\n\n\n1.2.1\n\n\nFixes\n\n\n\n\nFieldTaxonomyRenderer\n got fixed to support single and multiple values\n\n\n\n\n1.2.0\n\n\nNew controls\n\n\n\n\nField controls are added to the project\n\n\nIFrameDialog\n was added to the project\n\n\n\n\nFixes\n\n\n\n\nFixed theming in the \nWebPartTitle\n control\n\n\n\n\n1.1.3\n\n\n\n\nFileTypeIcon\n icon fixed. This control should now also work in SPFx extensions.\n\n\n\n\n1.1.2\n\n\n\n\nFix for WebPartTitle control to inherit color\n\n\nImproved telemetry with some object checks\n\n\n\n\n1.1.1\n\n\n\n\nRemoved operation name from telemetry\n\n\n\n\n1.1.0\n\n\n\n\nTelemetry added\n\n\n\n\n1.0.0\n\n\n\n\nNew control\n: WebPartTitle control got added.\n\n\nEnhancement\n: ListView control got extended with the ability to specify a set of preselected items.\n\n\n\n\nBeta 1.0.0-beta.8\n\n\n\n\nBug fix\n: bug fix for the \nListView\n control when selection is used in combination with \nsetState\n.\n\n\n\n\nBeta 1.0.0-beta.7\n\n\nAdded\n\n- Grouping functionality added to the \nListView\n control\n\n\nBeta 1.0.0-beta.6\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/about/release-notes/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/about/release-notes/#124", 
            "text": "Enhancements   Hiding placeholder title on small zones   Fixes   iFrame dialog reference fix  #52 - Need some more implementation documentation on IFrameDialog", 
            "title": "1.2.4"
        }, 
        {
            "location": "/about/release-notes/#123", 
            "text": "Enhancements   Optimized telemetry so that it only pushes control data  WebPartTitle  hide control completely when empty", 
            "title": "1.2.3"
        }, 
        {
            "location": "/about/release-notes/#122", 
            "text": "Fixes   Fixes an issue sorting in the  ListView  control while items were selected. Indexes were not updated.", 
            "title": "1.2.2"
        }, 
        {
            "location": "/about/release-notes/#121", 
            "text": "Fixes   FieldTaxonomyRenderer  got fixed to support single and multiple values", 
            "title": "1.2.1"
        }, 
        {
            "location": "/about/release-notes/#120", 
            "text": "New controls   Field controls are added to the project  IFrameDialog  was added to the project   Fixes   Fixed theming in the  WebPartTitle  control", 
            "title": "1.2.0"
        }, 
        {
            "location": "/about/release-notes/#113", 
            "text": "FileTypeIcon  icon fixed. This control should now also work in SPFx extensions.", 
            "title": "1.1.3"
        }, 
        {
            "location": "/about/release-notes/#112", 
            "text": "Fix for WebPartTitle control to inherit color  Improved telemetry with some object checks", 
            "title": "1.1.2"
        }, 
        {
            "location": "/about/release-notes/#111", 
            "text": "Removed operation name from telemetry", 
            "title": "1.1.1"
        }, 
        {
            "location": "/about/release-notes/#110", 
            "text": "Telemetry added", 
            "title": "1.1.0"
        }, 
        {
            "location": "/about/release-notes/#100", 
            "text": "New control : WebPartTitle control got added.  Enhancement : ListView control got extended with the ability to specify a set of preselected items.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta8", 
            "text": "Bug fix : bug fix for the  ListView  control when selection is used in combination with  setState .", 
            "title": "Beta 1.0.0-beta.8"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta7", 
            "text": "Added \n- Grouping functionality added to the  ListView  control", 
            "title": "Beta 1.0.0-beta.7"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta6", 
            "text": "Initial release", 
            "title": "Beta 1.0.0-beta.6"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n\nMIT License\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}