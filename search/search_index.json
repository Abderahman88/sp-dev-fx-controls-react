{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reusable React controls for your SharePoint Framework solutions This repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 is currently used. Getting started Installation To get started you have to install the following dependency to your project: @pnp/spfx-controls-react . Enter the following command to install the dependency to your project: npm install @pnp/spfx-controls-react --save --save-exact Configuration Note Since v1.4.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: ControlStrings : node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js Available controls The following controls are currently available: FileTypeIcon (Control that shows the icon of a specified file path or application) ListView (List view control) Placeholder (Control that can be used to show an initial placeholder if the web part has to be configured) SiteBreadcrumb (Breadcrumb control) TaxonomyPicker (Taxonomy Picker) PeoplePicker (People Picker) WebPartTitle (Customizable web part title control) IFrameDialog (renders a Dialog with an iframe as a content) Field customizer controls: Note If you want to use these controls in your solution, first check out the start guide for these controls: using the field controls . FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Home"},{"location":"#reusable-react-controls-for-your-sharepoint-framework-solutions","text":"This repository provides developers with a set of reusable React controls that can be used in SharePoint Framework (SPFx) solutions. The project provides controls for building web parts and extensions. Attention The controls project has a minimal dependency on SharePoint Framework version 1.3.0 . Be aware that the controls might not work in solutions your building for on-premises. As for on-premises solutions version 1.1.0 is currently used.","title":"Reusable React controls for your SharePoint Framework solutions"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#installation","text":"To get started you have to install the following dependency to your project: @pnp/spfx-controls-react . Enter the following command to install the dependency to your project: npm install @pnp/spfx-controls-react --save --save-exact","title":"Installation"},{"location":"#configuration","text":"Note Since v1.4.0 the localized resource path will automatically be configured during the dependency installing. Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the config/config.json and adding the following line to the localizedResources property: ControlStrings : node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js","title":"Configuration"},{"location":"#available-controls","text":"The following controls are currently available: FileTypeIcon (Control that shows the icon of a specified file path or application) ListView (List view control) Placeholder (Control that can be used to show an initial placeholder if the web part has to be configured) SiteBreadcrumb (Breadcrumb control) TaxonomyPicker (Taxonomy Picker) PeoplePicker (People Picker) WebPartTitle (Customizable web part title control) IFrameDialog (renders a Dialog with an iframe as a content) Field customizer controls: Note If you want to use these controls in your solution, first check out the start guide for these controls: using the field controls . FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Available controls"},{"location":"beta/","text":"Testing out a beta release All you need to do for testing out a beta release of @pnp/spfx-controls-react is to install the dependency as follows: npm install @pnp/spfx-controls-react@next --save Beta control documentation The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation . Next Steps Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Beta testing"},{"location":"beta/#testing-out-a-beta-release","text":"All you need to do for testing out a beta release of @pnp/spfx-controls-react is to install the dependency as follows: npm install @pnp/spfx-controls-react@next --save","title":"Testing out a beta release"},{"location":"beta/#beta-control-documentation","text":"The control documentation is only live for public releases, not for beta versions. If you want to checkout the markdown files of all controls in the dev branch: beta documentation .","title":"Beta control documentation"},{"location":"beta/#next-steps","text":"Once you installed the beta version, you can start using the controls in your solution. Go to the homepage to get an overview of all the available controls and the steps to get started: home .","title":"Next Steps"},{"location":"about/license/","text":"License Copyright (c) Microsoft Corporation. All rights reserved. MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Releases 1.8.0 Enhancements PeoplePicker : Specify to hide or show the users/groups which are hidden in the UI #122 WebPartTitle : changing font-sizes on different resolutions #114 WebPartTitle : Added accessibility tags for web part title #121 ListView : Resizable columns - introduced a isResizable property #119 FieldNameRenderer double click support added #116 TaxonomyPicker : table markup changed to DIV #113 PeoplePicker : ability to specify the source site to load users from #110 TaxonomyPicker : Disable the terms which are set as deprecated or unavailable for tagging #109 PeoplePicker : Specify principle type to retrieve (users, groups, ...) #94 Fixes FieldLookupRenderer : Fixed URL querystring params #126 IFrameDialog : dialog width is not correct in IE11 #118 PeoplePicker : fix freezes when typing in search values #117 1.7.0 Enhancements PeoplePicker : added functionality to initialize the control with person(s) or group(s) #98 PeoplePicker : support for searching on contains #93 PeoplePicker : find user based on email address #95 Bundle size: statically reference Office UI Fabric components in the FieldRenderer controls #107 Fixes FieldNameRenderer onClick does not suppress default link behavior #103 1.6.0 Enhancements Disabled property for PeoplePicker #88 Fixes New telemetry approach which allows you to use Application Insights #81 PeoplePicker property selectedItems not implemented? #90 1.5.0 New control(s) New PeoplePicker control added #19 Enhancements Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #82 Fixes Bug in TaxonomyPicker where values are not updated by an async change #83 FieldUserRenderer uses email prop for GetPropertiesFor #84 Fixed issue in single selection mode when all group items were selected in the ListView when user clicked on the group header #86 1.4.0 New control(s) SecurityTrimmedControl control got added #74 Enhancements Allow the TaxonomyPicker to also be used in Application Customizer #77 Add npm postinstall script to automatically add the locale config #78 Fixes Icon not showing up in the Placeholder control #76 1.3.0 Enhancements TaxonomyPicker control got added #22 #63 #64 ListPicker control got added #34 Fixes Issue fixed when the optional selection property was not provided to the ListView #65 1.2.5 Fixes Undo ListView item selection after items array updates #55 1.2.4 Enhancements Hiding placeholder title on small zones Fixes iFrame dialog reference fix #52 1.2.3 Enhancements Optimized telemetry so that it only pushes control data WebPartTitle hide control completely when empty 1.2.2 Fixes Fixes an issue sorting in the ListView control while items were selected. Indexes were not updated. 1.2.1 Fixes FieldTaxonomyRenderer got fixed to support single and multiple values 1.2.0 New control(s) Field controls are added to the project IFrameDialog was added to the project Fixes Fixed theming in the WebPartTitle control 1.1.3 Fixes FileTypeIcon icon fixed where it did not render an icon. This control should now works in SPFx extensions. 1.1.2 Enhancements Improved telemetry with some object checks Fixes Fix for WebPartTitle control to inherit color 1.1.1 Enhancements Removed operation name from telemetry 1.1.0 Enhancements Telemetry added 1.0.0 New control(s) WebPartTitle control got added Enhancements ListView control got extended with the ability to specify a set of preselected items. Beta 1.0.0-beta.8 Fixes Fix for the ListView control when selection is used in combination with setState . Beta 1.0.0-beta.7 New control(s) Grouping functionality added to the ListView control Beta 1.0.0-beta.6 New control(s) Initial release","title":"Release notes"},{"location":"about/release-notes/#releases","text":"","title":"Releases"},{"location":"about/release-notes/#180","text":"Enhancements PeoplePicker : Specify to hide or show the users/groups which are hidden in the UI #122 WebPartTitle : changing font-sizes on different resolutions #114 WebPartTitle : Added accessibility tags for web part title #121 ListView : Resizable columns - introduced a isResizable property #119 FieldNameRenderer double click support added #116 TaxonomyPicker : table markup changed to DIV #113 PeoplePicker : ability to specify the source site to load users from #110 TaxonomyPicker : Disable the terms which are set as deprecated or unavailable for tagging #109 PeoplePicker : Specify principle type to retrieve (users, groups, ...) #94 Fixes FieldLookupRenderer : Fixed URL querystring params #126 IFrameDialog : dialog width is not correct in IE11 #118 PeoplePicker : fix freezes when typing in search values #117","title":"1.8.0"},{"location":"about/release-notes/#170","text":"Enhancements PeoplePicker : added functionality to initialize the control with person(s) or group(s) #98 PeoplePicker : support for searching on contains #93 PeoplePicker : find user based on email address #95 Bundle size: statically reference Office UI Fabric components in the FieldRenderer controls #107 Fixes FieldNameRenderer onClick does not suppress default link behavior #103","title":"1.7.0"},{"location":"about/release-notes/#160","text":"Enhancements Disabled property for PeoplePicker #88 Fixes New telemetry approach which allows you to use Application Insights #81 PeoplePicker property selectedItems not implemented? #90","title":"1.6.0"},{"location":"about/release-notes/#150","text":"New control(s) New PeoplePicker control added #19 Enhancements Added properties to the TaxonomyPicker to specify which terms are disabled/not-selectable #82 Fixes Bug in TaxonomyPicker where values are not updated by an async change #83 FieldUserRenderer uses email prop for GetPropertiesFor #84 Fixed issue in single selection mode when all group items were selected in the ListView when user clicked on the group header #86","title":"1.5.0"},{"location":"about/release-notes/#140","text":"New control(s) SecurityTrimmedControl control got added #74 Enhancements Allow the TaxonomyPicker to also be used in Application Customizer #77 Add npm postinstall script to automatically add the locale config #78 Fixes Icon not showing up in the Placeholder control #76","title":"1.4.0"},{"location":"about/release-notes/#130","text":"Enhancements TaxonomyPicker control got added #22 #63 #64 ListPicker control got added #34 Fixes Issue fixed when the optional selection property was not provided to the ListView #65","title":"1.3.0"},{"location":"about/release-notes/#125","text":"Fixes Undo ListView item selection after items array updates #55","title":"1.2.5"},{"location":"about/release-notes/#124","text":"Enhancements Hiding placeholder title on small zones Fixes iFrame dialog reference fix #52","title":"1.2.4"},{"location":"about/release-notes/#123","text":"Enhancements Optimized telemetry so that it only pushes control data WebPartTitle hide control completely when empty","title":"1.2.3"},{"location":"about/release-notes/#122","text":"Fixes Fixes an issue sorting in the ListView control while items were selected. Indexes were not updated.","title":"1.2.2"},{"location":"about/release-notes/#121","text":"Fixes FieldTaxonomyRenderer got fixed to support single and multiple values","title":"1.2.1"},{"location":"about/release-notes/#120","text":"New control(s) Field controls are added to the project IFrameDialog was added to the project Fixes Fixed theming in the WebPartTitle control","title":"1.2.0"},{"location":"about/release-notes/#113","text":"Fixes FileTypeIcon icon fixed where it did not render an icon. This control should now works in SPFx extensions.","title":"1.1.3"},{"location":"about/release-notes/#112","text":"Enhancements Improved telemetry with some object checks Fixes Fix for WebPartTitle control to inherit color","title":"1.1.2"},{"location":"about/release-notes/#111","text":"Enhancements Removed operation name from telemetry","title":"1.1.1"},{"location":"about/release-notes/#110","text":"Enhancements Telemetry added","title":"1.1.0"},{"location":"about/release-notes/#100","text":"New control(s) WebPartTitle control got added Enhancements ListView control got extended with the ability to specify a set of preselected items.","title":"1.0.0"},{"location":"about/release-notes/#beta-100-beta8","text":"Fixes Fix for the ListView control when selection is used in combination with setState .","title":"Beta 1.0.0-beta.8"},{"location":"about/release-notes/#beta-100-beta7","text":"New control(s) Grouping functionality added to the ListView control","title":"Beta 1.0.0-beta.7"},{"location":"about/release-notes/#beta-100-beta6","text":"New control(s) Initial release","title":"Beta 1.0.0-beta.6"},{"location":"controls/FileTypeIcon/","text":"FileTypeIcon control This control returns the file type icon based on a specified file path or application. How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FileTypeIcon , ApplicationType , IconType , ImageSize } from @pnp/spfx-controls-react/lib/FileTypeIcon ; Use the FileTypeIcon control in your code as follows: /* Showing the icons font */ FileTypeIcon type = { IconType . font } application = { ApplicationType . Word } / FileTypeIcon type = { IconType . font } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . font } path = https://contoso.sharepoint.com/documents/filename.docx / FileTypeIcon type = { IconType . font } path = https://contoso.sharepoint.com/documents/filename.xslx / /* Showing the icon image */ FileTypeIcon type = { IconType . image } application = { ApplicationType . Word } / FileTypeIcon type = { IconType . image } path = https://contoso.sharepoint.com/documents/filename.docx / /* Icon image allows three different sizes */ FileTypeIcon type = { IconType . image } size = { ImageSize . small } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . image } size = { ImageSize . medium } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . image } size = { ImageSize . large } application = { ApplicationType . Excel } / Implementation The FileTypeIcon component can be configured with the following properties: Property Type Required Description application ApplicationType no Type of the application for which you want to show the icon. Use the ApplicationType enum to get the list of available applications. path string no Path to the document. If this is provided, the control will use the file extension to display the corresponding icon. size ImageSize no This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the ImageSize enum to get the list of available images sizes. type IconType yes This property specifies is you want to use the icon font or image. Use the IconType enum to get the list of available icon types.","title":"FileTypeIcon"},{"location":"controls/FileTypeIcon/#filetypeicon-control","text":"This control returns the file type icon based on a specified file path or application.","title":"FileTypeIcon control"},{"location":"controls/FileTypeIcon/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FileTypeIcon , ApplicationType , IconType , ImageSize } from @pnp/spfx-controls-react/lib/FileTypeIcon ; Use the FileTypeIcon control in your code as follows: /* Showing the icons font */ FileTypeIcon type = { IconType . font } application = { ApplicationType . Word } / FileTypeIcon type = { IconType . font } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . font } path = https://contoso.sharepoint.com/documents/filename.docx / FileTypeIcon type = { IconType . font } path = https://contoso.sharepoint.com/documents/filename.xslx / /* Showing the icon image */ FileTypeIcon type = { IconType . image } application = { ApplicationType . Word } / FileTypeIcon type = { IconType . image } path = https://contoso.sharepoint.com/documents/filename.docx / /* Icon image allows three different sizes */ FileTypeIcon type = { IconType . image } size = { ImageSize . small } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . image } size = { ImageSize . medium } application = { ApplicationType . Excel } / FileTypeIcon type = { IconType . image } size = { ImageSize . large } application = { ApplicationType . Excel } /","title":"How to use this control in your solutions"},{"location":"controls/FileTypeIcon/#implementation","text":"The FileTypeIcon component can be configured with the following properties: Property Type Required Description application ApplicationType no Type of the application for which you want to show the icon. Use the ApplicationType enum to get the list of available applications. path string no Path to the document. If this is provided, the control will use the file extension to display the corresponding icon. size ImageSize no This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the ImageSize enum to get the list of available images sizes. type IconType yes This property specifies is you want to use the icon font or image. Use the IconType enum to get the list of available icon types.","title":"Implementation"},{"location":"controls/IFrameDialog/","text":"IFrameDialog control This control renders a Dialog with an iframe as a content. Here is an example of the control in action: How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFrameDialog } from @pnp/spfx-controls-react/lib/IFrameDialog ; Use the IFrameDialog control in your code as follows ( this._onIframeLoaded and this._onDialogDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively): IFrameDialog url = { this . state . lookupDispFormUrl } iframeOnLoad = { this . _onIframeLoaded . bind ( this )} hidden = { this . state . hideDialog } onDismiss = { this . _onDialogDismiss . bind ( this )} modalProps = {{ isBlocking : true , containerClassName : styles.dialogContainer }} dialogContentProps = {{ type : DialogType.close , showCloseButton : true }} width = { 570px } height = { 315px } / Implementation The IFrameDialog component can be configured with the following properties: Property Type Required Description dialogContentProps IDialogContentProps no Props to be passed through to Dialog Content. hidden boolean no Whether the dialog is hidden. modalProps IModalProps no Props to be passed through to Modal. onDismiss (ev?: React.MouseEvent ) = any no A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal. url string yes iframe Url iframeOnload iframeOnLoad?: (iframe: any) = {} no iframe's onload event handler width string yes iframe's width heigth string yes iframe's height","title":"IFrameDialog"},{"location":"controls/IFrameDialog/#iframedialog-control","text":"This control renders a Dialog with an iframe as a content. Here is an example of the control in action:","title":"IFrameDialog control"},{"location":"controls/IFrameDialog/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { IFrameDialog } from @pnp/spfx-controls-react/lib/IFrameDialog ; Use the IFrameDialog control in your code as follows ( this._onIframeLoaded and this._onDialogDismiss are methods that should be implemented if you want to execute some actions when the iframe content is loaded and dialog should be closed respectively): IFrameDialog url = { this . state . lookupDispFormUrl } iframeOnLoad = { this . _onIframeLoaded . bind ( this )} hidden = { this . state . hideDialog } onDismiss = { this . _onDialogDismiss . bind ( this )} modalProps = {{ isBlocking : true , containerClassName : styles.dialogContainer }} dialogContentProps = {{ type : DialogType.close , showCloseButton : true }} width = { 570px } height = { 315px } /","title":"How to use this control in your solutions"},{"location":"controls/IFrameDialog/#implementation","text":"The IFrameDialog component can be configured with the following properties: Property Type Required Description dialogContentProps IDialogContentProps no Props to be passed through to Dialog Content. hidden boolean no Whether the dialog is hidden. modalProps IModalProps no Props to be passed through to Modal. onDismiss (ev?: React.MouseEvent ) = any no A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal. url string yes iframe Url iframeOnload iframeOnLoad?: (iframe: any) = {} no iframe's onload event handler width string yes iframe's width heigth string yes iframe's height","title":"Implementation"},{"location":"controls/ListPicker/","text":"ListPicker control This control allows you to select one or multiple available lists/libraries of the current site. Here is an example of the control: ListPicker single selection mode: ListPicker multi-selection mode How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListPicker } from @pnp/spfx-controls-react/lib/ListPicker ; Use the ListPicker control in your code as follows: ListPicker context = { this . props . context } label = Select your list(s) placeHolder = Select your list(s) baseTemplate = { 100 } includeHidden = { false } multiSelect = { false } onSelectionChanged = { this . onListPickerChange } / The onSelectionChanged change event returns the list(s) and can be implemented as follows: private onListPickerChange ( lists : string | string []) { console . log ( Lists: , lists ); } Implementation The ListPicker control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes The context object of the SPFx loaded webpart or customizer. className string no If provided, additional class name to provide on the dropdown element. disabled boolean no Whether or not the control is disabled. baseTemplate number no The SharePoint BaseTemplate ID to filter the list options by. includeHidden boolean no Whether or not to include hidden lists. Default is true . orderBy LibsOrderBy no How to order the lists retrieved from SharePoint. selectedList string OR string[] no Keys of the selected item(s). If you provide this, you must maintain selection state by observing onSelectionChanged events and passing a new value in when changed. multiSelect boolean no Optional mode indicates if multi-choice selections is allowed. Default to false . label string no Label to use for the control. placeholder string no Placeholder label to show in the dropdown. onSelectionChanged (newValue: string OR string[]): void no Callback function when the selected option changes. Enum LibsOrderBy Value Id Title","title":"ListPicker"},{"location":"controls/ListPicker/#listpicker-control","text":"This control allows you to select one or multiple available lists/libraries of the current site. Here is an example of the control: ListPicker single selection mode: ListPicker multi-selection mode","title":"ListPicker control"},{"location":"controls/ListPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the control into your component: import { ListPicker } from @pnp/spfx-controls-react/lib/ListPicker ; Use the ListPicker control in your code as follows: ListPicker context = { this . props . context } label = Select your list(s) placeHolder = Select your list(s) baseTemplate = { 100 } includeHidden = { false } multiSelect = { false } onSelectionChanged = { this . onListPickerChange } / The onSelectionChanged change event returns the list(s) and can be implemented as follows: private onListPickerChange ( lists : string | string []) { console . log ( Lists: , lists ); }","title":"How to use this control in your solutions"},{"location":"controls/ListPicker/#implementation","text":"The ListPicker control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes The context object of the SPFx loaded webpart or customizer. className string no If provided, additional class name to provide on the dropdown element. disabled boolean no Whether or not the control is disabled. baseTemplate number no The SharePoint BaseTemplate ID to filter the list options by. includeHidden boolean no Whether or not to include hidden lists. Default is true . orderBy LibsOrderBy no How to order the lists retrieved from SharePoint. selectedList string OR string[] no Keys of the selected item(s). If you provide this, you must maintain selection state by observing onSelectionChanged events and passing a new value in when changed. multiSelect boolean no Optional mode indicates if multi-choice selections is allowed. Default to false . label string no Label to use for the control. placeholder string no Placeholder label to show in the dropdown. onSelectionChanged (newValue: string OR string[]): void no Callback function when the selected option changes. Enum LibsOrderBy Value Id Title","title":"Implementation"},{"location":"controls/ListView.ContextualMenu/","text":"ListView: Add a contextual menu The ContextualMenu component In order to create a contextual menu for your list view, you first need to create a new component which will use a combination of an IconButton and ContextualMenu controls from the Office UI Fabric React. Here is some sample code: import * as React from react ; import { Layer , IconButton , IButtonProps } from office-ui-fabric-react ; import { ContextualMenuItemType } from office-ui-fabric-react/lib/ContextualMenu ; // The following are project specific components import { IECBProps } from ./IECBProps ; import styles from ./ECB.module.scss ; import { IListitem } from ../../model/IListitem ; export class ECB extends React . Component IECBProps , {} { public constructor ( props : IECBProps ) { super ( props ); this . state = { panelOpen : false }; } public render() { return ( div className = { styles . ecb } IconButton id = ContextualMenuButton1 className = { styles . ecbbutton } text = width = 30 split = { false } iconProps = { { iconName : MoreVertical } } menuIconProps = { { iconName : } } menuProps = {{ shouldFocusOnMount : true , items : [ { key : action1 , name : Action 1 , onClick : this.handleClick.bind ( this , this . props . item . Firstname + Action 1 ) }, { key : divider_1 , itemType : ContextualMenuItemType.Divider }, { key : action2 , name : Action 2 , onClick : this.handleClick.bind ( this , this . props . item . Firstname + Action 2 ) }, { key : action3 , name : Action 3 , onClick : this.handleClick.bind ( this , this . props . item . Lastname + Action 3 ) }, { key : disabled , name : Disabled action , disabled : true , onClick : () = console . error ( Disabled action should not be clickable. ) } ] }} / /div ); } private handleClick ( source : string , event ) { alert ( ` ${ source } clicked` ); } } The ListView column Once the ECB component is created, you can add the contextual menu to the ListView control. In order to do this, you have to insert another Viewfield in code at the position of our choice. For instance after the Lastname : { name : , sorting : false , maxWidth : 40 , render : ( rowitem : IListitem ) = { const element : React.ReactElement IECBProps = React . createElement ( ECB , { item : rowitem } ); return element ; } } Inside the render method of the IViewField , the ECB component gets created and the current item will be used as a reference for the clicked row. The result The result will look like the following: Once you click on an action, you will see the alert:","title":"ListView: add a contextual menu"},{"location":"controls/ListView.ContextualMenu/#listview-add-a-contextual-menu","text":"","title":"ListView: Add a contextual menu"},{"location":"controls/ListView.ContextualMenu/#the-contextualmenu-component","text":"In order to create a contextual menu for your list view, you first need to create a new component which will use a combination of an IconButton and ContextualMenu controls from the Office UI Fabric React. Here is some sample code: import * as React from react ; import { Layer , IconButton , IButtonProps } from office-ui-fabric-react ; import { ContextualMenuItemType } from office-ui-fabric-react/lib/ContextualMenu ; // The following are project specific components import { IECBProps } from ./IECBProps ; import styles from ./ECB.module.scss ; import { IListitem } from ../../model/IListitem ; export class ECB extends React . Component IECBProps , {} { public constructor ( props : IECBProps ) { super ( props ); this . state = { panelOpen : false }; } public render() { return ( div className = { styles . ecb } IconButton id = ContextualMenuButton1 className = { styles . ecbbutton } text = width = 30 split = { false } iconProps = { { iconName : MoreVertical } } menuIconProps = { { iconName : } } menuProps = {{ shouldFocusOnMount : true , items : [ { key : action1 , name : Action 1 , onClick : this.handleClick.bind ( this , this . props . item . Firstname + Action 1 ) }, { key : divider_1 , itemType : ContextualMenuItemType.Divider }, { key : action2 , name : Action 2 , onClick : this.handleClick.bind ( this , this . props . item . Firstname + Action 2 ) }, { key : action3 , name : Action 3 , onClick : this.handleClick.bind ( this , this . props . item . Lastname + Action 3 ) }, { key : disabled , name : Disabled action , disabled : true , onClick : () = console . error ( Disabled action should not be clickable. ) } ] }} / /div ); } private handleClick ( source : string , event ) { alert ( ` ${ source } clicked` ); } }","title":"The ContextualMenu component"},{"location":"controls/ListView.ContextualMenu/#the-listview-column","text":"Once the ECB component is created, you can add the contextual menu to the ListView control. In order to do this, you have to insert another Viewfield in code at the position of our choice. For instance after the Lastname : { name : , sorting : false , maxWidth : 40 , render : ( rowitem : IListitem ) = { const element : React.ReactElement IECBProps = React . createElement ( ECB , { item : rowitem } ); return element ; } } Inside the render method of the IViewField , the ECB component gets created and the current item will be used as a reference for the clicked row.","title":"The ListView column"},{"location":"controls/ListView.ContextualMenu/#the-result","text":"The result will look like the following: Once you click on an action, you will see the alert:","title":"The result"},{"location":"controls/ListView/","text":"ListView control This control renders a list view for the given set of items. List view control with grouping applied How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { ListView , IViewField , SelectionMode , GroupOrder , IGrouping } from @pnp/spfx-controls-react/lib/ListView ; Use the ListView control in your code as follows: ListView items = { items } viewFields = { viewFields } iconFieldName = ServerRelativeUrl compact = { true } selectionMode = { SelectionMode . multiple } selection = { this . _getSelection } groupByFields = { groupByFields } / With the selection property you can define a method that which gets called when the user selects one or more items in the list view: private _getSelection ( items : any []) { console . log ( Selected items: , items ); } With the groupByFields property you can define an array of field objects which will be used for grouping. Important : the same order of the fields defines how grouping will be applied. In the snippet the ListView control will first group by the Extension and after that by the Author field. const groupByFields : IGrouping [] = [ { name : Extension , order : GroupOrder.ascending }, { name : Author , order : GroupOrder.descending } ]; Extend ListView with a ContextualMenu To extend the ListView control with a ContextualMenu refer to ListView.ContextualMenu . Implementation The ListView control can be configured with the following properties: Property Type Required Description iconFieldName string no Specify the name of the file URL path which will be used to show the file icon. items any[] yes Items to render in the list view. viewFields IViewField[] no The fields you want to render in the list view. Check the IViewField implementation to see which properties you can define. compact boolean no Boolean value to indicate if the control should render in compact mode. By default this is set to false . selectionMode SelectionMode no Specify if the items in the list view can be selected and how. Options are: none, single, multi. selection function no Selection event that passes the selected item(s) from the list view. groupByFields IGrouping[] no Defines the field on which you want to group the items in the list view. defaultSelection number[] no The index of the items to be select by default The IViewField has the following implementation: Property Type Required Description name string yes Name of the field. displayName string no Name that will be used as the column title. If not defined, the name property will be used. linkPropertyName string no Specify the field name that needs to be used to render a link for the current field. sorting boolean no Specify if you want to enable sorting for the current field. maxWidth number no Specify the minimum width of the column. maxWidth number no Specify the maximum width of the column. isResizable boolean no Determines if the column can be resized. render function no Override how the field has to get rendered. The IGrouping has the following implementation: Property Type Required Description name string yes Name of the field order GroupOrder yes Specify how the group needs to be ordered. enum GroupOrder Value Description ascending Order the group in ascending order. descending Order the group in descending order.","title":"ListView"},{"location":"controls/ListView/#listview-control","text":"This control renders a list view for the given set of items. List view control with grouping applied","title":"ListView control"},{"location":"controls/ListView/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { ListView , IViewField , SelectionMode , GroupOrder , IGrouping } from @pnp/spfx-controls-react/lib/ListView ; Use the ListView control in your code as follows: ListView items = { items } viewFields = { viewFields } iconFieldName = ServerRelativeUrl compact = { true } selectionMode = { SelectionMode . multiple } selection = { this . _getSelection } groupByFields = { groupByFields } / With the selection property you can define a method that which gets called when the user selects one or more items in the list view: private _getSelection ( items : any []) { console . log ( Selected items: , items ); } With the groupByFields property you can define an array of field objects which will be used for grouping. Important : the same order of the fields defines how grouping will be applied. In the snippet the ListView control will first group by the Extension and after that by the Author field. const groupByFields : IGrouping [] = [ { name : Extension , order : GroupOrder.ascending }, { name : Author , order : GroupOrder.descending } ]; Extend ListView with a ContextualMenu To extend the ListView control with a ContextualMenu refer to ListView.ContextualMenu .","title":"How to use this control in your solutions"},{"location":"controls/ListView/#implementation","text":"The ListView control can be configured with the following properties: Property Type Required Description iconFieldName string no Specify the name of the file URL path which will be used to show the file icon. items any[] yes Items to render in the list view. viewFields IViewField[] no The fields you want to render in the list view. Check the IViewField implementation to see which properties you can define. compact boolean no Boolean value to indicate if the control should render in compact mode. By default this is set to false . selectionMode SelectionMode no Specify if the items in the list view can be selected and how. Options are: none, single, multi. selection function no Selection event that passes the selected item(s) from the list view. groupByFields IGrouping[] no Defines the field on which you want to group the items in the list view. defaultSelection number[] no The index of the items to be select by default The IViewField has the following implementation: Property Type Required Description name string yes Name of the field. displayName string no Name that will be used as the column title. If not defined, the name property will be used. linkPropertyName string no Specify the field name that needs to be used to render a link for the current field. sorting boolean no Specify if you want to enable sorting for the current field. maxWidth number no Specify the minimum width of the column. maxWidth number no Specify the maximum width of the column. isResizable boolean no Determines if the column can be resized. render function no Override how the field has to get rendered. The IGrouping has the following implementation: Property Type Required Description name string yes Name of the field order GroupOrder yes Specify how the group needs to be ordered. enum GroupOrder Value Description ascending Order the group in ascending order. descending Order the group in descending order.","title":"Implementation"},{"location":"controls/PeoplePicker/","text":"People Picker This control renders a People picker field which can be used to select one or more users from a SharePoint group or site. The control can be configured as mandatory. It will show a custom error message if field is empty. Empty People Picker control with error message and tooltip Selecting People Selected people How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { PeoplePicker , PrincipalType } from @pnp/spfx-controls-react/lib/PeoplePicker ; Use the PeoplePicker control in your code as follows: PeoplePicker context = { this . props . context } titleText = People Picker personSelectionLimit = { 3 } groupName = { Team Site Owners } // Leave this blank in case you want to filter from all users showtooltip = { true } isRequired = { true } disabled = { true } selectedItems = { this . _getPeoplePickerItems } showHiddenInUI = { false } principleTypes = {[ PrincipalType . User ]} / With the selectedItems property you can get the selected People in the Peoplepicker : private _getPeoplePickerItems ( items : any []) { console . log ( Items: , items ); } Implementation The People picker control can be configured with the following properties: Property Type Required Description context WebPartContext yes Context of the current web part. titleText string yes Text to be displayed on the control groupName string no group from which users are fetched. Leave it blank if need to filter all users personSelectionLimit number no Defines the limit of people that can be selected in the control isRequired boolean no Set if the control is required or not disabled boolean no Set if the control is disabled or not errorMessage string no Specify the error message to display errorMessageclassName string no applies custom styling to the error message section showtooltip boolean no Defines if need a tooltip or not tooltip string no Specify the tooltip message to display tooltipDirectional DirectionalHint no Direction where the tooltip would be shown selectedItems function no get the selected users in the control peoplePickerWPclassName string no applies custom styling to the people picker element peoplePickerCntrlclassName string no applies custom styling to the people picker control only defaultSelectedUsers string[] no Default selected user emails webAbsoluteUrl string no Specify the site URL on which you want to perform the user query call. Default is the current site URL. showHiddenInUI boolean no Show users which are hidden from the UI. By default these users/groups hidden for the UI will not be shown. principleTypes PrincipleType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name User DistributionList SecurityGroup SharePointGroup","title":"PeoplePicker"},{"location":"controls/PeoplePicker/#people-picker","text":"This control renders a People picker field which can be used to select one or more users from a SharePoint group or site. The control can be configured as mandatory. It will show a custom error message if field is empty. Empty People Picker control with error message and tooltip Selecting People Selected people","title":"People Picker"},{"location":"controls/PeoplePicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { PeoplePicker , PrincipalType } from @pnp/spfx-controls-react/lib/PeoplePicker ; Use the PeoplePicker control in your code as follows: PeoplePicker context = { this . props . context } titleText = People Picker personSelectionLimit = { 3 } groupName = { Team Site Owners } // Leave this blank in case you want to filter from all users showtooltip = { true } isRequired = { true } disabled = { true } selectedItems = { this . _getPeoplePickerItems } showHiddenInUI = { false } principleTypes = {[ PrincipalType . User ]} / With the selectedItems property you can get the selected People in the Peoplepicker : private _getPeoplePickerItems ( items : any []) { console . log ( Items: , items ); }","title":"How to use this control in your solutions"},{"location":"controls/PeoplePicker/#implementation","text":"The People picker control can be configured with the following properties: Property Type Required Description context WebPartContext yes Context of the current web part. titleText string yes Text to be displayed on the control groupName string no group from which users are fetched. Leave it blank if need to filter all users personSelectionLimit number no Defines the limit of people that can be selected in the control isRequired boolean no Set if the control is required or not disabled boolean no Set if the control is disabled or not errorMessage string no Specify the error message to display errorMessageclassName string no applies custom styling to the error message section showtooltip boolean no Defines if need a tooltip or not tooltip string no Specify the tooltip message to display tooltipDirectional DirectionalHint no Direction where the tooltip would be shown selectedItems function no get the selected users in the control peoplePickerWPclassName string no applies custom styling to the people picker element peoplePickerCntrlclassName string no applies custom styling to the people picker control only defaultSelectedUsers string[] no Default selected user emails webAbsoluteUrl string no Specify the site URL on which you want to perform the user query call. Default is the current site URL. showHiddenInUI boolean no Show users which are hidden from the UI. By default these users/groups hidden for the UI will not be shown. principleTypes PrincipleType[] no Define which type of data you want to retrieve: User, SharePoint groups, Security groups. Multiple are possible. Enum PrincipalType The PrincipalType enum can be used to specify the types of information you want to query: User, Security groups, and/or SharePoint groups. Name User DistributionList SecurityGroup SharePointGroup","title":"Implementation"},{"location":"controls/Placeholder/","text":"Placeholder control This control renders a placeholder which can be used to show a message that the web part still has to be configured. How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Placeholder } from @pnp/spfx-controls-react/lib/Placeholder ; Use the Placeholder control in your code as follows: Placeholder iconName = Edit iconText = Configure your web part description = Please configure the web part. buttonLabel = Configure onConfigure = { this . _onConfigure } / With the onConfigure property you can define what it needs to do when you click on the button. Like for example opening the property pane: private _onConfigure() { // Context of the web part this . props . context . propertyPane . open (); } Implementation The placeholder control can be configured with the following properties: Property Type Required Description buttonLabel string no Text label to be displayed on the button bellow the description. The button is optional. contentClassName string no This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder. description string yes Text description for the placeholder. This appears bellow the Icon and IconText. iconName string yes The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: Office UI Fabric icons . For example: Page or Add . iconText string yes Heading text which is displayed next to the icon. onConfigure function no onConfigure handler for the button. The button is optional.","title":"Placeholder"},{"location":"controls/Placeholder/#placeholder-control","text":"This control renders a placeholder which can be used to show a message that the web part still has to be configured.","title":"Placeholder control"},{"location":"controls/Placeholder/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { Placeholder } from @pnp/spfx-controls-react/lib/Placeholder ; Use the Placeholder control in your code as follows: Placeholder iconName = Edit iconText = Configure your web part description = Please configure the web part. buttonLabel = Configure onConfigure = { this . _onConfigure } / With the onConfigure property you can define what it needs to do when you click on the button. Like for example opening the property pane: private _onConfigure() { // Context of the web part this . props . context . propertyPane . open (); }","title":"How to use this control in your solutions"},{"location":"controls/Placeholder/#implementation","text":"The placeholder control can be configured with the following properties: Property Type Required Description buttonLabel string no Text label to be displayed on the button bellow the description. The button is optional. contentClassName string no This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder. description string yes Text description for the placeholder. This appears bellow the Icon and IconText. iconName string yes The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: Office UI Fabric icons . For example: Page or Add . iconText string yes Heading text which is displayed next to the icon. onConfigure function no onConfigure handler for the button. The button is optional.","title":"Implementation"},{"location":"controls/SecurityTrimmedControl/","text":"SecurityTrimmedControl This control is intended to be used when you want to show or hide components based on the user its permissions. The control can be used to check the user\u2019s permissions on the current site / list were the solution is loaded, or on a remote site / list. How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SecurityTrimmedControl } from @pnp/spfx-controls-react/lib/SecurityTrimmedControl ; You can use the SecurityTrimmedControl as follows in your solutions: Checking permissions on the current site SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentWeb} permissions={[SPPermission.viewPages]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on the current list SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentList} permissions={[SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on remote site SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteWeb} remoteSiteUrl= https:// tenant .sharepoint.com/sites/ siteName permissions={[SPPermission.viewPages, SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on remote list / library SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteListOrLib} remoteSiteUrl= https:// tenant .sharepoint.com/sites/ siteName relativeLibOrListUrl= /sites/ siteName / list-or-library-URL permissions={[SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Implementation The SecurityTrimmedControl can be configured with the following properties: Property Type Required Description context WebPartContext or ApplicationCustomizerContext or FieldCustomizerContext or ListViewCommandSetContext yes Context of the web part, application customizer, field customizer, or list view command set. permissions SPPermission[] yes The permissions to check for the user. level PermissionLevel yes Specify where to check the user permissions: current site or list / remote site or list. remoteSiteUrl string no The URL of the remote site. Required when you want to check permissions on remote site or list. relativeLibOrListUrl string no The relative URL of the list or library. Required when you want to check permissions on remote list.","title":"SecurityTrimmedControl"},{"location":"controls/SecurityTrimmedControl/#securitytrimmedcontrol","text":"This control is intended to be used when you want to show or hide components based on the user its permissions. The control can be used to check the user\u2019s permissions on the current site / list were the solution is loaded, or on a remote site / list.","title":"SecurityTrimmedControl"},{"location":"controls/SecurityTrimmedControl/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SecurityTrimmedControl } from @pnp/spfx-controls-react/lib/SecurityTrimmedControl ; You can use the SecurityTrimmedControl as follows in your solutions: Checking permissions on the current site SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentWeb} permissions={[SPPermission.viewPages]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on the current list SecurityTrimmedControl context={this.props.context} level={PermissionLevel.currentList} permissions={[SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on remote site SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteWeb} remoteSiteUrl= https:// tenant .sharepoint.com/sites/ siteName permissions={[SPPermission.viewPages, SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl Checking permissions on remote list / library SecurityTrimmedControl context={this.props.context} level={PermissionLevel.remoteListOrLib} remoteSiteUrl= https:// tenant .sharepoint.com/sites/ siteName relativeLibOrListUrl= /sites/ siteName / list-or-library-URL permissions={[SPPermission.addListItems]} {/* Specify the components to load when user has the required permissions */} /SecurityTrimmedControl","title":"How to use this control in your solutions"},{"location":"controls/SecurityTrimmedControl/#implementation","text":"The SecurityTrimmedControl can be configured with the following properties: Property Type Required Description context WebPartContext or ApplicationCustomizerContext or FieldCustomizerContext or ListViewCommandSetContext yes Context of the web part, application customizer, field customizer, or list view command set. permissions SPPermission[] yes The permissions to check for the user. level PermissionLevel yes Specify where to check the user permissions: current site or list / remote site or list. remoteSiteUrl string no The URL of the remote site. Required when you want to check permissions on remote site or list. relativeLibOrListUrl string no The relative URL of the list or library. Required when you want to check permissions on remote list.","title":"Implementation"},{"location":"controls/SiteBreadcrumb/","text":"SiteBreadcrumb control This control returns a breadcrumb based on the current location. How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SiteBreadcrumb } from @pnp/spfx-controls-react/lib/SiteBreadcrumb ; Use the SiteBreadcrumb control in your code as follows: SiteBreadcrumb context = { this . props . context } / Implementation The SiteBreadcrumb control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes Pass the context of your web part or application customizer extension.","title":"SiteBreadcrumb"},{"location":"controls/SiteBreadcrumb/#sitebreadcrumb-control","text":"This control returns a breadcrumb based on the current location.","title":"SiteBreadcrumb control"},{"location":"controls/SiteBreadcrumb/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { SiteBreadcrumb } from @pnp/spfx-controls-react/lib/SiteBreadcrumb ; Use the SiteBreadcrumb control in your code as follows: SiteBreadcrumb context = { this . props . context } /","title":"How to use this control in your solutions"},{"location":"controls/SiteBreadcrumb/#implementation","text":"The SiteBreadcrumb control can be configured with the following properties: Property Type Required Description context WebPartContext OR ApplicationCustomizerContext yes Pass the context of your web part or application customizer extension.","title":"Implementation"},{"location":"controls/TaxonomyPicker/","text":"Taxonomy Picker This control allows you to select one or more Terms from a TermSet via its name or TermSet ID. You can also configure the control to select the child terms from a specific term in the TermSet by setting the AnchorId. Disclaimer This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in picker Term picker: Auto Complete How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { TaxonomyPicker , IPickerTerms } from @pnp/spfx-controls-react/lib/TaxonomyPicker ; Use the TaxonomyPicker control in your code as follows: TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = Countries panelTitle = Select Term label = Taxonomy Picker context = { this . props . context } onChange = { this . onTaxPickerChange } isTermSetSelectable = { false } / With the onChange property you can capture the event of when the terms in the picker has changed: private onTaxPickerChange ( terms : IPickerTerms ) { console . log ( Terms , terms ); } Implementation The TaxonomyPicker control can be configured with the following properties: Property Type Required Description panelTitle string yes TermSet Picker Panel title. label string yes Text displayed above the Taxonomy Picker. disabled string no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. termsetNameOrID string yes The name or Id of your TermSet that you would like the Taxonomy Picker to chose terms from. onChange function no captures the event of when the terms in the picker has changed. isTermSetSelectable boolean no Specify if the TermSet itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. disableChildrenOfDisabledParents boolean no Specify if you want to disable the child terms when their parent is disabled. anchorId string no Set the anchorid to a child term in the TermSet to be able to select terms from that level and below. Interface IPickerTerm Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent TermSet of the term termSetName string no The Name of the parent TermSet of the term Interface IPickerTerms An Array of IPickerTerm","title":"TaxonomyPicker"},{"location":"controls/TaxonomyPicker/#taxonomy-picker","text":"This control allows you to select one or more Terms from a TermSet via its name or TermSet ID. You can also configure the control to select the child terms from a specific term in the TermSet by setting the AnchorId. Disclaimer This control makes use of the ProcessQuery API end-points to retrieve the managed metadata information. This will get changed once the APIs for managing managed metadata will become available. Empty term picker Selecting terms Selected terms in picker Term picker: Auto Complete","title":"Taxonomy Picker"},{"location":"controls/TaxonomyPicker/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { TaxonomyPicker , IPickerTerms } from @pnp/spfx-controls-react/lib/TaxonomyPicker ; Use the TaxonomyPicker control in your code as follows: TaxonomyPicker allowMultipleSelections = { true } termsetNameOrID = Countries panelTitle = Select Term label = Taxonomy Picker context = { this . props . context } onChange = { this . onTaxPickerChange } isTermSetSelectable = { false } / With the onChange property you can capture the event of when the terms in the picker has changed: private onTaxPickerChange ( terms : IPickerTerms ) { console . log ( Terms , terms ); }","title":"How to use this control in your solutions"},{"location":"controls/TaxonomyPicker/#implementation","text":"The TaxonomyPicker control can be configured with the following properties: Property Type Required Description panelTitle string yes TermSet Picker Panel title. label string yes Text displayed above the Taxonomy Picker. disabled string no Specify if the control needs to be disabled. context WebPartContext yes Context of the current web part. initialValues IPickerTerms no Defines the selected by default term sets. allowMultipleSelections boolean no Defines if the user can select only one or many term sets. Default value is false. termsetNameOrID string yes The name or Id of your TermSet that you would like the Taxonomy Picker to chose terms from. onChange function no captures the event of when the terms in the picker has changed. isTermSetSelectable boolean no Specify if the TermSet itself is selectable in the tree view. disabledTermIds string[] no Specify which terms should be disabled in the term set so that they cannot be selected. disableChildrenOfDisabledParents boolean no Specify if you want to disable the child terms when their parent is disabled. anchorId string no Set the anchorid to a child term in the TermSet to be able to select terms from that level and below. Interface IPickerTerm Property Type Required Description key string yes The ID of the term name string yes The name of the term path string yes The path of the term termSet string yes The Id of the parent TermSet of the term termSetName string no The Name of the parent TermSet of the term Interface IPickerTerms An Array of IPickerTerm","title":"Implementation"},{"location":"controls/WebPartTitle/","text":"WebPartTitle control This control renders a web part title that is changeable when the page is in edit mode. Here is an example of the control in action: How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In the root web part file, the one that extends from the BaseClientSideWebPart class. Pass the following properties to your web part main component: const element : React.ReactElement IControlsTestProps = React . createElement ( ControlsTest , { title : this.properties.title , displayMode : this.displayMode , updateProperty : ( value : string ) = { this . properties . title = value ; } } ); Add the title , displayMode , and updateProperty properties to the properties interface of your component: import { DisplayMode } from @microsoft/sp-core-library ; export interface IControlsTestProps { title : string ; displayMode : DisplayMode ; updateProperty : ( value : string ) = void ; } In your component file, import the WebPartTitle control as follows: import { WebPartTitle } from @pnp/spfx-controls-react/lib/WebPartTitle ; Use the WebPartTitle control in your code as follows: WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } / Implementation The WebPartTitle control can be configured with the following properties: Property Type Required Description displayMode DisplayMode yes This tells the control in which page mode it is rendering. title string yes The title value for the web part. updateProperty Function yes Function that you can pass to update the title in the root web part. className string no Optional property to specify a custom class that allows you to change the web part title style.","title":"WebPartTitle"},{"location":"controls/WebPartTitle/#webparttitle-control","text":"This control renders a web part title that is changeable when the page is in edit mode. Here is an example of the control in action:","title":"WebPartTitle control"},{"location":"controls/WebPartTitle/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. In the root web part file, the one that extends from the BaseClientSideWebPart class. Pass the following properties to your web part main component: const element : React.ReactElement IControlsTestProps = React . createElement ( ControlsTest , { title : this.properties.title , displayMode : this.displayMode , updateProperty : ( value : string ) = { this . properties . title = value ; } } ); Add the title , displayMode , and updateProperty properties to the properties interface of your component: import { DisplayMode } from @microsoft/sp-core-library ; export interface IControlsTestProps { title : string ; displayMode : DisplayMode ; updateProperty : ( value : string ) = void ; } In your component file, import the WebPartTitle control as follows: import { WebPartTitle } from @pnp/spfx-controls-react/lib/WebPartTitle ; Use the WebPartTitle control in your code as follows: WebPartTitle displayMode = { this . props . displayMode } title = { this . props . title } updateProperty = { this . props . updateProperty } /","title":"How to use this control in your solutions"},{"location":"controls/WebPartTitle/#implementation","text":"The WebPartTitle control can be configured with the following properties: Property Type Required Description displayMode DisplayMode yes This tells the control in which page mode it is rendering. title string yes The title value for the web part. updateProperty Function yes Function that you can pass to update the title in the root web part. className string no Optional property to specify a custom class that allows you to change the web part title style.","title":"Implementation"},{"location":"controls/fields/FieldAttachmentsRenderer/","text":"FieldAttachmentsRenderer control This control renders Clip icon based on the provided count property is defined and greater than 0. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields Attachments How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldAttachmentsRenderer } from @pnp/spfx-controls-react/lib/FieldAttachmentsRenderer ; Use the FieldAttachmentsRenderer control in your code as follows: FieldAttachmentsRenderer count = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldAttachmentsRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. count number no Amount of attachments. The icon is displayed if the property is defined and greater than 0","title":"FieldAttachmentsRenderer"},{"location":"controls/fields/FieldAttachmentsRenderer/#fieldattachmentsrenderer-control","text":"This control renders Clip icon based on the provided count property is defined and greater than 0. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldAttachmentsRenderer control"},{"location":"controls/fields/FieldAttachmentsRenderer/#covered-fields","text":"Attachments","title":"Covered Fields"},{"location":"controls/fields/FieldAttachmentsRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldAttachmentsRenderer } from @pnp/spfx-controls-react/lib/FieldAttachmentsRenderer ; Use the FieldAttachmentsRenderer control in your code as follows: FieldAttachmentsRenderer count = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldAttachmentsRenderer/#implementation","text":"The FieldAttachmentsRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. count number no Amount of attachments. The icon is displayed if the property is defined and greater than 0","title":"Implementation"},{"location":"controls/fields/FieldDateRenderer/","text":"FieldDateRenderer control This control renders date string as a simple text. Covered Fields Date and Time How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldDateRenderer } from @pnp/spfx-controls-react/lib/FieldDateRenderer ; Use the FieldDateRenderer control in your code as follows: FieldDateRenderer text = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} / Note: FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to FieldRendererHelper implementation. Implementation The FieldDateRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"FieldDateRenderer"},{"location":"controls/fields/FieldDateRenderer/#fielddaterenderer-control","text":"This control renders date string as a simple text.","title":"FieldDateRenderer control"},{"location":"controls/fields/FieldDateRenderer/#covered-fields","text":"Date and Time","title":"Covered Fields"},{"location":"controls/fields/FieldDateRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldDateRenderer } from @pnp/spfx-controls-react/lib/FieldDateRenderer ; Use the FieldDateRenderer control in your code as follows: FieldDateRenderer text = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} / Note: FieldDateRenderer doesn't provide functionality to render date in friendly format. It just renders the provided text as is. To learn more about friendly formatting please refer to FieldRendererHelper implementation.","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldDateRenderer/#implementation","text":"The FieldDateRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"Implementation"},{"location":"controls/fields/FieldFileTypeRenderer/","text":"FieldFileTypeRenderer control This control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields Type (DocIcon) How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldFileTypeRenderer } from @pnp/spfx-controls-react/lib/FieldFileTypeRenderer ; Use the FieldFileTypeRenderer control in your code as follows: FieldFileTypeRenderer path = { fileLeafRef } isFolder = { false } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldFileTypeRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. path string yes document/file path isFolder boolean no true if the icon should be rendered for a folder, not file","title":"FieldFileTypeRenderer"},{"location":"controls/fields/FieldFileTypeRenderer/#fieldfiletyperenderer-control","text":"This control renders document or folder icon based on file path. Office UI Fabric icons font is used to render the icons. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldFileTypeRenderer control"},{"location":"controls/fields/FieldFileTypeRenderer/#covered-fields","text":"Type (DocIcon)","title":"Covered Fields"},{"location":"controls/fields/FieldFileTypeRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldFileTypeRenderer } from @pnp/spfx-controls-react/lib/FieldFileTypeRenderer ; Use the FieldFileTypeRenderer control in your code as follows: FieldFileTypeRenderer path = { fileLeafRef } isFolder = { false } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldFileTypeRenderer/#implementation","text":"The FieldFileTypeRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. path string yes document/file path isFolder boolean no true if the icon should be rendered for a folder, not file","title":"Implementation"},{"location":"controls/fields/FieldLookupRenderer/","text":"FieldLookupRenderer control This control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form. Note: this control displays correctly starting with SharePoint Framework v1.4 Covered Fields Lookup (single, multi) How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldLookupRenderer } from @pnp/spfx-controls-react/lib/FieldLookupRenderer ; Use the FieldLookupRenderer control in your code as follows: FieldLookupRenderer lookups = { event . fieldValue } fieldId = { field-guid } context = { this . context } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldLookupRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. lookups ISPFieldLookupValue[] yes Lookup field values. dispFormUrl boolean no Url of Display form for the list that is referenced by the lookup. onClick (args: ILookupClickEventArgs) = {} no Custom event handler of lookup item click. If not set the dialog with Display Form will be shown. fieldId string Field's id context IContext Customizer context. Must be providede if fieldId is set","title":"FieldLookupRenderer"},{"location":"controls/fields/FieldLookupRenderer/#fieldlookuprenderer-control","text":"This control renders lookup values. Each lookup item is clickable. Click on the lookup item leads to opening of referenced item's display form. Note: this control displays correctly starting with SharePoint Framework v1.4","title":"FieldLookupRenderer control"},{"location":"controls/fields/FieldLookupRenderer/#covered-fields","text":"Lookup (single, multi)","title":"Covered Fields"},{"location":"controls/fields/FieldLookupRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldLookupRenderer } from @pnp/spfx-controls-react/lib/FieldLookupRenderer ; Use the FieldLookupRenderer control in your code as follows: FieldLookupRenderer lookups = { event . fieldValue } fieldId = { field-guid } context = { this . context } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldLookupRenderer/#implementation","text":"The FieldLookupRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. lookups ISPFieldLookupValue[] yes Lookup field values. dispFormUrl boolean no Url of Display form for the list that is referenced by the lookup. onClick (args: ILookupClickEventArgs) = {} no Custom event handler of lookup item click. If not set the dialog with Display Form will be shown. fieldId string Field's id context IContext Customizer context. Must be providede if fieldId is set","title":"Implementation"},{"location":"controls/fields/FieldNameRenderer/","text":"FieldNameRenderer control This control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon. Note: The Name column in document libraries is marked as noneditable. See this issue for details. Note Glimmer icon displays correctly starting with SharePoint Framework v1.4 Covered Fields Document Name (LinkFilename, LinkFilenameNomenu, FileLieafRef) How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldNameRenderer } from @pnp/spfx-controls-react/lib/FieldNameRenderer ; Use the FieldNameRenderer control in your code as follows: FieldNameRenderer text = { Technical Requirements } isLink = { true } isNew = { false } filePath = { https://contoso.sharepoint.com/Documents/tech-requirements.pdf } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldNameRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. isNew boolean no True if the document is new. filePath string no Path to the document. hasPreview boolean no True if the document has preview and link href should be constructed to display the preview (instead of direct document's link). The flag works only if onClick property is NOT defined. onClick (args: INameClickEventArgs) = {} no Custom handler for link click. If not set link click will lead to rendering document preview. Works if isLink is set to true onDoubleClick (args: INameClickEventArgs) = {} no Custom handler for link double click. If not set link If not set link will use OOTB behavior. Works if isLink is set to true","title":"FieldNameRenderer"},{"location":"controls/fields/FieldNameRenderer/#fieldnamerenderer-control","text":"This control renders document's name as a link. The link provides either preview (if it is available) or direct download. Additionally, new documents are marked with \"Glimmer\" icon. Note: The Name column in document libraries is marked as noneditable. See this issue for details. Note Glimmer icon displays correctly starting with SharePoint Framework v1.4","title":"FieldNameRenderer control"},{"location":"controls/fields/FieldNameRenderer/#covered-fields","text":"Document Name (LinkFilename, LinkFilenameNomenu, FileLieafRef)","title":"Covered Fields"},{"location":"controls/fields/FieldNameRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldNameRenderer } from @pnp/spfx-controls-react/lib/FieldNameRenderer ; Use the FieldNameRenderer control in your code as follows: FieldNameRenderer text = { Technical Requirements } isLink = { true } isNew = { false } filePath = { https://contoso.sharepoint.com/Documents/tech-requirements.pdf } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldNameRenderer/#implementation","text":"The FieldNameRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. isNew boolean no True if the document is new. filePath string no Path to the document. hasPreview boolean no True if the document has preview and link href should be constructed to display the preview (instead of direct document's link). The flag works only if onClick property is NOT defined. onClick (args: INameClickEventArgs) = {} no Custom handler for link click. If not set link click will lead to rendering document preview. Works if isLink is set to true onDoubleClick (args: INameClickEventArgs) = {} no Custom handler for link double click. If not set link If not set link will use OOTB behavior. Works if isLink is set to true","title":"Implementation"},{"location":"controls/fields/FieldRendererHelper/","text":"FieldRendererHelper class FieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters. How to use this class in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldRendererHelper } from @pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper ; Use the FieldRendererHelper.getFieldRenderer method to asynchronously request proper React control (As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render ): public componentWillMount() { FieldRendererHelper . getFieldRenderer ( fieldValue , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer = { // update state to re-render the Field Customizer this . setState ({ fieldRenderer : fieldRenderer }); }); } Render the requestted fieldRenderer : public render () : React . ReactElement {} { return ( div className = { styles . cell } { this . state . fieldRenderer } /div ); } Implementation The FieldRendererHelper class contains single method getFieldRenderer with next signature: public static getFieldRenderer ( fieldValue : any , props : IFieldRendererProps , listItem : ListItemAccessor , context : IContext ) : Promise JSX . Element Parameters: Parameter Type Description fieldValue any Value of the field. props IFieldRendererProps Basic properties interface for Field Controls. Contains className and cssProps properties listItem ListItemAccessor Current List Item context IContext SPFx Context","title":"FieldRendererHelper"},{"location":"controls/fields/FieldRendererHelper/#fieldrendererhelper-class","text":"FieldRendererHelper class is used to automatically apply needed Field Control based on current Field parameters.","title":"FieldRendererHelper class"},{"location":"controls/fields/FieldRendererHelper/#how-to-use-this-class-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldRendererHelper } from @pnp/spfx-controls-react/lib/Utilities/FieldRendererHelper ; Use the FieldRendererHelper.getFieldRenderer method to asynchronously request proper React control (As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render ): public componentWillMount() { FieldRendererHelper . getFieldRenderer ( fieldValue , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer = { // update state to re-render the Field Customizer this . setState ({ fieldRenderer : fieldRenderer }); }); } Render the requestted fieldRenderer : public render () : React . ReactElement {} { return ( div className = { styles . cell } { this . state . fieldRenderer } /div ); }","title":"How to use this class in your solutions"},{"location":"controls/fields/FieldRendererHelper/#implementation","text":"The FieldRendererHelper class contains single method getFieldRenderer with next signature: public static getFieldRenderer ( fieldValue : any , props : IFieldRendererProps , listItem : ListItemAccessor , context : IContext ) : Promise JSX . Element Parameters: Parameter Type Description fieldValue any Value of the field. props IFieldRendererProps Basic properties interface for Field Controls. Contains className and cssProps properties listItem ListItemAccessor Current List Item context IContext SPFx Context","title":"Implementation"},{"location":"controls/fields/FieldTaxonomyRenderer/","text":"FieldTaxonomyRenderer control This control renders terms from Managed Metadata field. Covered Fields Managed Metadata How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTaxonomyRenderer } from @pnp/spfx-controls-react/lib/FieldTaxonomyRenderer ; Use the FieldTaxonomyRenderer control in your code as follows: FieldTaxonomyRenderer terms = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldTaxonomyRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. terms ITerm[] yes Managed Metadata terms.","title":"FieldTaxonomyRenderer"},{"location":"controls/fields/FieldTaxonomyRenderer/#fieldtaxonomyrenderer-control","text":"This control renders terms from Managed Metadata field.","title":"FieldTaxonomyRenderer control"},{"location":"controls/fields/FieldTaxonomyRenderer/#covered-fields","text":"Managed Metadata","title":"Covered Fields"},{"location":"controls/fields/FieldTaxonomyRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTaxonomyRenderer } from @pnp/spfx-controls-react/lib/FieldTaxonomyRenderer ; Use the FieldTaxonomyRenderer control in your code as follows: FieldTaxonomyRenderer terms = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTaxonomyRenderer/#implementation","text":"The FieldTaxonomyRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. terms ITerm[] yes Managed Metadata terms.","title":"Implementation"},{"location":"controls/fields/FieldTextRenderer/","text":"FieldTextRenderer control This control renders simple text. Covered Fields Single line of text Multiple lines of text Choice Number Currency Yes/No Default renderer for uncovered types of fields How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTextRenderer } from @pnp/spfx-controls-react/lib/FieldTextRenderer ; Use the FieldTextRenderer control in your code as follows: FieldTextRenderer text = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldTextRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"FieldTextRenderer"},{"location":"controls/fields/FieldTextRenderer/#fieldtextrenderer-control","text":"This control renders simple text.","title":"FieldTextRenderer control"},{"location":"controls/fields/FieldTextRenderer/#covered-fields","text":"Single line of text Multiple lines of text Choice Number Currency Yes/No Default renderer for uncovered types of fields","title":"Covered Fields"},{"location":"controls/fields/FieldTextRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTextRenderer } from @pnp/spfx-controls-react/lib/FieldTextRenderer ; Use the FieldTextRenderer control in your code as follows: FieldTextRenderer text = { event . fieldValue } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTextRenderer/#implementation","text":"The FieldTextRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered","title":"Implementation"},{"location":"controls/fields/FieldTitleRenderer/","text":"FieldTitleRenderer control This control renders title either as a simple text or as a link to the Display Form. Additional actions like Share and Context Menu are not implemented. Covered Fields List Item Title (Title, LinkTitle, LinkTitleNoMenu) How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTitleRenderer } from @pnp/spfx-controls-react/lib/FieldTitleRenderer ; Use the FieldTitleRenderer control in your code as follows: FieldTitleRenderer text = { Technical Requirements } isLink = { true } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldTitleRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. baseUrl string no Web Url. Should be provided if onClick is not defined listId string no List Id. Should be provided if onClick is not defined id number no Item Id. Should be provided if onClick is not defined onClick (args: ITitleClickEventArgs) = {} no Custom title click event handler. If not set Display form for the item will be displayed.","title":"FieldTitleRenderer"},{"location":"controls/fields/FieldTitleRenderer/#fieldtitlerenderer-control","text":"This control renders title either as a simple text or as a link to the Display Form. Additional actions like Share and Context Menu are not implemented.","title":"FieldTitleRenderer control"},{"location":"controls/fields/FieldTitleRenderer/#covered-fields","text":"List Item Title (Title, LinkTitle, LinkTitleNoMenu)","title":"Covered Fields"},{"location":"controls/fields/FieldTitleRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldTitleRenderer } from @pnp/spfx-controls-react/lib/FieldTitleRenderer ; Use the FieldTitleRenderer control in your code as follows: FieldTitleRenderer text = { Technical Requirements } isLink = { true } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldTitleRenderer/#implementation","text":"The FieldTitleRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. isLink boolean yes True if the name should be rendered as a link. baseUrl string no Web Url. Should be provided if onClick is not defined listId string no List Id. Should be provided if onClick is not defined id number no Item Id. Should be provided if onClick is not defined onClick (args: ITitleClickEventArgs) = {} no Custom title click event handler. If not set Display form for the item will be displayed.","title":"Implementation"},{"location":"controls/fields/FieldUrlRenderer/","text":"FieldUrlRenderer control This control renders Hyperlink or Picture field value as a link or image. Covered Fields Hyperlink or Image Url in Links List How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUrlRenderer } from @pnp/spfx-controls-react/lib/FieldUrlRenderer ; Use the FieldUrlRenderer control in your code as follows: // to show Url FieldUrlRenderer text = { microsoft } url = { http://www.microsoft.com } className = { some-class } cssProps = {{ background : #f00 }} / // to show Image FieldUrlRenderer url = { http://cdn.contoso.com/images/logo.png } isImageUrl = { true } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldUrlRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. url string yes Url. isImageUrl boolean no True if the control should be rendered as an image.","title":"FieldUrlRenderer"},{"location":"controls/fields/FieldUrlRenderer/#fieldurlrenderer-control","text":"This control renders Hyperlink or Picture field value as a link or image.","title":"FieldUrlRenderer control"},{"location":"controls/fields/FieldUrlRenderer/#covered-fields","text":"Hyperlink or Image Url in Links List","title":"Covered Fields"},{"location":"controls/fields/FieldUrlRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUrlRenderer } from @pnp/spfx-controls-react/lib/FieldUrlRenderer ; Use the FieldUrlRenderer control in your code as follows: // to show Url FieldUrlRenderer text = { microsoft } url = { http://www.microsoft.com } className = { some-class } cssProps = {{ background : #f00 }} / // to show Image FieldUrlRenderer url = { http://cdn.contoso.com/images/logo.png } isImageUrl = { true } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldUrlRenderer/#implementation","text":"The FieldUrlRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. text string no Text to be rendered. url string yes Url. isImageUrl boolean no True if the control should be rendered as an image.","title":"Implementation"},{"location":"controls/fields/FieldUserRenderer/","text":"FieldUserRenderer control This control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control. Note: some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier Covered Fields Person or Group How to use this control in your solutions Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUserRenderer } from @pnp/spfx-controls-react/lib/FieldUserRenderer ; Use the FieldUserRenderer control in your code as follows: FieldUserRenderer users = { event . fieldValue } context = { this . context } className = { some-class } cssProps = {{ background : #f00 }} / Implementation The FieldUserRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. users IPrincipal no Users/groups to be displayed as they appear in event.fieldValue for Field Customizer's onRenderCell event. context IContext yes SPFx context.","title":"FieldUserRenderer"},{"location":"controls/fields/FieldUserRenderer/#fielduserrenderer-control","text":"This control renders each referenced user/group as a link on a separate line. Hovering the link for users (not groups) leads to opening of Persona control. Note: some icons may be rendered incorrectly if used with SharePoint Framework v1.3 or earlier","title":"FieldUserRenderer control"},{"location":"controls/fields/FieldUserRenderer/#covered-fields","text":"Person or Group","title":"Covered Fields"},{"location":"controls/fields/FieldUserRenderer/#how-to-use-this-control-in-your-solutions","text":"Check that you installed the @pnp/spfx-controls-react dependency. Check out the getting started page for more information about installing the dependency. Import the following modules to your component: import { FieldUserRenderer } from @pnp/spfx-controls-react/lib/FieldUserRenderer ; Use the FieldUserRenderer control in your code as follows: FieldUserRenderer users = { event . fieldValue } context = { this . context } className = { some-class } cssProps = {{ background : #f00 }} /","title":"How to use this control in your solutions"},{"location":"controls/fields/FieldUserRenderer/#implementation","text":"The FieldUserRenderer component can be configured with the following properties: Property Type Required Description cssProps React.CSSProperties no CSS styles to apply to the renderer. className ICssInput no CSS classes to apply to the renderer. users IPrincipal no Users/groups to be displayed as they appear in event.fieldValue for Field Customizer's onRenderCell event. context IContext yes SPFx context.","title":"Implementation"},{"location":"controls/fields/main/","text":"Field Customizer Out-of-the-box Fields Controls These controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component. Related UserVoice requests: https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth Usage The main scenario to use this package is to import FieldRendererHelper class and to call getFieldRenderer method. This method returns a Promise with a proper field renderer ( Promise JSX.Element ) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields). As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render . The resulting field renderer could be saved in the element's state and used later in render method. Here is an example on how it can be used inside custom Field Customizer component (.tsx file): export interface IOotbFieldsState { fieldRenderer? : JSX.Element ; } //... @override public componentWillMount() { FieldRendererHelper . getFieldRenderer ( this . props . value , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer = { this . setState ({ fieldRenderer : fieldRenderer }); }); } public render () : React . ReactElement {} { return ( div className = { styles . cell } { this . state . fieldRenderer } /div ); } Additionally, any of included components can be used by itself. FieldRendererHelper FieldRendererHelper class is a recommended way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields. Available Controls The following Field Controls are currently available: FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Getting started"},{"location":"controls/fields/main/#field-customizer-out-of-the-box-fields-controls","text":"These controls represent React controls that can be used in SPFx Field Customizers to provide rendering of the fields similar to out of the box experience. Additional benefit is ability to set custom css classes and styles to the component. Related UserVoice requests: https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/18810637-access-to-re-use-modern-field-render-controls https://sharepoint.uservoice.com/forums/329220-sharepoint-dev-platform/suggestions/31530607-field-customizer-ability-to-call-ootb-render-meth","title":"Field Customizer Out-of-the-box Fields Controls"},{"location":"controls/fields/main/#usage","text":"The main scenario to use this package is to import FieldRendererHelper class and to call getFieldRenderer method. This method returns a Promise with a proper field renderer ( Promise JSX.Element ) based on field's type. It means that it will automatically select proper component that should be rendered in this or that field. This method also contains logic to correctly process field's value and get correct text to display (for example, Friendly Text for DateTime fields). As the method returns Promise it should be called in one of React component lifecycle methods, for example, componentWillMount that will occur before render . The resulting field renderer could be saved in the element's state and used later in render method. Here is an example on how it can be used inside custom Field Customizer component (.tsx file): export interface IOotbFieldsState { fieldRenderer? : JSX.Element ; } //... @override public componentWillMount() { FieldRendererHelper . getFieldRenderer ( this . props . value , { className : this.props.className , cssProps : this.props.cssProps }, this . props . listItem , this . props . context ). then ( fieldRenderer = { this . setState ({ fieldRenderer : fieldRenderer }); }); } public render () : React . ReactElement {} { return ( div className = { styles . cell } { this . state . fieldRenderer } /div ); } Additionally, any of included components can be used by itself.","title":"Usage"},{"location":"controls/fields/main/#fieldrendererhelper","text":"FieldRendererHelper class is a recommended way to use Field Controls as it provides additional functionality to automatically render the content for any type of fields.","title":"FieldRendererHelper"},{"location":"controls/fields/main/#available-controls","text":"The following Field Controls are currently available: FieldAttachmentsRenderer (renders Clip icon based on the provided count property is defined and greater than 0) FieldDateRenderer (renders date string as a simple text) FieldFileTypeRenderer (renders document or folder icon based on file path) FieldLookupRenderer (renders lookup values) FieldNameRenderer (renders document's name as a link) FieldTaxonomyRenderer (renders terms from Managed Metadata field) FieldTextRenderer (renders simple text) FieldTitleRenderer (renders title either as a simple text or as a link to the Display Form) FieldUrlRenderer (renders Hyperlink or Picture field value as a link or image) FieldUserRenderer (renders each referenced user/group as a link on a separate line)","title":"Available Controls"}]}